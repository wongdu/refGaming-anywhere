// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router_peer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "router_peer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace proto {
class HostIdRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HostIdRequest> {
} _HostIdRequest_default_instance_;
class ResetHostIdDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ResetHostId> {
} _ResetHostId_default_instance_;
class HostIdResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HostIdResponse> {
} _HostIdResponse_default_instance_;
class ConnectionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConnectionRequest> {
} _ConnectionRequest_default_instance_;
class ConnectionOfferDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ConnectionOffer> {
} _ConnectionOffer_default_instance_;
class RouterToPeerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RouterToPeer> {
} _RouterToPeer_default_instance_;
class PeerToRouterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PeerToRouter> {
} _PeerToRouter_default_instance_;

namespace protobuf_router_5fpeer_2eproto {


void TableStruct::Shutdown() {
  _HostIdRequest_default_instance_.Shutdown();
  _ResetHostId_default_instance_.Shutdown();
  _HostIdResponse_default_instance_.Shutdown();
  _ConnectionRequest_default_instance_.Shutdown();
  _ConnectionOffer_default_instance_.Shutdown();
  _RouterToPeer_default_instance_.Shutdown();
  _PeerToRouter_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_router_5fcommon_2eproto::InitDefaults();
  _HostIdRequest_default_instance_.DefaultConstruct();
  _ResetHostId_default_instance_.DefaultConstruct();
  _HostIdResponse_default_instance_.DefaultConstruct();
  _ConnectionRequest_default_instance_.DefaultConstruct();
  _ConnectionOffer_default_instance_.DefaultConstruct();
  _RouterToPeer_default_instance_.DefaultConstruct();
  _PeerToRouter_default_instance_.DefaultConstruct();
  _ConnectionOffer_default_instance_.get_mutable()->relay_ = const_cast< ::proto::RelayCredentials*>(
      ::proto::RelayCredentials::internal_default_instance());
  _RouterToPeer_default_instance_.get_mutable()->host_id_response_ = const_cast< ::proto::HostIdResponse*>(
      ::proto::HostIdResponse::internal_default_instance());
  _RouterToPeer_default_instance_.get_mutable()->connection_offer_ = const_cast< ::proto::ConnectionOffer*>(
      ::proto::ConnectionOffer::internal_default_instance());
  _PeerToRouter_default_instance_.get_mutable()->connection_request_ = const_cast< ::proto::ConnectionRequest*>(
      ::proto::ConnectionRequest::internal_default_instance());
  _PeerToRouter_default_instance_.get_mutable()->host_id_request_ = const_cast< ::proto::HostIdRequest*>(
      ::proto::HostIdRequest::internal_default_instance());
  _PeerToRouter_default_instance_.get_mutable()->reset_host_id_ = const_cast< ::proto::ResetHostId*>(
      ::proto::ResetHostId::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::proto::protobuf_router_5fcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_router_5fpeer_2eproto

bool HostIdRequest_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const HostIdRequest_Type HostIdRequest::UNKNOWN;
const HostIdRequest_Type HostIdRequest::NEW_ID;
const HostIdRequest_Type HostIdRequest::EXISTING_ID;
const HostIdRequest_Type HostIdRequest::Type_MIN;
const HostIdRequest_Type HostIdRequest::Type_MAX;
const int HostIdRequest::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ConnectionOffer_PeerRole_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConnectionOffer_PeerRole ConnectionOffer::HOST;
const ConnectionOffer_PeerRole ConnectionOffer::CLIENT;
const ConnectionOffer_PeerRole ConnectionOffer::PeerRole_MIN;
const ConnectionOffer_PeerRole ConnectionOffer::PeerRole_MAX;
const int ConnectionOffer::PeerRole_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool ConnectionOffer_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const ConnectionOffer_ErrorCode ConnectionOffer::SUCCESS;
const ConnectionOffer_ErrorCode ConnectionOffer::UNKNOWN_ERROR;
const ConnectionOffer_ErrorCode ConnectionOffer::PEER_NOT_FOUND;
const ConnectionOffer_ErrorCode ConnectionOffer::ACCESS_DENIED;
const ConnectionOffer_ErrorCode ConnectionOffer::KEY_POOL_EMPTY;
const ConnectionOffer_ErrorCode ConnectionOffer::ErrorCode_MIN;
const ConnectionOffer_ErrorCode ConnectionOffer::ErrorCode_MAX;
const int ConnectionOffer::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostIdRequest::kTypeFieldNumber;
const int HostIdRequest::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostIdRequest::HostIdRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fpeer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HostIdRequest)
}
HostIdRequest::HostIdRequest(const HostIdRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:proto.HostIdRequest)
}

void HostIdRequest::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
  _cached_size_ = 0;
}

HostIdRequest::~HostIdRequest() {
  // @@protoc_insertion_point(destructor:proto.HostIdRequest)
  SharedDtor();
}

void HostIdRequest::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HostIdRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HostIdRequest& HostIdRequest::default_instance() {
  protobuf_router_5fpeer_2eproto::InitDefaults();
  return *internal_default_instance();
}

HostIdRequest* HostIdRequest::New(::google::protobuf::Arena* arena) const {
  HostIdRequest* n = new HostIdRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostIdRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HostIdRequest)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_ = 0;
}

bool HostIdRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HostIdRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.HostIdRequest.Type type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto::HostIdRequest_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HostIdRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HostIdRequest)
  return false;
#undef DO_
}

void HostIdRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HostIdRequest)
  // .proto.HostIdRequest.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.HostIdRequest)
}

size_t HostIdRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HostIdRequest)
  size_t total_size = 0;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // .proto.HostIdRequest.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostIdRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HostIdRequest*>(&from));
}

void HostIdRequest::MergeFrom(const HostIdRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HostIdRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void HostIdRequest::CopyFrom(const HostIdRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HostIdRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostIdRequest::IsInitialized() const {
  return true;
}

void HostIdRequest::Swap(HostIdRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostIdRequest::InternalSwap(HostIdRequest* other) {
  key_.Swap(&other->key_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HostIdRequest::GetTypeName() const {
  return "proto.HostIdRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostIdRequest

// .proto.HostIdRequest.Type type = 1;
void HostIdRequest::clear_type() {
  type_ = 0;
}
::proto::HostIdRequest_Type HostIdRequest::type() const {
  // @@protoc_insertion_point(field_get:proto.HostIdRequest.type)
  return static_cast< ::proto::HostIdRequest_Type >(type_);
}
void HostIdRequest::set_type(::proto::HostIdRequest_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.HostIdRequest.type)
}

// bytes key = 2;
void HostIdRequest::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HostIdRequest::key() const {
  // @@protoc_insertion_point(field_get:proto.HostIdRequest.key)
  return key_.GetNoArena();
}
void HostIdRequest::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.HostIdRequest.key)
}
#if LANG_CXX11
void HostIdRequest::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.HostIdRequest.key)
}
#endif
void HostIdRequest::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.HostIdRequest.key)
}
void HostIdRequest::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.HostIdRequest.key)
}
::std::string* HostIdRequest::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:proto.HostIdRequest.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HostIdRequest::release_key() {
  // @@protoc_insertion_point(field_release:proto.HostIdRequest.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HostIdRequest::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.HostIdRequest.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ResetHostId::kHostIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ResetHostId::ResetHostId()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fpeer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ResetHostId)
}
ResetHostId::ResetHostId(const ResetHostId& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_id_ = from.host_id_;
  // @@protoc_insertion_point(copy_constructor:proto.ResetHostId)
}

void ResetHostId::SharedCtor() {
  host_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ResetHostId::~ResetHostId() {
  // @@protoc_insertion_point(destructor:proto.ResetHostId)
  SharedDtor();
}

void ResetHostId::SharedDtor() {
}

void ResetHostId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ResetHostId& ResetHostId::default_instance() {
  protobuf_router_5fpeer_2eproto::InitDefaults();
  return *internal_default_instance();
}

ResetHostId* ResetHostId::New(::google::protobuf::Arena* arena) const {
  ResetHostId* n = new ResetHostId;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ResetHostId::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ResetHostId)
  host_id_ = GOOGLE_ULONGLONG(0);
}

bool ResetHostId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ResetHostId)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 host_id = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &host_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ResetHostId)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ResetHostId)
  return false;
#undef DO_
}

void ResetHostId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ResetHostId)
  // fixed64 host_id = 1;
  if (this->host_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->host_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.ResetHostId)
}

size_t ResetHostId::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ResetHostId)
  size_t total_size = 0;

  // fixed64 host_id = 1;
  if (this->host_id() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResetHostId::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ResetHostId*>(&from));
}

void ResetHostId::MergeFrom(const ResetHostId& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ResetHostId)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.host_id() != 0) {
    set_host_id(from.host_id());
  }
}

void ResetHostId::CopyFrom(const ResetHostId& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ResetHostId)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResetHostId::IsInitialized() const {
  return true;
}

void ResetHostId::Swap(ResetHostId* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ResetHostId::InternalSwap(ResetHostId* other) {
  std::swap(host_id_, other->host_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ResetHostId::GetTypeName() const {
  return "proto.ResetHostId";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ResetHostId

// fixed64 host_id = 1;
void ResetHostId::clear_host_id() {
  host_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ResetHostId::host_id() const {
  // @@protoc_insertion_point(field_get:proto.ResetHostId.host_id)
  return host_id_;
}
void ResetHostId::set_host_id(::google::protobuf::uint64 value) {
  
  host_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ResetHostId.host_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostIdResponse::kHostIdFieldNumber;
const int HostIdResponse::kKeyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostIdResponse::HostIdResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fpeer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HostIdResponse)
}
HostIdResponse::HostIdResponse(const HostIdResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.key().size() > 0) {
    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  host_id_ = from.host_id_;
  // @@protoc_insertion_point(copy_constructor:proto.HostIdResponse)
}

void HostIdResponse::SharedCtor() {
  key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

HostIdResponse::~HostIdResponse() {
  // @@protoc_insertion_point(destructor:proto.HostIdResponse)
  SharedDtor();
}

void HostIdResponse::SharedDtor() {
  key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void HostIdResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HostIdResponse& HostIdResponse::default_instance() {
  protobuf_router_5fpeer_2eproto::InitDefaults();
  return *internal_default_instance();
}

HostIdResponse* HostIdResponse::New(::google::protobuf::Arena* arena) const {
  HostIdResponse* n = new HostIdResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostIdResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HostIdResponse)
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  host_id_ = GOOGLE_ULONGLONG(0);
}

bool HostIdResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HostIdResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 host_id = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &host_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HostIdResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HostIdResponse)
  return false;
#undef DO_
}

void HostIdResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HostIdResponse)
  // fixed64 host_id = 1;
  if (this->host_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->host_id(), output);
  }

  // bytes key = 2;
  if (this->key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->key(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.HostIdResponse)
}

size_t HostIdResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HostIdResponse)
  size_t total_size = 0;

  // bytes key = 2;
  if (this->key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->key());
  }

  // fixed64 host_id = 1;
  if (this->host_id() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostIdResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HostIdResponse*>(&from));
}

void HostIdResponse::MergeFrom(const HostIdResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HostIdResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.key().size() > 0) {

    key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.key_);
  }
  if (from.host_id() != 0) {
    set_host_id(from.host_id());
  }
}

void HostIdResponse::CopyFrom(const HostIdResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HostIdResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostIdResponse::IsInitialized() const {
  return true;
}

void HostIdResponse::Swap(HostIdResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostIdResponse::InternalSwap(HostIdResponse* other) {
  key_.Swap(&other->key_);
  std::swap(host_id_, other->host_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HostIdResponse::GetTypeName() const {
  return "proto.HostIdResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostIdResponse

// fixed64 host_id = 1;
void HostIdResponse::clear_host_id() {
  host_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 HostIdResponse::host_id() const {
  // @@protoc_insertion_point(field_get:proto.HostIdResponse.host_id)
  return host_id_;
}
void HostIdResponse::set_host_id(::google::protobuf::uint64 value) {
  
  host_id_ = value;
  // @@protoc_insertion_point(field_set:proto.HostIdResponse.host_id)
}

// bytes key = 2;
void HostIdResponse::clear_key() {
  key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& HostIdResponse::key() const {
  // @@protoc_insertion_point(field_get:proto.HostIdResponse.key)
  return key_.GetNoArena();
}
void HostIdResponse::set_key(const ::std::string& value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.HostIdResponse.key)
}
#if LANG_CXX11
void HostIdResponse::set_key(::std::string&& value) {
  
  key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.HostIdResponse.key)
}
#endif
void HostIdResponse::set_key(const char* value) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.HostIdResponse.key)
}
void HostIdResponse::set_key(const void* value, size_t size) {
  
  key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.HostIdResponse.key)
}
::std::string* HostIdResponse::mutable_key() {
  
  // @@protoc_insertion_point(field_mutable:proto.HostIdResponse.key)
  return key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* HostIdResponse::release_key() {
  // @@protoc_insertion_point(field_release:proto.HostIdResponse.key)
  
  return key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void HostIdResponse::set_allocated_key(::std::string* key) {
  if (key != NULL) {
    
  } else {
    
  }
  key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), key);
  // @@protoc_insertion_point(field_set_allocated:proto.HostIdResponse.key)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectionRequest::kHostIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectionRequest::ConnectionRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fpeer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ConnectionRequest)
}
ConnectionRequest::ConnectionRequest(const ConnectionRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_id_ = from.host_id_;
  // @@protoc_insertion_point(copy_constructor:proto.ConnectionRequest)
}

void ConnectionRequest::SharedCtor() {
  host_id_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

ConnectionRequest::~ConnectionRequest() {
  // @@protoc_insertion_point(destructor:proto.ConnectionRequest)
  SharedDtor();
}

void ConnectionRequest::SharedDtor() {
}

void ConnectionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConnectionRequest& ConnectionRequest::default_instance() {
  protobuf_router_5fpeer_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConnectionRequest* ConnectionRequest::New(::google::protobuf::Arena* arena) const {
  ConnectionRequest* n = new ConnectionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ConnectionRequest)
  host_id_ = GOOGLE_ULONGLONG(0);
}

bool ConnectionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ConnectionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // fixed64 host_id = 1;
      case 1: {
        if (tag == 9u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &host_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ConnectionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ConnectionRequest)
  return false;
#undef DO_
}

void ConnectionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ConnectionRequest)
  // fixed64 host_id = 1;
  if (this->host_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(1, this->host_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.ConnectionRequest)
}

size_t ConnectionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ConnectionRequest)
  size_t total_size = 0;

  // fixed64 host_id = 1;
  if (this->host_id() != 0) {
    total_size += 1 + 8;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConnectionRequest*>(&from));
}

void ConnectionRequest::MergeFrom(const ConnectionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ConnectionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.host_id() != 0) {
    set_host_id(from.host_id());
  }
}

void ConnectionRequest::CopyFrom(const ConnectionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ConnectionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionRequest::IsInitialized() const {
  return true;
}

void ConnectionRequest::Swap(ConnectionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionRequest::InternalSwap(ConnectionRequest* other) {
  std::swap(host_id_, other->host_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ConnectionRequest::GetTypeName() const {
  return "proto.ConnectionRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectionRequest

// fixed64 host_id = 1;
void ConnectionRequest::clear_host_id() {
  host_id_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 ConnectionRequest::host_id() const {
  // @@protoc_insertion_point(field_get:proto.ConnectionRequest.host_id)
  return host_id_;
}
void ConnectionRequest::set_host_id(::google::protobuf::uint64 value) {
  
  host_id_ = value;
  // @@protoc_insertion_point(field_set:proto.ConnectionRequest.host_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ConnectionOffer::kPeerRoleFieldNumber;
const int ConnectionOffer::kErrorCodeFieldNumber;
const int ConnectionOffer::kRelayFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ConnectionOffer::ConnectionOffer()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fpeer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ConnectionOffer)
}
ConnectionOffer::ConnectionOffer(const ConnectionOffer& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_relay()) {
    relay_ = new ::proto::RelayCredentials(*from.relay_);
  } else {
    relay_ = NULL;
  }
  ::memcpy(&peer_role_, &from.peer_role_,
    reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&peer_role_) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:proto.ConnectionOffer)
}

void ConnectionOffer::SharedCtor() {
  ::memset(&relay_, 0, reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&relay_) + sizeof(error_code_));
  _cached_size_ = 0;
}

ConnectionOffer::~ConnectionOffer() {
  // @@protoc_insertion_point(destructor:proto.ConnectionOffer)
  SharedDtor();
}

void ConnectionOffer::SharedDtor() {
  if (this != internal_default_instance()) {
    delete relay_;
  }
}

void ConnectionOffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ConnectionOffer& ConnectionOffer::default_instance() {
  protobuf_router_5fpeer_2eproto::InitDefaults();
  return *internal_default_instance();
}

ConnectionOffer* ConnectionOffer::New(::google::protobuf::Arena* arena) const {
  ConnectionOffer* n = new ConnectionOffer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ConnectionOffer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ConnectionOffer)
  if (GetArenaNoVirtual() == NULL && relay_ != NULL) {
    delete relay_;
  }
  relay_ = NULL;
  ::memset(&peer_role_, 0, reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&peer_role_) + sizeof(error_code_));
}

bool ConnectionOffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ConnectionOffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ConnectionOffer.PeerRole peer_role = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_peer_role(static_cast< ::proto::ConnectionOffer_PeerRole >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ConnectionOffer.ErrorCode error_code = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::proto::ConnectionOffer_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.RelayCredentials relay = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_relay()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ConnectionOffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ConnectionOffer)
  return false;
#undef DO_
}

void ConnectionOffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ConnectionOffer)
  // .proto.ConnectionOffer.PeerRole peer_role = 1;
  if (this->peer_role() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->peer_role(), output);
  }

  // .proto.ConnectionOffer.ErrorCode error_code = 2;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }

  // .proto.RelayCredentials relay = 3;
  if (this->has_relay()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->relay_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.ConnectionOffer)
}

size_t ConnectionOffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ConnectionOffer)
  size_t total_size = 0;

  // .proto.RelayCredentials relay = 3;
  if (this->has_relay()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->relay_);
  }

  // .proto.ConnectionOffer.PeerRole peer_role = 1;
  if (this->peer_role() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->peer_role());
  }

  // .proto.ConnectionOffer.ErrorCode error_code = 2;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ConnectionOffer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ConnectionOffer*>(&from));
}

void ConnectionOffer::MergeFrom(const ConnectionOffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ConnectionOffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_relay()) {
    mutable_relay()->::proto::RelayCredentials::MergeFrom(from.relay());
  }
  if (from.peer_role() != 0) {
    set_peer_role(from.peer_role());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void ConnectionOffer::CopyFrom(const ConnectionOffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ConnectionOffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ConnectionOffer::IsInitialized() const {
  return true;
}

void ConnectionOffer::Swap(ConnectionOffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ConnectionOffer::InternalSwap(ConnectionOffer* other) {
  std::swap(relay_, other->relay_);
  std::swap(peer_role_, other->peer_role_);
  std::swap(error_code_, other->error_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ConnectionOffer::GetTypeName() const {
  return "proto.ConnectionOffer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ConnectionOffer

// .proto.ConnectionOffer.PeerRole peer_role = 1;
void ConnectionOffer::clear_peer_role() {
  peer_role_ = 0;
}
::proto::ConnectionOffer_PeerRole ConnectionOffer::peer_role() const {
  // @@protoc_insertion_point(field_get:proto.ConnectionOffer.peer_role)
  return static_cast< ::proto::ConnectionOffer_PeerRole >(peer_role_);
}
void ConnectionOffer::set_peer_role(::proto::ConnectionOffer_PeerRole value) {
  
  peer_role_ = value;
  // @@protoc_insertion_point(field_set:proto.ConnectionOffer.peer_role)
}

// .proto.ConnectionOffer.ErrorCode error_code = 2;
void ConnectionOffer::clear_error_code() {
  error_code_ = 0;
}
::proto::ConnectionOffer_ErrorCode ConnectionOffer::error_code() const {
  // @@protoc_insertion_point(field_get:proto.ConnectionOffer.error_code)
  return static_cast< ::proto::ConnectionOffer_ErrorCode >(error_code_);
}
void ConnectionOffer::set_error_code(::proto::ConnectionOffer_ErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:proto.ConnectionOffer.error_code)
}

// .proto.RelayCredentials relay = 3;
bool ConnectionOffer::has_relay() const {
  return this != internal_default_instance() && relay_ != NULL;
}
void ConnectionOffer::clear_relay() {
  if (GetArenaNoVirtual() == NULL && relay_ != NULL) delete relay_;
  relay_ = NULL;
}
const ::proto::RelayCredentials& ConnectionOffer::relay() const {
  // @@protoc_insertion_point(field_get:proto.ConnectionOffer.relay)
  return relay_ != NULL ? *relay_
                         : *::proto::RelayCredentials::internal_default_instance();
}
::proto::RelayCredentials* ConnectionOffer::mutable_relay() {
  
  if (relay_ == NULL) {
    relay_ = new ::proto::RelayCredentials;
  }
  // @@protoc_insertion_point(field_mutable:proto.ConnectionOffer.relay)
  return relay_;
}
::proto::RelayCredentials* ConnectionOffer::release_relay() {
  // @@protoc_insertion_point(field_release:proto.ConnectionOffer.relay)
  
  ::proto::RelayCredentials* temp = relay_;
  relay_ = NULL;
  return temp;
}
void ConnectionOffer::set_allocated_relay(::proto::RelayCredentials* relay) {
  delete relay_;
  relay_ = relay;
  if (relay) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ConnectionOffer.relay)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouterToPeer::kHostIdResponseFieldNumber;
const int RouterToPeer::kConnectionOfferFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouterToPeer::RouterToPeer()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fpeer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RouterToPeer)
}
RouterToPeer::RouterToPeer(const RouterToPeer& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_host_id_response()) {
    host_id_response_ = new ::proto::HostIdResponse(*from.host_id_response_);
  } else {
    host_id_response_ = NULL;
  }
  if (from.has_connection_offer()) {
    connection_offer_ = new ::proto::ConnectionOffer(*from.connection_offer_);
  } else {
    connection_offer_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.RouterToPeer)
}

void RouterToPeer::SharedCtor() {
  ::memset(&host_id_response_, 0, reinterpret_cast<char*>(&connection_offer_) -
    reinterpret_cast<char*>(&host_id_response_) + sizeof(connection_offer_));
  _cached_size_ = 0;
}

RouterToPeer::~RouterToPeer() {
  // @@protoc_insertion_point(destructor:proto.RouterToPeer)
  SharedDtor();
}

void RouterToPeer::SharedDtor() {
  if (this != internal_default_instance()) {
    delete host_id_response_;
  }
  if (this != internal_default_instance()) {
    delete connection_offer_;
  }
}

void RouterToPeer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RouterToPeer& RouterToPeer::default_instance() {
  protobuf_router_5fpeer_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouterToPeer* RouterToPeer::New(::google::protobuf::Arena* arena) const {
  RouterToPeer* n = new RouterToPeer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouterToPeer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RouterToPeer)
  if (GetArenaNoVirtual() == NULL && host_id_response_ != NULL) {
    delete host_id_response_;
  }
  host_id_response_ = NULL;
  if (GetArenaNoVirtual() == NULL && connection_offer_ != NULL) {
    delete connection_offer_;
  }
  connection_offer_ = NULL;
}

bool RouterToPeer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RouterToPeer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.HostIdResponse host_id_response = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host_id_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ConnectionOffer connection_offer = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connection_offer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RouterToPeer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RouterToPeer)
  return false;
#undef DO_
}

void RouterToPeer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RouterToPeer)
  // .proto.HostIdResponse host_id_response = 1;
  if (this->has_host_id_response()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->host_id_response_, output);
  }

  // .proto.ConnectionOffer connection_offer = 2;
  if (this->has_connection_offer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->connection_offer_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.RouterToPeer)
}

size_t RouterToPeer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RouterToPeer)
  size_t total_size = 0;

  // .proto.HostIdResponse host_id_response = 1;
  if (this->has_host_id_response()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->host_id_response_);
  }

  // .proto.ConnectionOffer connection_offer = 2;
  if (this->has_connection_offer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->connection_offer_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouterToPeer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RouterToPeer*>(&from));
}

void RouterToPeer::MergeFrom(const RouterToPeer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RouterToPeer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_host_id_response()) {
    mutable_host_id_response()->::proto::HostIdResponse::MergeFrom(from.host_id_response());
  }
  if (from.has_connection_offer()) {
    mutable_connection_offer()->::proto::ConnectionOffer::MergeFrom(from.connection_offer());
  }
}

void RouterToPeer::CopyFrom(const RouterToPeer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RouterToPeer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterToPeer::IsInitialized() const {
  return true;
}

void RouterToPeer::Swap(RouterToPeer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouterToPeer::InternalSwap(RouterToPeer* other) {
  std::swap(host_id_response_, other->host_id_response_);
  std::swap(connection_offer_, other->connection_offer_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RouterToPeer::GetTypeName() const {
  return "proto.RouterToPeer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouterToPeer

// .proto.HostIdResponse host_id_response = 1;
bool RouterToPeer::has_host_id_response() const {
  return this != internal_default_instance() && host_id_response_ != NULL;
}
void RouterToPeer::clear_host_id_response() {
  if (GetArenaNoVirtual() == NULL && host_id_response_ != NULL) delete host_id_response_;
  host_id_response_ = NULL;
}
const ::proto::HostIdResponse& RouterToPeer::host_id_response() const {
  // @@protoc_insertion_point(field_get:proto.RouterToPeer.host_id_response)
  return host_id_response_ != NULL ? *host_id_response_
                         : *::proto::HostIdResponse::internal_default_instance();
}
::proto::HostIdResponse* RouterToPeer::mutable_host_id_response() {
  
  if (host_id_response_ == NULL) {
    host_id_response_ = new ::proto::HostIdResponse;
  }
  // @@protoc_insertion_point(field_mutable:proto.RouterToPeer.host_id_response)
  return host_id_response_;
}
::proto::HostIdResponse* RouterToPeer::release_host_id_response() {
  // @@protoc_insertion_point(field_release:proto.RouterToPeer.host_id_response)
  
  ::proto::HostIdResponse* temp = host_id_response_;
  host_id_response_ = NULL;
  return temp;
}
void RouterToPeer::set_allocated_host_id_response(::proto::HostIdResponse* host_id_response) {
  delete host_id_response_;
  host_id_response_ = host_id_response;
  if (host_id_response) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RouterToPeer.host_id_response)
}

// .proto.ConnectionOffer connection_offer = 2;
bool RouterToPeer::has_connection_offer() const {
  return this != internal_default_instance() && connection_offer_ != NULL;
}
void RouterToPeer::clear_connection_offer() {
  if (GetArenaNoVirtual() == NULL && connection_offer_ != NULL) delete connection_offer_;
  connection_offer_ = NULL;
}
const ::proto::ConnectionOffer& RouterToPeer::connection_offer() const {
  // @@protoc_insertion_point(field_get:proto.RouterToPeer.connection_offer)
  return connection_offer_ != NULL ? *connection_offer_
                         : *::proto::ConnectionOffer::internal_default_instance();
}
::proto::ConnectionOffer* RouterToPeer::mutable_connection_offer() {
  
  if (connection_offer_ == NULL) {
    connection_offer_ = new ::proto::ConnectionOffer;
  }
  // @@protoc_insertion_point(field_mutable:proto.RouterToPeer.connection_offer)
  return connection_offer_;
}
::proto::ConnectionOffer* RouterToPeer::release_connection_offer() {
  // @@protoc_insertion_point(field_release:proto.RouterToPeer.connection_offer)
  
  ::proto::ConnectionOffer* temp = connection_offer_;
  connection_offer_ = NULL;
  return temp;
}
void RouterToPeer::set_allocated_connection_offer(::proto::ConnectionOffer* connection_offer) {
  delete connection_offer_;
  connection_offer_ = connection_offer;
  if (connection_offer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RouterToPeer.connection_offer)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerToRouter::kConnectionRequestFieldNumber;
const int PeerToRouter::kHostIdRequestFieldNumber;
const int PeerToRouter::kResetHostIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerToRouter::PeerToRouter()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fpeer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PeerToRouter)
}
PeerToRouter::PeerToRouter(const PeerToRouter& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_connection_request()) {
    connection_request_ = new ::proto::ConnectionRequest(*from.connection_request_);
  } else {
    connection_request_ = NULL;
  }
  if (from.has_host_id_request()) {
    host_id_request_ = new ::proto::HostIdRequest(*from.host_id_request_);
  } else {
    host_id_request_ = NULL;
  }
  if (from.has_reset_host_id()) {
    reset_host_id_ = new ::proto::ResetHostId(*from.reset_host_id_);
  } else {
    reset_host_id_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.PeerToRouter)
}

void PeerToRouter::SharedCtor() {
  ::memset(&connection_request_, 0, reinterpret_cast<char*>(&reset_host_id_) -
    reinterpret_cast<char*>(&connection_request_) + sizeof(reset_host_id_));
  _cached_size_ = 0;
}

PeerToRouter::~PeerToRouter() {
  // @@protoc_insertion_point(destructor:proto.PeerToRouter)
  SharedDtor();
}

void PeerToRouter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete connection_request_;
  }
  if (this != internal_default_instance()) {
    delete host_id_request_;
  }
  if (this != internal_default_instance()) {
    delete reset_host_id_;
  }
}

void PeerToRouter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PeerToRouter& PeerToRouter::default_instance() {
  protobuf_router_5fpeer_2eproto::InitDefaults();
  return *internal_default_instance();
}

PeerToRouter* PeerToRouter::New(::google::protobuf::Arena* arena) const {
  PeerToRouter* n = new PeerToRouter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PeerToRouter)
  if (GetArenaNoVirtual() == NULL && connection_request_ != NULL) {
    delete connection_request_;
  }
  connection_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && host_id_request_ != NULL) {
    delete host_id_request_;
  }
  host_id_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && reset_host_id_ != NULL) {
    delete reset_host_id_;
  }
  reset_host_id_ = NULL;
}

bool PeerToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PeerToRouter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ConnectionRequest connection_request = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_connection_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.HostIdRequest host_id_request = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_host_id_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ResetHostId reset_host_id = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_reset_host_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PeerToRouter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PeerToRouter)
  return false;
#undef DO_
}

void PeerToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PeerToRouter)
  // .proto.ConnectionRequest connection_request = 1;
  if (this->has_connection_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->connection_request_, output);
  }

  // .proto.HostIdRequest host_id_request = 2;
  if (this->has_host_id_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->host_id_request_, output);
  }

  // .proto.ResetHostId reset_host_id = 3;
  if (this->has_reset_host_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->reset_host_id_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.PeerToRouter)
}

size_t PeerToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PeerToRouter)
  size_t total_size = 0;

  // .proto.ConnectionRequest connection_request = 1;
  if (this->has_connection_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->connection_request_);
  }

  // .proto.HostIdRequest host_id_request = 2;
  if (this->has_host_id_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->host_id_request_);
  }

  // .proto.ResetHostId reset_host_id = 3;
  if (this->has_reset_host_id()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->reset_host_id_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerToRouter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PeerToRouter*>(&from));
}

void PeerToRouter::MergeFrom(const PeerToRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PeerToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_connection_request()) {
    mutable_connection_request()->::proto::ConnectionRequest::MergeFrom(from.connection_request());
  }
  if (from.has_host_id_request()) {
    mutable_host_id_request()->::proto::HostIdRequest::MergeFrom(from.host_id_request());
  }
  if (from.has_reset_host_id()) {
    mutable_reset_host_id()->::proto::ResetHostId::MergeFrom(from.reset_host_id());
  }
}

void PeerToRouter::CopyFrom(const PeerToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PeerToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerToRouter::IsInitialized() const {
  return true;
}

void PeerToRouter::Swap(PeerToRouter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerToRouter::InternalSwap(PeerToRouter* other) {
  std::swap(connection_request_, other->connection_request_);
  std::swap(host_id_request_, other->host_id_request_);
  std::swap(reset_host_id_, other->reset_host_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PeerToRouter::GetTypeName() const {
  return "proto.PeerToRouter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeerToRouter

// .proto.ConnectionRequest connection_request = 1;
bool PeerToRouter::has_connection_request() const {
  return this != internal_default_instance() && connection_request_ != NULL;
}
void PeerToRouter::clear_connection_request() {
  if (GetArenaNoVirtual() == NULL && connection_request_ != NULL) delete connection_request_;
  connection_request_ = NULL;
}
const ::proto::ConnectionRequest& PeerToRouter::connection_request() const {
  // @@protoc_insertion_point(field_get:proto.PeerToRouter.connection_request)
  return connection_request_ != NULL ? *connection_request_
                         : *::proto::ConnectionRequest::internal_default_instance();
}
::proto::ConnectionRequest* PeerToRouter::mutable_connection_request() {
  
  if (connection_request_ == NULL) {
    connection_request_ = new ::proto::ConnectionRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.PeerToRouter.connection_request)
  return connection_request_;
}
::proto::ConnectionRequest* PeerToRouter::release_connection_request() {
  // @@protoc_insertion_point(field_release:proto.PeerToRouter.connection_request)
  
  ::proto::ConnectionRequest* temp = connection_request_;
  connection_request_ = NULL;
  return temp;
}
void PeerToRouter::set_allocated_connection_request(::proto::ConnectionRequest* connection_request) {
  delete connection_request_;
  connection_request_ = connection_request;
  if (connection_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PeerToRouter.connection_request)
}

// .proto.HostIdRequest host_id_request = 2;
bool PeerToRouter::has_host_id_request() const {
  return this != internal_default_instance() && host_id_request_ != NULL;
}
void PeerToRouter::clear_host_id_request() {
  if (GetArenaNoVirtual() == NULL && host_id_request_ != NULL) delete host_id_request_;
  host_id_request_ = NULL;
}
const ::proto::HostIdRequest& PeerToRouter::host_id_request() const {
  // @@protoc_insertion_point(field_get:proto.PeerToRouter.host_id_request)
  return host_id_request_ != NULL ? *host_id_request_
                         : *::proto::HostIdRequest::internal_default_instance();
}
::proto::HostIdRequest* PeerToRouter::mutable_host_id_request() {
  
  if (host_id_request_ == NULL) {
    host_id_request_ = new ::proto::HostIdRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.PeerToRouter.host_id_request)
  return host_id_request_;
}
::proto::HostIdRequest* PeerToRouter::release_host_id_request() {
  // @@protoc_insertion_point(field_release:proto.PeerToRouter.host_id_request)
  
  ::proto::HostIdRequest* temp = host_id_request_;
  host_id_request_ = NULL;
  return temp;
}
void PeerToRouter::set_allocated_host_id_request(::proto::HostIdRequest* host_id_request) {
  delete host_id_request_;
  host_id_request_ = host_id_request;
  if (host_id_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PeerToRouter.host_id_request)
}

// .proto.ResetHostId reset_host_id = 3;
bool PeerToRouter::has_reset_host_id() const {
  return this != internal_default_instance() && reset_host_id_ != NULL;
}
void PeerToRouter::clear_reset_host_id() {
  if (GetArenaNoVirtual() == NULL && reset_host_id_ != NULL) delete reset_host_id_;
  reset_host_id_ = NULL;
}
const ::proto::ResetHostId& PeerToRouter::reset_host_id() const {
  // @@protoc_insertion_point(field_get:proto.PeerToRouter.reset_host_id)
  return reset_host_id_ != NULL ? *reset_host_id_
                         : *::proto::ResetHostId::internal_default_instance();
}
::proto::ResetHostId* PeerToRouter::mutable_reset_host_id() {
  
  if (reset_host_id_ == NULL) {
    reset_host_id_ = new ::proto::ResetHostId;
  }
  // @@protoc_insertion_point(field_mutable:proto.PeerToRouter.reset_host_id)
  return reset_host_id_;
}
::proto::ResetHostId* PeerToRouter::release_reset_host_id() {
  // @@protoc_insertion_point(field_release:proto.PeerToRouter.reset_host_id)
  
  ::proto::ResetHostId* temp = reset_host_id_;
  reset_host_id_ = NULL;
  return temp;
}
void PeerToRouter::set_allocated_reset_host_id(::proto::ResetHostId* reset_host_id) {
  delete reset_host_id_;
  reset_host_id_ = reset_host_id;
  if (reset_host_id) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.PeerToRouter.reset_host_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
