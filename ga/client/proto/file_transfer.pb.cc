// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: file_transfer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "file_transfer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace proto {
class DriveList_ItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriveList_Item> {
} _DriveList_Item_default_instance_;
class DriveListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriveList> {
} _DriveList_default_instance_;
class DriveListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DriveListRequest> {
} _DriveListRequest_default_instance_;
class FileList_ItemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileList_Item> {
} _FileList_Item_default_instance_;
class FileListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileList> {
} _FileList_default_instance_;
class FileListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileListRequest> {
} _FileListRequest_default_instance_;
class UploadRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UploadRequest> {
} _UploadRequest_default_instance_;
class DownloadRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DownloadRequest> {
} _DownloadRequest_default_instance_;
class FilePacketRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FilePacketRequest> {
} _FilePacketRequest_default_instance_;
class FilePacketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FilePacket> {
} _FilePacket_default_instance_;
class CreateDirectoryRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CreateDirectoryRequest> {
} _CreateDirectoryRequest_default_instance_;
class RenameRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RenameRequest> {
} _RenameRequest_default_instance_;
class RemoveRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RemoveRequest> {
} _RemoveRequest_default_instance_;
class FileReplyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileReply> {
} _FileReply_default_instance_;
class FileRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<FileRequest> {
} _FileRequest_default_instance_;

namespace protobuf_file_5ftransfer_2eproto {


void TableStruct::Shutdown() {
  _DriveList_Item_default_instance_.Shutdown();
  _DriveList_default_instance_.Shutdown();
  _DriveListRequest_default_instance_.Shutdown();
  _FileList_Item_default_instance_.Shutdown();
  _FileList_default_instance_.Shutdown();
  _FileListRequest_default_instance_.Shutdown();
  _UploadRequest_default_instance_.Shutdown();
  _DownloadRequest_default_instance_.Shutdown();
  _FilePacketRequest_default_instance_.Shutdown();
  _FilePacket_default_instance_.Shutdown();
  _CreateDirectoryRequest_default_instance_.Shutdown();
  _RenameRequest_default_instance_.Shutdown();
  _RemoveRequest_default_instance_.Shutdown();
  _FileReply_default_instance_.Shutdown();
  _FileRequest_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _DriveList_Item_default_instance_.DefaultConstruct();
  _DriveList_default_instance_.DefaultConstruct();
  _DriveListRequest_default_instance_.DefaultConstruct();
  _FileList_Item_default_instance_.DefaultConstruct();
  _FileList_default_instance_.DefaultConstruct();
  _FileListRequest_default_instance_.DefaultConstruct();
  _UploadRequest_default_instance_.DefaultConstruct();
  _DownloadRequest_default_instance_.DefaultConstruct();
  _FilePacketRequest_default_instance_.DefaultConstruct();
  _FilePacket_default_instance_.DefaultConstruct();
  _CreateDirectoryRequest_default_instance_.DefaultConstruct();
  _RenameRequest_default_instance_.DefaultConstruct();
  _RemoveRequest_default_instance_.DefaultConstruct();
  _FileReply_default_instance_.DefaultConstruct();
  _FileRequest_default_instance_.DefaultConstruct();
  _FileReply_default_instance_.get_mutable()->drive_list_ = const_cast< ::proto::DriveList*>(
      ::proto::DriveList::internal_default_instance());
  _FileReply_default_instance_.get_mutable()->file_list_ = const_cast< ::proto::FileList*>(
      ::proto::FileList::internal_default_instance());
  _FileReply_default_instance_.get_mutable()->packet_ = const_cast< ::proto::FilePacket*>(
      ::proto::FilePacket::internal_default_instance());
  _FileRequest_default_instance_.get_mutable()->drive_list_request_ = const_cast< ::proto::DriveListRequest*>(
      ::proto::DriveListRequest::internal_default_instance());
  _FileRequest_default_instance_.get_mutable()->file_list_request_ = const_cast< ::proto::FileListRequest*>(
      ::proto::FileListRequest::internal_default_instance());
  _FileRequest_default_instance_.get_mutable()->create_directory_request_ = const_cast< ::proto::CreateDirectoryRequest*>(
      ::proto::CreateDirectoryRequest::internal_default_instance());
  _FileRequest_default_instance_.get_mutable()->rename_request_ = const_cast< ::proto::RenameRequest*>(
      ::proto::RenameRequest::internal_default_instance());
  _FileRequest_default_instance_.get_mutable()->remove_request_ = const_cast< ::proto::RemoveRequest*>(
      ::proto::RemoveRequest::internal_default_instance());
  _FileRequest_default_instance_.get_mutable()->download_request_ = const_cast< ::proto::DownloadRequest*>(
      ::proto::DownloadRequest::internal_default_instance());
  _FileRequest_default_instance_.get_mutable()->upload_request_ = const_cast< ::proto::UploadRequest*>(
      ::proto::UploadRequest::internal_default_instance());
  _FileRequest_default_instance_.get_mutable()->packet_request_ = const_cast< ::proto::FilePacketRequest*>(
      ::proto::FilePacketRequest::internal_default_instance());
  _FileRequest_default_instance_.get_mutable()->packet_ = const_cast< ::proto::FilePacket*>(
      ::proto::FilePacket::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_file_5ftransfer_2eproto

bool DriveList_Item_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const DriveList_Item_Type DriveList_Item::TYPE_UNKNOWN;
const DriveList_Item_Type DriveList_Item::TYPE_CDROM;
const DriveList_Item_Type DriveList_Item::TYPE_REMOVABLE;
const DriveList_Item_Type DriveList_Item::TYPE_FIXED;
const DriveList_Item_Type DriveList_Item::TYPE_REMOTE;
const DriveList_Item_Type DriveList_Item::TYPE_RAM;
const DriveList_Item_Type DriveList_Item::TYPE_HOME_FOLDER;
const DriveList_Item_Type DriveList_Item::TYPE_DESKTOP_FOLDER;
const DriveList_Item_Type DriveList_Item::TYPE_ROOT_DIRECTORY;
const DriveList_Item_Type DriveList_Item::Type_MIN;
const DriveList_Item_Type DriveList_Item::Type_MAX;
const int DriveList_Item::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool FilePacketRequest_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FilePacketRequest_Flags FilePacketRequest::NO_FLAGS;
const FilePacketRequest_Flags FilePacketRequest::CANCEL;
const FilePacketRequest_Flags FilePacketRequest::Flags_MIN;
const FilePacketRequest_Flags FilePacketRequest::Flags_MAX;
const int FilePacketRequest::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool FilePacket_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const FilePacket_Flags FilePacket::NO_FLAGS;
const FilePacket_Flags FilePacket::FIRST_PACKET;
const FilePacket_Flags FilePacket::LAST_PACKET;
const FilePacket_Flags FilePacket::Flags_MIN;
const FilePacket_Flags FilePacket::Flags_MAX;
const int FilePacket::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool FileError_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 11:
    case 12:
    case 13:
    case 14:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveList_Item::kTypeFieldNumber;
const int DriveList_Item::kPathFieldNumber;
const int DriveList_Item::kNameFieldNumber;
const int DriveList_Item::kTotalSpaceFieldNumber;
const int DriveList_Item::kFreeSpaceFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveList_Item::DriveList_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DriveList.Item)
}
DriveList_Item::DriveList_Item(const DriveList_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&total_space_, &from.total_space_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&total_space_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto.DriveList.Item)
}

void DriveList_Item::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_space_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&total_space_) + sizeof(type_));
  _cached_size_ = 0;
}

DriveList_Item::~DriveList_Item() {
  // @@protoc_insertion_point(destructor:proto.DriveList.Item)
  SharedDtor();
}

void DriveList_Item::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DriveList_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DriveList_Item& DriveList_Item::default_instance() {
  protobuf_file_5ftransfer_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriveList_Item* DriveList_Item::New(::google::protobuf::Arena* arena) const {
  DriveList_Item* n = new DriveList_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriveList_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DriveList.Item)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_space_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&total_space_) + sizeof(type_));
}

bool DriveList_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DriveList.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.DriveList.Item.Type type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto::DriveList_Item_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string path = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.DriveList.Item.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.DriveList.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 total_space = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &total_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 free_space = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &free_space_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DriveList.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DriveList.Item)
  return false;
#undef DO_
}

void DriveList_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DriveList.Item)
  // .proto.DriveList.Item.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // string path = 2;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.DriveList.Item.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->path(), output);
  }

  // string name = 3;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.DriveList.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->name(), output);
  }

  // int64 total_space = 4;
  if (this->total_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->total_space(), output);
  }

  // int64 free_space = 5;
  if (this->free_space() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->free_space(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.DriveList.Item)
}

size_t DriveList_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DriveList.Item)
  size_t total_size = 0;

  // string path = 2;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string name = 3;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // int64 total_space = 4;
  if (this->total_space() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->total_space());
  }

  // int64 free_space = 5;
  if (this->free_space() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->free_space());
  }

  // .proto.DriveList.Item.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriveList_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveList_Item*>(&from));
}

void DriveList_Item::MergeFrom(const DriveList_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DriveList.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.total_space() != 0) {
    set_total_space(from.total_space());
  }
  if (from.free_space() != 0) {
    set_free_space(from.free_space());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void DriveList_Item::CopyFrom(const DriveList_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DriveList.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveList_Item::IsInitialized() const {
  return true;
}

void DriveList_Item::Swap(DriveList_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveList_Item::InternalSwap(DriveList_Item* other) {
  path_.Swap(&other->path_);
  name_.Swap(&other->name_);
  std::swap(total_space_, other->total_space_);
  std::swap(free_space_, other->free_space_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DriveList_Item::GetTypeName() const {
  return "proto.DriveList.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveList_Item

// .proto.DriveList.Item.Type type = 1;
void DriveList_Item::clear_type() {
  type_ = 0;
}
::proto::DriveList_Item_Type DriveList_Item::type() const {
  // @@protoc_insertion_point(field_get:proto.DriveList.Item.type)
  return static_cast< ::proto::DriveList_Item_Type >(type_);
}
void DriveList_Item::set_type(::proto::DriveList_Item_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.DriveList.Item.type)
}

// string path = 2;
void DriveList_Item::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriveList_Item::path() const {
  // @@protoc_insertion_point(field_get:proto.DriveList.Item.path)
  return path_.GetNoArena();
}
void DriveList_Item::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DriveList.Item.path)
}
#if LANG_CXX11
void DriveList_Item::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DriveList.Item.path)
}
#endif
void DriveList_Item::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DriveList.Item.path)
}
void DriveList_Item::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DriveList.Item.path)
}
::std::string* DriveList_Item::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.DriveList.Item.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriveList_Item::release_path() {
  // @@protoc_insertion_point(field_release:proto.DriveList.Item.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriveList_Item::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.DriveList.Item.path)
}

// string name = 3;
void DriveList_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DriveList_Item::name() const {
  // @@protoc_insertion_point(field_get:proto.DriveList.Item.name)
  return name_.GetNoArena();
}
void DriveList_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DriveList.Item.name)
}
#if LANG_CXX11
void DriveList_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DriveList.Item.name)
}
#endif
void DriveList_Item::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DriveList.Item.name)
}
void DriveList_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DriveList.Item.name)
}
::std::string* DriveList_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.DriveList.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DriveList_Item::release_name() {
  // @@protoc_insertion_point(field_release:proto.DriveList.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DriveList_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.DriveList.Item.name)
}

// int64 total_space = 4;
void DriveList_Item::clear_total_space() {
  total_space_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DriveList_Item::total_space() const {
  // @@protoc_insertion_point(field_get:proto.DriveList.Item.total_space)
  return total_space_;
}
void DriveList_Item::set_total_space(::google::protobuf::int64 value) {
  
  total_space_ = value;
  // @@protoc_insertion_point(field_set:proto.DriveList.Item.total_space)
}

// int64 free_space = 5;
void DriveList_Item::clear_free_space() {
  free_space_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 DriveList_Item::free_space() const {
  // @@protoc_insertion_point(field_get:proto.DriveList.Item.free_space)
  return free_space_;
}
void DriveList_Item::set_free_space(::google::protobuf::int64 value) {
  
  free_space_ = value;
  // @@protoc_insertion_point(field_set:proto.DriveList.Item.free_space)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveList::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveList::DriveList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DriveList)
}
DriveList::DriveList(const DriveList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.DriveList)
}

void DriveList::SharedCtor() {
  _cached_size_ = 0;
}

DriveList::~DriveList() {
  // @@protoc_insertion_point(destructor:proto.DriveList)
  SharedDtor();
}

void DriveList::SharedDtor() {
}

void DriveList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DriveList& DriveList::default_instance() {
  protobuf_file_5ftransfer_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriveList* DriveList::New(::google::protobuf::Arena* arena) const {
  DriveList* n = new DriveList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriveList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DriveList)
  item_.Clear();
}

bool DriveList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DriveList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.DriveList.Item item = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DriveList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DriveList)
  return false;
#undef DO_
}

void DriveList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DriveList)
  // repeated .proto.DriveList.Item item = 1;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.DriveList)
}

size_t DriveList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DriveList)
  size_t total_size = 0;

  // repeated .proto.DriveList.Item item = 1;
  {
    unsigned int count = this->item_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriveList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveList*>(&from));
}

void DriveList::MergeFrom(const DriveList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DriveList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_.MergeFrom(from.item_);
}

void DriveList::CopyFrom(const DriveList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DriveList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveList::IsInitialized() const {
  return true;
}

void DriveList::Swap(DriveList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveList::InternalSwap(DriveList* other) {
  item_.UnsafeArenaSwap(&other->item_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DriveList::GetTypeName() const {
  return "proto.DriveList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveList

// repeated .proto.DriveList.Item item = 1;
int DriveList::item_size() const {
  return item_.size();
}
void DriveList::clear_item() {
  item_.Clear();
}
const ::proto::DriveList_Item& DriveList::item(int index) const {
  // @@protoc_insertion_point(field_get:proto.DriveList.item)
  return item_.Get(index);
}
::proto::DriveList_Item* DriveList::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:proto.DriveList.item)
  return item_.Mutable(index);
}
::proto::DriveList_Item* DriveList::add_item() {
  // @@protoc_insertion_point(field_add:proto.DriveList.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::DriveList_Item >*
DriveList::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:proto.DriveList.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::DriveList_Item >&
DriveList::item() const {
  // @@protoc_insertion_point(field_list:proto.DriveList.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DriveListRequest::kDummyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DriveListRequest::DriveListRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DriveListRequest)
}
DriveListRequest::DriveListRequest(const DriveListRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:proto.DriveListRequest)
}

void DriveListRequest::SharedCtor() {
  dummy_ = 0u;
  _cached_size_ = 0;
}

DriveListRequest::~DriveListRequest() {
  // @@protoc_insertion_point(destructor:proto.DriveListRequest)
  SharedDtor();
}

void DriveListRequest::SharedDtor() {
}

void DriveListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DriveListRequest& DriveListRequest::default_instance() {
  protobuf_file_5ftransfer_2eproto::InitDefaults();
  return *internal_default_instance();
}

DriveListRequest* DriveListRequest::New(::google::protobuf::Arena* arena) const {
  DriveListRequest* n = new DriveListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DriveListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DriveListRequest)
  dummy_ = 0u;
}

bool DriveListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DriveListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dummy = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DriveListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DriveListRequest)
  return false;
#undef DO_
}

void DriveListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DriveListRequest)
  // uint32 dummy = 1;
  if (this->dummy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.DriveListRequest)
}

size_t DriveListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DriveListRequest)
  size_t total_size = 0;

  // uint32 dummy = 1;
  if (this->dummy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dummy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DriveListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DriveListRequest*>(&from));
}

void DriveListRequest::MergeFrom(const DriveListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DriveListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.dummy() != 0) {
    set_dummy(from.dummy());
  }
}

void DriveListRequest::CopyFrom(const DriveListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DriveListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DriveListRequest::IsInitialized() const {
  return true;
}

void DriveListRequest::Swap(DriveListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DriveListRequest::InternalSwap(DriveListRequest* other) {
  std::swap(dummy_, other->dummy_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DriveListRequest::GetTypeName() const {
  return "proto.DriveListRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DriveListRequest

// uint32 dummy = 1;
void DriveListRequest::clear_dummy() {
  dummy_ = 0u;
}
::google::protobuf::uint32 DriveListRequest::dummy() const {
  // @@protoc_insertion_point(field_get:proto.DriveListRequest.dummy)
  return dummy_;
}
void DriveListRequest::set_dummy(::google::protobuf::uint32 value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:proto.DriveListRequest.dummy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileList_Item::kNameFieldNumber;
const int FileList_Item::kSizeFieldNumber;
const int FileList_Item::kModificationTimeFieldNumber;
const int FileList_Item::kIsDirectoryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileList_Item::FileList_Item()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FileList.Item)
}
FileList_Item::FileList_Item(const FileList_Item& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&is_directory_) -
    reinterpret_cast<char*>(&size_) + sizeof(is_directory_));
  // @@protoc_insertion_point(copy_constructor:proto.FileList.Item)
}

void FileList_Item::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, reinterpret_cast<char*>(&is_directory_) -
    reinterpret_cast<char*>(&size_) + sizeof(is_directory_));
  _cached_size_ = 0;
}

FileList_Item::~FileList_Item() {
  // @@protoc_insertion_point(destructor:proto.FileList.Item)
  SharedDtor();
}

void FileList_Item::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileList_Item::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileList_Item& FileList_Item::default_instance() {
  protobuf_file_5ftransfer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileList_Item* FileList_Item::New(::google::protobuf::Arena* arena) const {
  FileList_Item* n = new FileList_Item;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileList_Item::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FileList.Item)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, reinterpret_cast<char*>(&is_directory_) -
    reinterpret_cast<char*>(&size_) + sizeof(is_directory_));
}

bool FileList_Item::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FileList.Item)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.FileList.Item.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 modification_time = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &modification_time_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool is_directory = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_directory_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FileList.Item)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FileList.Item)
  return false;
#undef DO_
}

void FileList_Item::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FileList.Item)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.FileList.Item.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->size(), output);
  }

  // int64 modification_time = 3;
  if (this->modification_time() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->modification_time(), output);
  }

  // bool is_directory = 4;
  if (this->is_directory() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->is_directory(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.FileList.Item)
}

size_t FileList_Item::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FileList.Item)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // uint64 size = 2;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // int64 modification_time = 3;
  if (this->modification_time() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->modification_time());
  }

  // bool is_directory = 4;
  if (this->is_directory() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileList_Item::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileList_Item*>(&from));
}

void FileList_Item::MergeFrom(const FileList_Item& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FileList.Item)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.modification_time() != 0) {
    set_modification_time(from.modification_time());
  }
  if (from.is_directory() != 0) {
    set_is_directory(from.is_directory());
  }
}

void FileList_Item::CopyFrom(const FileList_Item& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FileList.Item)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileList_Item::IsInitialized() const {
  return true;
}

void FileList_Item::Swap(FileList_Item* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileList_Item::InternalSwap(FileList_Item* other) {
  name_.Swap(&other->name_);
  std::swap(size_, other->size_);
  std::swap(modification_time_, other->modification_time_);
  std::swap(is_directory_, other->is_directory_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileList_Item::GetTypeName() const {
  return "proto.FileList.Item";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileList_Item

// string name = 1;
void FileList_Item::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileList_Item::name() const {
  // @@protoc_insertion_point(field_get:proto.FileList.Item.name)
  return name_.GetNoArena();
}
void FileList_Item::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FileList.Item.name)
}
#if LANG_CXX11
void FileList_Item::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FileList.Item.name)
}
#endif
void FileList_Item::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FileList.Item.name)
}
void FileList_Item::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FileList.Item.name)
}
::std::string* FileList_Item::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.FileList.Item.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileList_Item::release_name() {
  // @@protoc_insertion_point(field_release:proto.FileList.Item.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileList_Item::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.FileList.Item.name)
}

// uint64 size = 2;
void FileList_Item::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 FileList_Item::size() const {
  // @@protoc_insertion_point(field_get:proto.FileList.Item.size)
  return size_;
}
void FileList_Item::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:proto.FileList.Item.size)
}

// int64 modification_time = 3;
void FileList_Item::clear_modification_time() {
  modification_time_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 FileList_Item::modification_time() const {
  // @@protoc_insertion_point(field_get:proto.FileList.Item.modification_time)
  return modification_time_;
}
void FileList_Item::set_modification_time(::google::protobuf::int64 value) {
  
  modification_time_ = value;
  // @@protoc_insertion_point(field_set:proto.FileList.Item.modification_time)
}

// bool is_directory = 4;
void FileList_Item::clear_is_directory() {
  is_directory_ = false;
}
bool FileList_Item::is_directory() const {
  // @@protoc_insertion_point(field_get:proto.FileList.Item.is_directory)
  return is_directory_;
}
void FileList_Item::set_is_directory(bool value) {
  
  is_directory_ = value;
  // @@protoc_insertion_point(field_set:proto.FileList.Item.is_directory)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileList::kItemFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileList::FileList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FileList)
}
FileList::FileList(const FileList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      item_(from.item_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.FileList)
}

void FileList::SharedCtor() {
  _cached_size_ = 0;
}

FileList::~FileList() {
  // @@protoc_insertion_point(destructor:proto.FileList)
  SharedDtor();
}

void FileList::SharedDtor() {
}

void FileList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileList& FileList::default_instance() {
  protobuf_file_5ftransfer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileList* FileList::New(::google::protobuf::Arena* arena) const {
  FileList* n = new FileList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FileList)
  item_.Clear();
}

bool FileList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FileList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.FileList.Item item = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_item()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FileList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FileList)
  return false;
#undef DO_
}

void FileList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FileList)
  // repeated .proto.FileList.Item item = 1;
  for (unsigned int i = 0, n = this->item_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->item(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.FileList)
}

size_t FileList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FileList)
  size_t total_size = 0;

  // repeated .proto.FileList.Item item = 1;
  {
    unsigned int count = this->item_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->item(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileList*>(&from));
}

void FileList::MergeFrom(const FileList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FileList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  item_.MergeFrom(from.item_);
}

void FileList::CopyFrom(const FileList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FileList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileList::IsInitialized() const {
  return true;
}

void FileList::Swap(FileList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileList::InternalSwap(FileList* other) {
  item_.UnsafeArenaSwap(&other->item_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileList::GetTypeName() const {
  return "proto.FileList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileList

// repeated .proto.FileList.Item item = 1;
int FileList::item_size() const {
  return item_.size();
}
void FileList::clear_item() {
  item_.Clear();
}
const ::proto::FileList_Item& FileList::item(int index) const {
  // @@protoc_insertion_point(field_get:proto.FileList.item)
  return item_.Get(index);
}
::proto::FileList_Item* FileList::mutable_item(int index) {
  // @@protoc_insertion_point(field_mutable:proto.FileList.item)
  return item_.Mutable(index);
}
::proto::FileList_Item* FileList::add_item() {
  // @@protoc_insertion_point(field_add:proto.FileList.item)
  return item_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::FileList_Item >*
FileList::mutable_item() {
  // @@protoc_insertion_point(field_mutable_list:proto.FileList.item)
  return &item_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::FileList_Item >&
FileList::item() const {
  // @@protoc_insertion_point(field_list:proto.FileList.item)
  return item_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileListRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileListRequest::FileListRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FileListRequest)
}
FileListRequest::FileListRequest(const FileListRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.FileListRequest)
}

void FileListRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

FileListRequest::~FileListRequest() {
  // @@protoc_insertion_point(destructor:proto.FileListRequest)
  SharedDtor();
}

void FileListRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FileListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileListRequest& FileListRequest::default_instance() {
  protobuf_file_5ftransfer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileListRequest* FileListRequest::New(::google::protobuf::Arena* arena) const {
  FileListRequest* n = new FileListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FileListRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool FileListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FileListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.FileListRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FileListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FileListRequest)
  return false;
#undef DO_
}

void FileListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FileListRequest)
  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.FileListRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.FileListRequest)
}

size_t FileListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FileListRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileListRequest*>(&from));
}

void FileListRequest::MergeFrom(const FileListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FileListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void FileListRequest::CopyFrom(const FileListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FileListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileListRequest::IsInitialized() const {
  return true;
}

void FileListRequest::Swap(FileListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileListRequest::InternalSwap(FileListRequest* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileListRequest::GetTypeName() const {
  return "proto.FileListRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileListRequest

// string path = 1;
void FileListRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FileListRequest::path() const {
  // @@protoc_insertion_point(field_get:proto.FileListRequest.path)
  return path_.GetNoArena();
}
void FileListRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FileListRequest.path)
}
#if LANG_CXX11
void FileListRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FileListRequest.path)
}
#endif
void FileListRequest::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FileListRequest.path)
}
void FileListRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FileListRequest.path)
}
::std::string* FileListRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.FileListRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FileListRequest::release_path() {
  // @@protoc_insertion_point(field_release:proto.FileListRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FileListRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.FileListRequest.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UploadRequest::kPathFieldNumber;
const int UploadRequest::kOverwriteFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UploadRequest::UploadRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UploadRequest)
}
UploadRequest::UploadRequest(const UploadRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  overwrite_ = from.overwrite_;
  // @@protoc_insertion_point(copy_constructor:proto.UploadRequest)
}

void UploadRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overwrite_ = false;
  _cached_size_ = 0;
}

UploadRequest::~UploadRequest() {
  // @@protoc_insertion_point(destructor:proto.UploadRequest)
  SharedDtor();
}

void UploadRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void UploadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UploadRequest& UploadRequest::default_instance() {
  protobuf_file_5ftransfer_2eproto::InitDefaults();
  return *internal_default_instance();
}

UploadRequest* UploadRequest::New(::google::protobuf::Arena* arena) const {
  UploadRequest* n = new UploadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UploadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UploadRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  overwrite_ = false;
}

bool UploadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UploadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.UploadRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool overwrite = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &overwrite_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UploadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UploadRequest)
  return false;
#undef DO_
}

void UploadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UploadRequest)
  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.UploadRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // bool overwrite = 2;
  if (this->overwrite() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->overwrite(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.UploadRequest)
}

size_t UploadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UploadRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // bool overwrite = 2;
  if (this->overwrite() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UploadRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UploadRequest*>(&from));
}

void UploadRequest::MergeFrom(const UploadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UploadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.overwrite() != 0) {
    set_overwrite(from.overwrite());
  }
}

void UploadRequest::CopyFrom(const UploadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UploadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UploadRequest::IsInitialized() const {
  return true;
}

void UploadRequest::Swap(UploadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UploadRequest::InternalSwap(UploadRequest* other) {
  path_.Swap(&other->path_);
  std::swap(overwrite_, other->overwrite_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UploadRequest::GetTypeName() const {
  return "proto.UploadRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UploadRequest

// string path = 1;
void UploadRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& UploadRequest::path() const {
  // @@protoc_insertion_point(field_get:proto.UploadRequest.path)
  return path_.GetNoArena();
}
void UploadRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.UploadRequest.path)
}
#if LANG_CXX11
void UploadRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.UploadRequest.path)
}
#endif
void UploadRequest::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.UploadRequest.path)
}
void UploadRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.UploadRequest.path)
}
::std::string* UploadRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.UploadRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* UploadRequest::release_path() {
  // @@protoc_insertion_point(field_release:proto.UploadRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void UploadRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.UploadRequest.path)
}

// bool overwrite = 2;
void UploadRequest::clear_overwrite() {
  overwrite_ = false;
}
bool UploadRequest::overwrite() const {
  // @@protoc_insertion_point(field_get:proto.UploadRequest.overwrite)
  return overwrite_;
}
void UploadRequest::set_overwrite(bool value) {
  
  overwrite_ = value;
  // @@protoc_insertion_point(field_set:proto.UploadRequest.overwrite)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DownloadRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DownloadRequest::DownloadRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DownloadRequest)
}
DownloadRequest::DownloadRequest(const DownloadRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.DownloadRequest)
}

void DownloadRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DownloadRequest::~DownloadRequest() {
  // @@protoc_insertion_point(destructor:proto.DownloadRequest)
  SharedDtor();
}

void DownloadRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DownloadRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DownloadRequest& DownloadRequest::default_instance() {
  protobuf_file_5ftransfer_2eproto::InitDefaults();
  return *internal_default_instance();
}

DownloadRequest* DownloadRequest::New(::google::protobuf::Arena* arena) const {
  DownloadRequest* n = new DownloadRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DownloadRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DownloadRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DownloadRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DownloadRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.DownloadRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DownloadRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DownloadRequest)
  return false;
#undef DO_
}

void DownloadRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DownloadRequest)
  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.DownloadRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.DownloadRequest)
}

size_t DownloadRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DownloadRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DownloadRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DownloadRequest*>(&from));
}

void DownloadRequest::MergeFrom(const DownloadRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DownloadRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void DownloadRequest::CopyFrom(const DownloadRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DownloadRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DownloadRequest::IsInitialized() const {
  return true;
}

void DownloadRequest::Swap(DownloadRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DownloadRequest::InternalSwap(DownloadRequest* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DownloadRequest::GetTypeName() const {
  return "proto.DownloadRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DownloadRequest

// string path = 1;
void DownloadRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DownloadRequest::path() const {
  // @@protoc_insertion_point(field_get:proto.DownloadRequest.path)
  return path_.GetNoArena();
}
void DownloadRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DownloadRequest.path)
}
#if LANG_CXX11
void DownloadRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DownloadRequest.path)
}
#endif
void DownloadRequest::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DownloadRequest.path)
}
void DownloadRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DownloadRequest.path)
}
::std::string* DownloadRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.DownloadRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DownloadRequest::release_path() {
  // @@protoc_insertion_point(field_release:proto.DownloadRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DownloadRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.DownloadRequest.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilePacketRequest::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilePacketRequest::FilePacketRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FilePacketRequest)
}
FilePacketRequest::FilePacketRequest(const FilePacketRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  flags_ = from.flags_;
  // @@protoc_insertion_point(copy_constructor:proto.FilePacketRequest)
}

void FilePacketRequest::SharedCtor() {
  flags_ = 0u;
  _cached_size_ = 0;
}

FilePacketRequest::~FilePacketRequest() {
  // @@protoc_insertion_point(destructor:proto.FilePacketRequest)
  SharedDtor();
}

void FilePacketRequest::SharedDtor() {
}

void FilePacketRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FilePacketRequest& FilePacketRequest::default_instance() {
  protobuf_file_5ftransfer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FilePacketRequest* FilePacketRequest::New(::google::protobuf::Arena* arena) const {
  FilePacketRequest* n = new FilePacketRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilePacketRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FilePacketRequest)
  flags_ = 0u;
}

bool FilePacketRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FilePacketRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flags = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FilePacketRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FilePacketRequest)
  return false;
#undef DO_
}

void FilePacketRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FilePacketRequest)
  // uint32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.FilePacketRequest)
}

size_t FilePacketRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FilePacketRequest)
  size_t total_size = 0;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilePacketRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FilePacketRequest*>(&from));
}

void FilePacketRequest::MergeFrom(const FilePacketRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FilePacketRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void FilePacketRequest::CopyFrom(const FilePacketRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FilePacketRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilePacketRequest::IsInitialized() const {
  return true;
}

void FilePacketRequest::Swap(FilePacketRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilePacketRequest::InternalSwap(FilePacketRequest* other) {
  std::swap(flags_, other->flags_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FilePacketRequest::GetTypeName() const {
  return "proto.FilePacketRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilePacketRequest

// uint32 flags = 1;
void FilePacketRequest::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 FilePacketRequest::flags() const {
  // @@protoc_insertion_point(field_get:proto.FilePacketRequest.flags)
  return flags_;
}
void FilePacketRequest::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.FilePacketRequest.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FilePacket::kFlagsFieldNumber;
const int FilePacket::kFileSizeFieldNumber;
const int FilePacket::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FilePacket::FilePacket()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FilePacket)
}
FilePacket::FilePacket(const FilePacket& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&file_size_, &from.file_size_,
    reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&file_size_) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:proto.FilePacket)
}

void FilePacket::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&file_size_) + sizeof(flags_));
  _cached_size_ = 0;
}

FilePacket::~FilePacket() {
  // @@protoc_insertion_point(destructor:proto.FilePacket)
  SharedDtor();
}

void FilePacket::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void FilePacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FilePacket& FilePacket::default_instance() {
  protobuf_file_5ftransfer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FilePacket* FilePacket::New(::google::protobuf::Arena* arena) const {
  FilePacket* n = new FilePacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FilePacket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FilePacket)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&file_size_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&file_size_) + sizeof(flags_));
}

bool FilePacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FilePacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flags = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 file_size = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &file_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FilePacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FilePacket)
  return false;
#undef DO_
}

void FilePacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FilePacket)
  // uint32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  // uint64 file_size = 2;
  if (this->file_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->file_size(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.FilePacket)
}

size_t FilePacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FilePacket)
  size_t total_size = 0;

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint64 file_size = 2;
  if (this->file_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->file_size());
  }

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FilePacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FilePacket*>(&from));
}

void FilePacket::MergeFrom(const FilePacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FilePacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.file_size() != 0) {
    set_file_size(from.file_size());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void FilePacket::CopyFrom(const FilePacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FilePacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FilePacket::IsInitialized() const {
  return true;
}

void FilePacket::Swap(FilePacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FilePacket::InternalSwap(FilePacket* other) {
  data_.Swap(&other->data_);
  std::swap(file_size_, other->file_size_);
  std::swap(flags_, other->flags_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FilePacket::GetTypeName() const {
  return "proto.FilePacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FilePacket

// uint32 flags = 1;
void FilePacket::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 FilePacket::flags() const {
  // @@protoc_insertion_point(field_get:proto.FilePacket.flags)
  return flags_;
}
void FilePacket::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.FilePacket.flags)
}

// uint64 file_size = 2;
void FilePacket::clear_file_size() {
  file_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 FilePacket::file_size() const {
  // @@protoc_insertion_point(field_get:proto.FilePacket.file_size)
  return file_size_;
}
void FilePacket::set_file_size(::google::protobuf::uint64 value) {
  
  file_size_ = value;
  // @@protoc_insertion_point(field_set:proto.FilePacket.file_size)
}

// bytes data = 3;
void FilePacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& FilePacket::data() const {
  // @@protoc_insertion_point(field_get:proto.FilePacket.data)
  return data_.GetNoArena();
}
void FilePacket::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.FilePacket.data)
}
#if LANG_CXX11
void FilePacket::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.FilePacket.data)
}
#endif
void FilePacket::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.FilePacket.data)
}
void FilePacket::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.FilePacket.data)
}
::std::string* FilePacket::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.FilePacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* FilePacket::release_data() {
  // @@protoc_insertion_point(field_release:proto.FilePacket.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void FilePacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.FilePacket.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CreateDirectoryRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CreateDirectoryRequest::CreateDirectoryRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CreateDirectoryRequest)
}
CreateDirectoryRequest::CreateDirectoryRequest(const CreateDirectoryRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.CreateDirectoryRequest)
}

void CreateDirectoryRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

CreateDirectoryRequest::~CreateDirectoryRequest() {
  // @@protoc_insertion_point(destructor:proto.CreateDirectoryRequest)
  SharedDtor();
}

void CreateDirectoryRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CreateDirectoryRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CreateDirectoryRequest& CreateDirectoryRequest::default_instance() {
  protobuf_file_5ftransfer_2eproto::InitDefaults();
  return *internal_default_instance();
}

CreateDirectoryRequest* CreateDirectoryRequest::New(::google::protobuf::Arena* arena) const {
  CreateDirectoryRequest* n = new CreateDirectoryRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CreateDirectoryRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CreateDirectoryRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool CreateDirectoryRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CreateDirectoryRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.CreateDirectoryRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CreateDirectoryRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CreateDirectoryRequest)
  return false;
#undef DO_
}

void CreateDirectoryRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CreateDirectoryRequest)
  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.CreateDirectoryRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.CreateDirectoryRequest)
}

size_t CreateDirectoryRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CreateDirectoryRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CreateDirectoryRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CreateDirectoryRequest*>(&from));
}

void CreateDirectoryRequest::MergeFrom(const CreateDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CreateDirectoryRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void CreateDirectoryRequest::CopyFrom(const CreateDirectoryRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CreateDirectoryRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CreateDirectoryRequest::IsInitialized() const {
  return true;
}

void CreateDirectoryRequest::Swap(CreateDirectoryRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CreateDirectoryRequest::InternalSwap(CreateDirectoryRequest* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CreateDirectoryRequest::GetTypeName() const {
  return "proto.CreateDirectoryRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CreateDirectoryRequest

// string path = 1;
void CreateDirectoryRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CreateDirectoryRequest::path() const {
  // @@protoc_insertion_point(field_get:proto.CreateDirectoryRequest.path)
  return path_.GetNoArena();
}
void CreateDirectoryRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CreateDirectoryRequest.path)
}
#if LANG_CXX11
void CreateDirectoryRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.CreateDirectoryRequest.path)
}
#endif
void CreateDirectoryRequest::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CreateDirectoryRequest.path)
}
void CreateDirectoryRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CreateDirectoryRequest.path)
}
::std::string* CreateDirectoryRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.CreateDirectoryRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CreateDirectoryRequest::release_path() {
  // @@protoc_insertion_point(field_release:proto.CreateDirectoryRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CreateDirectoryRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.CreateDirectoryRequest.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RenameRequest::kOldNameFieldNumber;
const int RenameRequest::kNewNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RenameRequest::RenameRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RenameRequest)
}
RenameRequest::RenameRequest(const RenameRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  old_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.old_name().size() > 0) {
    old_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_name_);
  }
  new_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.new_name().size() > 0) {
    new_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_name_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.RenameRequest)
}

void RenameRequest::SharedCtor() {
  old_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RenameRequest::~RenameRequest() {
  // @@protoc_insertion_point(destructor:proto.RenameRequest)
  SharedDtor();
}

void RenameRequest::SharedDtor() {
  old_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RenameRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RenameRequest& RenameRequest::default_instance() {
  protobuf_file_5ftransfer_2eproto::InitDefaults();
  return *internal_default_instance();
}

RenameRequest* RenameRequest::New(::google::protobuf::Arena* arena) const {
  RenameRequest* n = new RenameRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RenameRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RenameRequest)
  old_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  new_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RenameRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RenameRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string old_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_old_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->old_name().data(), this->old_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RenameRequest.old_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string new_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_new_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->new_name().data(), this->new_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RenameRequest.new_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RenameRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RenameRequest)
  return false;
#undef DO_
}

void RenameRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RenameRequest)
  // string old_name = 1;
  if (this->old_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->old_name().data(), this->old_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RenameRequest.old_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->old_name(), output);
  }

  // string new_name = 2;
  if (this->new_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->new_name().data(), this->new_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RenameRequest.new_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->new_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.RenameRequest)
}

size_t RenameRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RenameRequest)
  size_t total_size = 0;

  // string old_name = 1;
  if (this->old_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->old_name());
  }

  // string new_name = 2;
  if (this->new_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->new_name());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RenameRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RenameRequest*>(&from));
}

void RenameRequest::MergeFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RenameRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.old_name().size() > 0) {

    old_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.old_name_);
  }
  if (from.new_name().size() > 0) {

    new_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.new_name_);
  }
}

void RenameRequest::CopyFrom(const RenameRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RenameRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RenameRequest::IsInitialized() const {
  return true;
}

void RenameRequest::Swap(RenameRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RenameRequest::InternalSwap(RenameRequest* other) {
  old_name_.Swap(&other->old_name_);
  new_name_.Swap(&other->new_name_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RenameRequest::GetTypeName() const {
  return "proto.RenameRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RenameRequest

// string old_name = 1;
void RenameRequest::clear_old_name() {
  old_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RenameRequest::old_name() const {
  // @@protoc_insertion_point(field_get:proto.RenameRequest.old_name)
  return old_name_.GetNoArena();
}
void RenameRequest::set_old_name(const ::std::string& value) {
  
  old_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RenameRequest.old_name)
}
#if LANG_CXX11
void RenameRequest::set_old_name(::std::string&& value) {
  
  old_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RenameRequest.old_name)
}
#endif
void RenameRequest::set_old_name(const char* value) {
  
  old_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RenameRequest.old_name)
}
void RenameRequest::set_old_name(const char* value, size_t size) {
  
  old_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RenameRequest.old_name)
}
::std::string* RenameRequest::mutable_old_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.RenameRequest.old_name)
  return old_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RenameRequest::release_old_name() {
  // @@protoc_insertion_point(field_release:proto.RenameRequest.old_name)
  
  return old_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RenameRequest::set_allocated_old_name(::std::string* old_name) {
  if (old_name != NULL) {
    
  } else {
    
  }
  old_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), old_name);
  // @@protoc_insertion_point(field_set_allocated:proto.RenameRequest.old_name)
}

// string new_name = 2;
void RenameRequest::clear_new_name() {
  new_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RenameRequest::new_name() const {
  // @@protoc_insertion_point(field_get:proto.RenameRequest.new_name)
  return new_name_.GetNoArena();
}
void RenameRequest::set_new_name(const ::std::string& value) {
  
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RenameRequest.new_name)
}
#if LANG_CXX11
void RenameRequest::set_new_name(::std::string&& value) {
  
  new_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RenameRequest.new_name)
}
#endif
void RenameRequest::set_new_name(const char* value) {
  
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RenameRequest.new_name)
}
void RenameRequest::set_new_name(const char* value, size_t size) {
  
  new_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RenameRequest.new_name)
}
::std::string* RenameRequest::mutable_new_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.RenameRequest.new_name)
  return new_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RenameRequest::release_new_name() {
  // @@protoc_insertion_point(field_release:proto.RenameRequest.new_name)
  
  return new_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RenameRequest::set_allocated_new_name(::std::string* new_name) {
  if (new_name != NULL) {
    
  } else {
    
  }
  new_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), new_name);
  // @@protoc_insertion_point(field_set_allocated:proto.RenameRequest.new_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RemoveRequest::kPathFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RemoveRequest::RemoveRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RemoveRequest)
}
RemoveRequest::RemoveRequest(const RemoveRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.RemoveRequest)
}

void RemoveRequest::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

RemoveRequest::~RemoveRequest() {
  // @@protoc_insertion_point(destructor:proto.RemoveRequest)
  SharedDtor();
}

void RemoveRequest::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RemoveRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RemoveRequest& RemoveRequest::default_instance() {
  protobuf_file_5ftransfer_2eproto::InitDefaults();
  return *internal_default_instance();
}

RemoveRequest* RemoveRequest::New(::google::protobuf::Arena* arena) const {
  RemoveRequest* n = new RemoveRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RemoveRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RemoveRequest)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool RemoveRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RemoveRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RemoveRequest.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RemoveRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RemoveRequest)
  return false;
#undef DO_
}

void RemoveRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RemoveRequest)
  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RemoveRequest.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.RemoveRequest)
}

size_t RemoveRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RemoveRequest)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemoveRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RemoveRequest*>(&from));
}

void RemoveRequest::MergeFrom(const RemoveRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RemoveRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
}

void RemoveRequest::CopyFrom(const RemoveRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RemoveRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemoveRequest::IsInitialized() const {
  return true;
}

void RemoveRequest::Swap(RemoveRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RemoveRequest::InternalSwap(RemoveRequest* other) {
  path_.Swap(&other->path_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RemoveRequest::GetTypeName() const {
  return "proto.RemoveRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RemoveRequest

// string path = 1;
void RemoveRequest::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RemoveRequest::path() const {
  // @@protoc_insertion_point(field_get:proto.RemoveRequest.path)
  return path_.GetNoArena();
}
void RemoveRequest::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RemoveRequest.path)
}
#if LANG_CXX11
void RemoveRequest::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RemoveRequest.path)
}
#endif
void RemoveRequest::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RemoveRequest.path)
}
void RemoveRequest::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RemoveRequest.path)
}
::std::string* RemoveRequest::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.RemoveRequest.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RemoveRequest::release_path() {
  // @@protoc_insertion_point(field_release:proto.RemoveRequest.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RemoveRequest::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.RemoveRequest.path)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileReply::kErrorCodeFieldNumber;
const int FileReply::kDriveListFieldNumber;
const int FileReply::kFileListFieldNumber;
const int FileReply::kPacketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileReply::FileReply()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FileReply)
}
FileReply::FileReply(const FileReply& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drive_list()) {
    drive_list_ = new ::proto::DriveList(*from.drive_list_);
  } else {
    drive_list_ = NULL;
  }
  if (from.has_file_list()) {
    file_list_ = new ::proto::FileList(*from.file_list_);
  } else {
    file_list_ = NULL;
  }
  if (from.has_packet()) {
    packet_ = new ::proto::FilePacket(*from.packet_);
  } else {
    packet_ = NULL;
  }
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:proto.FileReply)
}

void FileReply::SharedCtor() {
  ::memset(&drive_list_, 0, reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&drive_list_) + sizeof(error_code_));
  _cached_size_ = 0;
}

FileReply::~FileReply() {
  // @@protoc_insertion_point(destructor:proto.FileReply)
  SharedDtor();
}

void FileReply::SharedDtor() {
  if (this != internal_default_instance()) {
    delete drive_list_;
  }
  if (this != internal_default_instance()) {
    delete file_list_;
  }
  if (this != internal_default_instance()) {
    delete packet_;
  }
}

void FileReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileReply& FileReply::default_instance() {
  protobuf_file_5ftransfer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileReply* FileReply::New(::google::protobuf::Arena* arena) const {
  FileReply* n = new FileReply;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileReply::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FileReply)
  if (GetArenaNoVirtual() == NULL && drive_list_ != NULL) {
    delete drive_list_;
  }
  drive_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_list_ != NULL) {
    delete file_list_;
  }
  file_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && packet_ != NULL) {
    delete packet_;
  }
  packet_ = NULL;
  error_code_ = 0;
}

bool FileReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FileReply)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.FileError error_code = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::proto::FileError >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.DriveList drive_list = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drive_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.FileList file_list = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.FilePacket packet = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FileReply)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FileReply)
  return false;
#undef DO_
}

void FileReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FileReply)
  // .proto.FileError error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // .proto.DriveList drive_list = 2;
  if (this->has_drive_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->drive_list_, output);
  }

  // .proto.FileList file_list = 3;
  if (this->has_file_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->file_list_, output);
  }

  // .proto.FilePacket packet = 4;
  if (this->has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->packet_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.FileReply)
}

size_t FileReply::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FileReply)
  size_t total_size = 0;

  // .proto.DriveList drive_list = 2;
  if (this->has_drive_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->drive_list_);
  }

  // .proto.FileList file_list = 3;
  if (this->has_file_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_list_);
  }

  // .proto.FilePacket packet = 4;
  if (this->has_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->packet_);
  }

  // .proto.FileError error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileReply::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileReply*>(&from));
}

void FileReply::MergeFrom(const FileReply& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FileReply)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drive_list()) {
    mutable_drive_list()->::proto::DriveList::MergeFrom(from.drive_list());
  }
  if (from.has_file_list()) {
    mutable_file_list()->::proto::FileList::MergeFrom(from.file_list());
  }
  if (from.has_packet()) {
    mutable_packet()->::proto::FilePacket::MergeFrom(from.packet());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void FileReply::CopyFrom(const FileReply& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FileReply)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileReply::IsInitialized() const {
  return true;
}

void FileReply::Swap(FileReply* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileReply::InternalSwap(FileReply* other) {
  std::swap(drive_list_, other->drive_list_);
  std::swap(file_list_, other->file_list_);
  std::swap(packet_, other->packet_);
  std::swap(error_code_, other->error_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileReply::GetTypeName() const {
  return "proto.FileReply";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileReply

// .proto.FileError error_code = 1;
void FileReply::clear_error_code() {
  error_code_ = 0;
}
::proto::FileError FileReply::error_code() const {
  // @@protoc_insertion_point(field_get:proto.FileReply.error_code)
  return static_cast< ::proto::FileError >(error_code_);
}
void FileReply::set_error_code(::proto::FileError value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:proto.FileReply.error_code)
}

// .proto.DriveList drive_list = 2;
bool FileReply::has_drive_list() const {
  return this != internal_default_instance() && drive_list_ != NULL;
}
void FileReply::clear_drive_list() {
  if (GetArenaNoVirtual() == NULL && drive_list_ != NULL) delete drive_list_;
  drive_list_ = NULL;
}
const ::proto::DriveList& FileReply::drive_list() const {
  // @@protoc_insertion_point(field_get:proto.FileReply.drive_list)
  return drive_list_ != NULL ? *drive_list_
                         : *::proto::DriveList::internal_default_instance();
}
::proto::DriveList* FileReply::mutable_drive_list() {
  
  if (drive_list_ == NULL) {
    drive_list_ = new ::proto::DriveList;
  }
  // @@protoc_insertion_point(field_mutable:proto.FileReply.drive_list)
  return drive_list_;
}
::proto::DriveList* FileReply::release_drive_list() {
  // @@protoc_insertion_point(field_release:proto.FileReply.drive_list)
  
  ::proto::DriveList* temp = drive_list_;
  drive_list_ = NULL;
  return temp;
}
void FileReply::set_allocated_drive_list(::proto::DriveList* drive_list) {
  delete drive_list_;
  drive_list_ = drive_list;
  if (drive_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FileReply.drive_list)
}

// .proto.FileList file_list = 3;
bool FileReply::has_file_list() const {
  return this != internal_default_instance() && file_list_ != NULL;
}
void FileReply::clear_file_list() {
  if (GetArenaNoVirtual() == NULL && file_list_ != NULL) delete file_list_;
  file_list_ = NULL;
}
const ::proto::FileList& FileReply::file_list() const {
  // @@protoc_insertion_point(field_get:proto.FileReply.file_list)
  return file_list_ != NULL ? *file_list_
                         : *::proto::FileList::internal_default_instance();
}
::proto::FileList* FileReply::mutable_file_list() {
  
  if (file_list_ == NULL) {
    file_list_ = new ::proto::FileList;
  }
  // @@protoc_insertion_point(field_mutable:proto.FileReply.file_list)
  return file_list_;
}
::proto::FileList* FileReply::release_file_list() {
  // @@protoc_insertion_point(field_release:proto.FileReply.file_list)
  
  ::proto::FileList* temp = file_list_;
  file_list_ = NULL;
  return temp;
}
void FileReply::set_allocated_file_list(::proto::FileList* file_list) {
  delete file_list_;
  file_list_ = file_list;
  if (file_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FileReply.file_list)
}

// .proto.FilePacket packet = 4;
bool FileReply::has_packet() const {
  return this != internal_default_instance() && packet_ != NULL;
}
void FileReply::clear_packet() {
  if (GetArenaNoVirtual() == NULL && packet_ != NULL) delete packet_;
  packet_ = NULL;
}
const ::proto::FilePacket& FileReply::packet() const {
  // @@protoc_insertion_point(field_get:proto.FileReply.packet)
  return packet_ != NULL ? *packet_
                         : *::proto::FilePacket::internal_default_instance();
}
::proto::FilePacket* FileReply::mutable_packet() {
  
  if (packet_ == NULL) {
    packet_ = new ::proto::FilePacket;
  }
  // @@protoc_insertion_point(field_mutable:proto.FileReply.packet)
  return packet_;
}
::proto::FilePacket* FileReply::release_packet() {
  // @@protoc_insertion_point(field_release:proto.FileReply.packet)
  
  ::proto::FilePacket* temp = packet_;
  packet_ = NULL;
  return temp;
}
void FileReply::set_allocated_packet(::proto::FilePacket* packet) {
  delete packet_;
  packet_ = packet;
  if (packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FileReply.packet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int FileRequest::kDriveListRequestFieldNumber;
const int FileRequest::kFileListRequestFieldNumber;
const int FileRequest::kCreateDirectoryRequestFieldNumber;
const int FileRequest::kRenameRequestFieldNumber;
const int FileRequest::kRemoveRequestFieldNumber;
const int FileRequest::kDownloadRequestFieldNumber;
const int FileRequest::kUploadRequestFieldNumber;
const int FileRequest::kPacketRequestFieldNumber;
const int FileRequest::kPacketFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

FileRequest::FileRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_file_5ftransfer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.FileRequest)
}
FileRequest::FileRequest(const FileRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drive_list_request()) {
    drive_list_request_ = new ::proto::DriveListRequest(*from.drive_list_request_);
  } else {
    drive_list_request_ = NULL;
  }
  if (from.has_file_list_request()) {
    file_list_request_ = new ::proto::FileListRequest(*from.file_list_request_);
  } else {
    file_list_request_ = NULL;
  }
  if (from.has_create_directory_request()) {
    create_directory_request_ = new ::proto::CreateDirectoryRequest(*from.create_directory_request_);
  } else {
    create_directory_request_ = NULL;
  }
  if (from.has_rename_request()) {
    rename_request_ = new ::proto::RenameRequest(*from.rename_request_);
  } else {
    rename_request_ = NULL;
  }
  if (from.has_remove_request()) {
    remove_request_ = new ::proto::RemoveRequest(*from.remove_request_);
  } else {
    remove_request_ = NULL;
  }
  if (from.has_download_request()) {
    download_request_ = new ::proto::DownloadRequest(*from.download_request_);
  } else {
    download_request_ = NULL;
  }
  if (from.has_upload_request()) {
    upload_request_ = new ::proto::UploadRequest(*from.upload_request_);
  } else {
    upload_request_ = NULL;
  }
  if (from.has_packet_request()) {
    packet_request_ = new ::proto::FilePacketRequest(*from.packet_request_);
  } else {
    packet_request_ = NULL;
  }
  if (from.has_packet()) {
    packet_ = new ::proto::FilePacket(*from.packet_);
  } else {
    packet_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.FileRequest)
}

void FileRequest::SharedCtor() {
  ::memset(&drive_list_request_, 0, reinterpret_cast<char*>(&packet_) -
    reinterpret_cast<char*>(&drive_list_request_) + sizeof(packet_));
  _cached_size_ = 0;
}

FileRequest::~FileRequest() {
  // @@protoc_insertion_point(destructor:proto.FileRequest)
  SharedDtor();
}

void FileRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete drive_list_request_;
  }
  if (this != internal_default_instance()) {
    delete file_list_request_;
  }
  if (this != internal_default_instance()) {
    delete create_directory_request_;
  }
  if (this != internal_default_instance()) {
    delete rename_request_;
  }
  if (this != internal_default_instance()) {
    delete remove_request_;
  }
  if (this != internal_default_instance()) {
    delete download_request_;
  }
  if (this != internal_default_instance()) {
    delete upload_request_;
  }
  if (this != internal_default_instance()) {
    delete packet_request_;
  }
  if (this != internal_default_instance()) {
    delete packet_;
  }
}

void FileRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const FileRequest& FileRequest::default_instance() {
  protobuf_file_5ftransfer_2eproto::InitDefaults();
  return *internal_default_instance();
}

FileRequest* FileRequest::New(::google::protobuf::Arena* arena) const {
  FileRequest* n = new FileRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void FileRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.FileRequest)
  if (GetArenaNoVirtual() == NULL && drive_list_request_ != NULL) {
    delete drive_list_request_;
  }
  drive_list_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && file_list_request_ != NULL) {
    delete file_list_request_;
  }
  file_list_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && create_directory_request_ != NULL) {
    delete create_directory_request_;
  }
  create_directory_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && rename_request_ != NULL) {
    delete rename_request_;
  }
  rename_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && remove_request_ != NULL) {
    delete remove_request_;
  }
  remove_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && download_request_ != NULL) {
    delete download_request_;
  }
  download_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && upload_request_ != NULL) {
    delete upload_request_;
  }
  upload_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && packet_request_ != NULL) {
    delete packet_request_;
  }
  packet_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && packet_ != NULL) {
    delete packet_;
  }
  packet_ = NULL;
}

bool FileRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.FileRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.DriveListRequest drive_list_request = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_drive_list_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.FileListRequest file_list_request = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_file_list_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.CreateDirectoryRequest create_directory_request = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_create_directory_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.RenameRequest rename_request = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rename_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.RemoveRequest remove_request = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_remove_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.DownloadRequest download_request = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_download_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UploadRequest upload_request = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_upload_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.FilePacketRequest packet_request = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.FilePacket packet = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.FileRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.FileRequest)
  return false;
#undef DO_
}

void FileRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.FileRequest)
  // .proto.DriveListRequest drive_list_request = 1;
  if (this->has_drive_list_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->drive_list_request_, output);
  }

  // .proto.FileListRequest file_list_request = 2;
  if (this->has_file_list_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->file_list_request_, output);
  }

  // .proto.CreateDirectoryRequest create_directory_request = 3;
  if (this->has_create_directory_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->create_directory_request_, output);
  }

  // .proto.RenameRequest rename_request = 4;
  if (this->has_rename_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->rename_request_, output);
  }

  // .proto.RemoveRequest remove_request = 5;
  if (this->has_remove_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->remove_request_, output);
  }

  // .proto.DownloadRequest download_request = 6;
  if (this->has_download_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->download_request_, output);
  }

  // .proto.UploadRequest upload_request = 7;
  if (this->has_upload_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->upload_request_, output);
  }

  // .proto.FilePacketRequest packet_request = 8;
  if (this->has_packet_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->packet_request_, output);
  }

  // .proto.FilePacket packet = 9;
  if (this->has_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->packet_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.FileRequest)
}

size_t FileRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.FileRequest)
  size_t total_size = 0;

  // .proto.DriveListRequest drive_list_request = 1;
  if (this->has_drive_list_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->drive_list_request_);
  }

  // .proto.FileListRequest file_list_request = 2;
  if (this->has_file_list_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->file_list_request_);
  }

  // .proto.CreateDirectoryRequest create_directory_request = 3;
  if (this->has_create_directory_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->create_directory_request_);
  }

  // .proto.RenameRequest rename_request = 4;
  if (this->has_rename_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->rename_request_);
  }

  // .proto.RemoveRequest remove_request = 5;
  if (this->has_remove_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->remove_request_);
  }

  // .proto.DownloadRequest download_request = 6;
  if (this->has_download_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->download_request_);
  }

  // .proto.UploadRequest upload_request = 7;
  if (this->has_upload_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->upload_request_);
  }

  // .proto.FilePacketRequest packet_request = 8;
  if (this->has_packet_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->packet_request_);
  }

  // .proto.FilePacket packet = 9;
  if (this->has_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->packet_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FileRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const FileRequest*>(&from));
}

void FileRequest::MergeFrom(const FileRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.FileRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_drive_list_request()) {
    mutable_drive_list_request()->::proto::DriveListRequest::MergeFrom(from.drive_list_request());
  }
  if (from.has_file_list_request()) {
    mutable_file_list_request()->::proto::FileListRequest::MergeFrom(from.file_list_request());
  }
  if (from.has_create_directory_request()) {
    mutable_create_directory_request()->::proto::CreateDirectoryRequest::MergeFrom(from.create_directory_request());
  }
  if (from.has_rename_request()) {
    mutable_rename_request()->::proto::RenameRequest::MergeFrom(from.rename_request());
  }
  if (from.has_remove_request()) {
    mutable_remove_request()->::proto::RemoveRequest::MergeFrom(from.remove_request());
  }
  if (from.has_download_request()) {
    mutable_download_request()->::proto::DownloadRequest::MergeFrom(from.download_request());
  }
  if (from.has_upload_request()) {
    mutable_upload_request()->::proto::UploadRequest::MergeFrom(from.upload_request());
  }
  if (from.has_packet_request()) {
    mutable_packet_request()->::proto::FilePacketRequest::MergeFrom(from.packet_request());
  }
  if (from.has_packet()) {
    mutable_packet()->::proto::FilePacket::MergeFrom(from.packet());
  }
}

void FileRequest::CopyFrom(const FileRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.FileRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FileRequest::IsInitialized() const {
  return true;
}

void FileRequest::Swap(FileRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void FileRequest::InternalSwap(FileRequest* other) {
  std::swap(drive_list_request_, other->drive_list_request_);
  std::swap(file_list_request_, other->file_list_request_);
  std::swap(create_directory_request_, other->create_directory_request_);
  std::swap(rename_request_, other->rename_request_);
  std::swap(remove_request_, other->remove_request_);
  std::swap(download_request_, other->download_request_);
  std::swap(upload_request_, other->upload_request_);
  std::swap(packet_request_, other->packet_request_);
  std::swap(packet_, other->packet_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string FileRequest::GetTypeName() const {
  return "proto.FileRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// FileRequest

// .proto.DriveListRequest drive_list_request = 1;
bool FileRequest::has_drive_list_request() const {
  return this != internal_default_instance() && drive_list_request_ != NULL;
}
void FileRequest::clear_drive_list_request() {
  if (GetArenaNoVirtual() == NULL && drive_list_request_ != NULL) delete drive_list_request_;
  drive_list_request_ = NULL;
}
const ::proto::DriveListRequest& FileRequest::drive_list_request() const {
  // @@protoc_insertion_point(field_get:proto.FileRequest.drive_list_request)
  return drive_list_request_ != NULL ? *drive_list_request_
                         : *::proto::DriveListRequest::internal_default_instance();
}
::proto::DriveListRequest* FileRequest::mutable_drive_list_request() {
  
  if (drive_list_request_ == NULL) {
    drive_list_request_ = new ::proto::DriveListRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.FileRequest.drive_list_request)
  return drive_list_request_;
}
::proto::DriveListRequest* FileRequest::release_drive_list_request() {
  // @@protoc_insertion_point(field_release:proto.FileRequest.drive_list_request)
  
  ::proto::DriveListRequest* temp = drive_list_request_;
  drive_list_request_ = NULL;
  return temp;
}
void FileRequest::set_allocated_drive_list_request(::proto::DriveListRequest* drive_list_request) {
  delete drive_list_request_;
  drive_list_request_ = drive_list_request;
  if (drive_list_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FileRequest.drive_list_request)
}

// .proto.FileListRequest file_list_request = 2;
bool FileRequest::has_file_list_request() const {
  return this != internal_default_instance() && file_list_request_ != NULL;
}
void FileRequest::clear_file_list_request() {
  if (GetArenaNoVirtual() == NULL && file_list_request_ != NULL) delete file_list_request_;
  file_list_request_ = NULL;
}
const ::proto::FileListRequest& FileRequest::file_list_request() const {
  // @@protoc_insertion_point(field_get:proto.FileRequest.file_list_request)
  return file_list_request_ != NULL ? *file_list_request_
                         : *::proto::FileListRequest::internal_default_instance();
}
::proto::FileListRequest* FileRequest::mutable_file_list_request() {
  
  if (file_list_request_ == NULL) {
    file_list_request_ = new ::proto::FileListRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.FileRequest.file_list_request)
  return file_list_request_;
}
::proto::FileListRequest* FileRequest::release_file_list_request() {
  // @@protoc_insertion_point(field_release:proto.FileRequest.file_list_request)
  
  ::proto::FileListRequest* temp = file_list_request_;
  file_list_request_ = NULL;
  return temp;
}
void FileRequest::set_allocated_file_list_request(::proto::FileListRequest* file_list_request) {
  delete file_list_request_;
  file_list_request_ = file_list_request;
  if (file_list_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FileRequest.file_list_request)
}

// .proto.CreateDirectoryRequest create_directory_request = 3;
bool FileRequest::has_create_directory_request() const {
  return this != internal_default_instance() && create_directory_request_ != NULL;
}
void FileRequest::clear_create_directory_request() {
  if (GetArenaNoVirtual() == NULL && create_directory_request_ != NULL) delete create_directory_request_;
  create_directory_request_ = NULL;
}
const ::proto::CreateDirectoryRequest& FileRequest::create_directory_request() const {
  // @@protoc_insertion_point(field_get:proto.FileRequest.create_directory_request)
  return create_directory_request_ != NULL ? *create_directory_request_
                         : *::proto::CreateDirectoryRequest::internal_default_instance();
}
::proto::CreateDirectoryRequest* FileRequest::mutable_create_directory_request() {
  
  if (create_directory_request_ == NULL) {
    create_directory_request_ = new ::proto::CreateDirectoryRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.FileRequest.create_directory_request)
  return create_directory_request_;
}
::proto::CreateDirectoryRequest* FileRequest::release_create_directory_request() {
  // @@protoc_insertion_point(field_release:proto.FileRequest.create_directory_request)
  
  ::proto::CreateDirectoryRequest* temp = create_directory_request_;
  create_directory_request_ = NULL;
  return temp;
}
void FileRequest::set_allocated_create_directory_request(::proto::CreateDirectoryRequest* create_directory_request) {
  delete create_directory_request_;
  create_directory_request_ = create_directory_request;
  if (create_directory_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FileRequest.create_directory_request)
}

// .proto.RenameRequest rename_request = 4;
bool FileRequest::has_rename_request() const {
  return this != internal_default_instance() && rename_request_ != NULL;
}
void FileRequest::clear_rename_request() {
  if (GetArenaNoVirtual() == NULL && rename_request_ != NULL) delete rename_request_;
  rename_request_ = NULL;
}
const ::proto::RenameRequest& FileRequest::rename_request() const {
  // @@protoc_insertion_point(field_get:proto.FileRequest.rename_request)
  return rename_request_ != NULL ? *rename_request_
                         : *::proto::RenameRequest::internal_default_instance();
}
::proto::RenameRequest* FileRequest::mutable_rename_request() {
  
  if (rename_request_ == NULL) {
    rename_request_ = new ::proto::RenameRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.FileRequest.rename_request)
  return rename_request_;
}
::proto::RenameRequest* FileRequest::release_rename_request() {
  // @@protoc_insertion_point(field_release:proto.FileRequest.rename_request)
  
  ::proto::RenameRequest* temp = rename_request_;
  rename_request_ = NULL;
  return temp;
}
void FileRequest::set_allocated_rename_request(::proto::RenameRequest* rename_request) {
  delete rename_request_;
  rename_request_ = rename_request;
  if (rename_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FileRequest.rename_request)
}

// .proto.RemoveRequest remove_request = 5;
bool FileRequest::has_remove_request() const {
  return this != internal_default_instance() && remove_request_ != NULL;
}
void FileRequest::clear_remove_request() {
  if (GetArenaNoVirtual() == NULL && remove_request_ != NULL) delete remove_request_;
  remove_request_ = NULL;
}
const ::proto::RemoveRequest& FileRequest::remove_request() const {
  // @@protoc_insertion_point(field_get:proto.FileRequest.remove_request)
  return remove_request_ != NULL ? *remove_request_
                         : *::proto::RemoveRequest::internal_default_instance();
}
::proto::RemoveRequest* FileRequest::mutable_remove_request() {
  
  if (remove_request_ == NULL) {
    remove_request_ = new ::proto::RemoveRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.FileRequest.remove_request)
  return remove_request_;
}
::proto::RemoveRequest* FileRequest::release_remove_request() {
  // @@protoc_insertion_point(field_release:proto.FileRequest.remove_request)
  
  ::proto::RemoveRequest* temp = remove_request_;
  remove_request_ = NULL;
  return temp;
}
void FileRequest::set_allocated_remove_request(::proto::RemoveRequest* remove_request) {
  delete remove_request_;
  remove_request_ = remove_request;
  if (remove_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FileRequest.remove_request)
}

// .proto.DownloadRequest download_request = 6;
bool FileRequest::has_download_request() const {
  return this != internal_default_instance() && download_request_ != NULL;
}
void FileRequest::clear_download_request() {
  if (GetArenaNoVirtual() == NULL && download_request_ != NULL) delete download_request_;
  download_request_ = NULL;
}
const ::proto::DownloadRequest& FileRequest::download_request() const {
  // @@protoc_insertion_point(field_get:proto.FileRequest.download_request)
  return download_request_ != NULL ? *download_request_
                         : *::proto::DownloadRequest::internal_default_instance();
}
::proto::DownloadRequest* FileRequest::mutable_download_request() {
  
  if (download_request_ == NULL) {
    download_request_ = new ::proto::DownloadRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.FileRequest.download_request)
  return download_request_;
}
::proto::DownloadRequest* FileRequest::release_download_request() {
  // @@protoc_insertion_point(field_release:proto.FileRequest.download_request)
  
  ::proto::DownloadRequest* temp = download_request_;
  download_request_ = NULL;
  return temp;
}
void FileRequest::set_allocated_download_request(::proto::DownloadRequest* download_request) {
  delete download_request_;
  download_request_ = download_request;
  if (download_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FileRequest.download_request)
}

// .proto.UploadRequest upload_request = 7;
bool FileRequest::has_upload_request() const {
  return this != internal_default_instance() && upload_request_ != NULL;
}
void FileRequest::clear_upload_request() {
  if (GetArenaNoVirtual() == NULL && upload_request_ != NULL) delete upload_request_;
  upload_request_ = NULL;
}
const ::proto::UploadRequest& FileRequest::upload_request() const {
  // @@protoc_insertion_point(field_get:proto.FileRequest.upload_request)
  return upload_request_ != NULL ? *upload_request_
                         : *::proto::UploadRequest::internal_default_instance();
}
::proto::UploadRequest* FileRequest::mutable_upload_request() {
  
  if (upload_request_ == NULL) {
    upload_request_ = new ::proto::UploadRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.FileRequest.upload_request)
  return upload_request_;
}
::proto::UploadRequest* FileRequest::release_upload_request() {
  // @@protoc_insertion_point(field_release:proto.FileRequest.upload_request)
  
  ::proto::UploadRequest* temp = upload_request_;
  upload_request_ = NULL;
  return temp;
}
void FileRequest::set_allocated_upload_request(::proto::UploadRequest* upload_request) {
  delete upload_request_;
  upload_request_ = upload_request;
  if (upload_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FileRequest.upload_request)
}

// .proto.FilePacketRequest packet_request = 8;
bool FileRequest::has_packet_request() const {
  return this != internal_default_instance() && packet_request_ != NULL;
}
void FileRequest::clear_packet_request() {
  if (GetArenaNoVirtual() == NULL && packet_request_ != NULL) delete packet_request_;
  packet_request_ = NULL;
}
const ::proto::FilePacketRequest& FileRequest::packet_request() const {
  // @@protoc_insertion_point(field_get:proto.FileRequest.packet_request)
  return packet_request_ != NULL ? *packet_request_
                         : *::proto::FilePacketRequest::internal_default_instance();
}
::proto::FilePacketRequest* FileRequest::mutable_packet_request() {
  
  if (packet_request_ == NULL) {
    packet_request_ = new ::proto::FilePacketRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.FileRequest.packet_request)
  return packet_request_;
}
::proto::FilePacketRequest* FileRequest::release_packet_request() {
  // @@protoc_insertion_point(field_release:proto.FileRequest.packet_request)
  
  ::proto::FilePacketRequest* temp = packet_request_;
  packet_request_ = NULL;
  return temp;
}
void FileRequest::set_allocated_packet_request(::proto::FilePacketRequest* packet_request) {
  delete packet_request_;
  packet_request_ = packet_request;
  if (packet_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FileRequest.packet_request)
}

// .proto.FilePacket packet = 9;
bool FileRequest::has_packet() const {
  return this != internal_default_instance() && packet_ != NULL;
}
void FileRequest::clear_packet() {
  if (GetArenaNoVirtual() == NULL && packet_ != NULL) delete packet_;
  packet_ = NULL;
}
const ::proto::FilePacket& FileRequest::packet() const {
  // @@protoc_insertion_point(field_get:proto.FileRequest.packet)
  return packet_ != NULL ? *packet_
                         : *::proto::FilePacket::internal_default_instance();
}
::proto::FilePacket* FileRequest::mutable_packet() {
  
  if (packet_ == NULL) {
    packet_ = new ::proto::FilePacket;
  }
  // @@protoc_insertion_point(field_mutable:proto.FileRequest.packet)
  return packet_;
}
::proto::FilePacket* FileRequest::release_packet() {
  // @@protoc_insertion_point(field_release:proto.FileRequest.packet)
  
  ::proto::FilePacket* temp = packet_;
  packet_ = NULL;
  return temp;
}
void FileRequest::set_allocated_packet(::proto::FilePacket* packet) {
  delete packet_;
  packet_ = packet;
  if (packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.FileRequest.packet)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
