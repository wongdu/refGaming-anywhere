// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: key_exchange.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "key_exchange.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace proto {
class ClientHelloDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientHello> {
} _ClientHello_default_instance_;
class ServerHelloDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServerHello> {
} _ServerHello_default_instance_;
class SrpIdentifyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SrpIdentify> {
} _SrpIdentify_default_instance_;
class SrpServerKeyExchangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SrpServerKeyExchange> {
} _SrpServerKeyExchange_default_instance_;
class SrpClientKeyExchangeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SrpClientKeyExchange> {
} _SrpClientKeyExchange_default_instance_;
class SessionChallengeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionChallenge> {
} _SessionChallenge_default_instance_;
class SessionResponseDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionResponse> {
} _SessionResponse_default_instance_;

namespace protobuf_key_5fexchange_2eproto {


void TableStruct::Shutdown() {
  _ClientHello_default_instance_.Shutdown();
  _ServerHello_default_instance_.Shutdown();
  _SrpIdentify_default_instance_.Shutdown();
  _SrpServerKeyExchange_default_instance_.Shutdown();
  _SrpClientKeyExchange_default_instance_.Shutdown();
  _SessionChallenge_default_instance_.Shutdown();
  _SessionResponse_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_common_2eproto::InitDefaults();
  _ClientHello_default_instance_.DefaultConstruct();
  _ServerHello_default_instance_.DefaultConstruct();
  _SrpIdentify_default_instance_.DefaultConstruct();
  _SrpServerKeyExchange_default_instance_.DefaultConstruct();
  _SrpClientKeyExchange_default_instance_.DefaultConstruct();
  _SessionChallenge_default_instance_.DefaultConstruct();
  _SessionResponse_default_instance_.DefaultConstruct();
  _SessionChallenge_default_instance_.get_mutable()->version_ = const_cast< ::proto::Version*>(
      ::proto::Version::internal_default_instance());
  _SessionResponse_default_instance_.get_mutable()->version_ = const_cast< ::proto::Version*>(
      ::proto::Version::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::proto::protobuf_common_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_key_5fexchange_2eproto

bool Identify_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool Encryption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientHello::kEncryptionFieldNumber;
const int ClientHello::kIdentifyFieldNumber;
const int ClientHello::kPublicKeyFieldNumber;
const int ClientHello::kIvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientHello::ClientHello()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_key_5fexchange_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ClientHello)
}
ClientHello::ClientHello(const ClientHello& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.public_key().size() > 0) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.iv().size() > 0) {
    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  ::memcpy(&encryption_, &from.encryption_,
    reinterpret_cast<char*>(&identify_) -
    reinterpret_cast<char*>(&encryption_) + sizeof(identify_));
  // @@protoc_insertion_point(copy_constructor:proto.ClientHello)
}

void ClientHello::SharedCtor() {
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&encryption_, 0, reinterpret_cast<char*>(&identify_) -
    reinterpret_cast<char*>(&encryption_) + sizeof(identify_));
  _cached_size_ = 0;
}

ClientHello::~ClientHello() {
  // @@protoc_insertion_point(destructor:proto.ClientHello)
  SharedDtor();
}

void ClientHello::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClientHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientHello& ClientHello::default_instance() {
  protobuf_key_5fexchange_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientHello* ClientHello::New(::google::protobuf::Arena* arena) const {
  ClientHello* n = new ClientHello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientHello::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClientHello)
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&encryption_, 0, reinterpret_cast<char*>(&identify_) -
    reinterpret_cast<char*>(&encryption_) + sizeof(identify_));
}

bool ClientHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ClientHello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 encryption = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &encryption_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Identify identify = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_identify(static_cast< ::proto::Identify >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes public_key = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes iv = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ClientHello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ClientHello)
  return false;
#undef DO_
}

void ClientHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ClientHello)
  // uint32 encryption = 1;
  if (this->encryption() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->encryption(), output);
  }

  // .proto.Identify identify = 2;
  if (this->identify() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->identify(), output);
  }

  // bytes public_key = 3;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->public_key(), output);
  }

  // bytes iv = 4;
  if (this->iv().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->iv(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.ClientHello)
}

size_t ClientHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClientHello)
  size_t total_size = 0;

  // bytes public_key = 3;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  // bytes iv = 4;
  if (this->iv().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->iv());
  }

  // uint32 encryption = 1;
  if (this->encryption() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->encryption());
  }

  // .proto.Identify identify = 2;
  if (this->identify() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->identify());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientHello::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientHello*>(&from));
}

void ClientHello::MergeFrom(const ClientHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ClientHello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.iv().size() > 0) {

    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  if (from.encryption() != 0) {
    set_encryption(from.encryption());
  }
  if (from.identify() != 0) {
    set_identify(from.identify());
  }
}

void ClientHello::CopyFrom(const ClientHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClientHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientHello::IsInitialized() const {
  return true;
}

void ClientHello::Swap(ClientHello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientHello::InternalSwap(ClientHello* other) {
  public_key_.Swap(&other->public_key_);
  iv_.Swap(&other->iv_);
  std::swap(encryption_, other->encryption_);
  std::swap(identify_, other->identify_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientHello::GetTypeName() const {
  return "proto.ClientHello";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientHello

// uint32 encryption = 1;
void ClientHello::clear_encryption() {
  encryption_ = 0u;
}
::google::protobuf::uint32 ClientHello::encryption() const {
  // @@protoc_insertion_point(field_get:proto.ClientHello.encryption)
  return encryption_;
}
void ClientHello::set_encryption(::google::protobuf::uint32 value) {
  
  encryption_ = value;
  // @@protoc_insertion_point(field_set:proto.ClientHello.encryption)
}

// .proto.Identify identify = 2;
void ClientHello::clear_identify() {
  identify_ = 0;
}
::proto::Identify ClientHello::identify() const {
  // @@protoc_insertion_point(field_get:proto.ClientHello.identify)
  return static_cast< ::proto::Identify >(identify_);
}
void ClientHello::set_identify(::proto::Identify value) {
  
  identify_ = value;
  // @@protoc_insertion_point(field_set:proto.ClientHello.identify)
}

// bytes public_key = 3;
void ClientHello::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientHello::public_key() const {
  // @@protoc_insertion_point(field_get:proto.ClientHello.public_key)
  return public_key_.GetNoArena();
}
void ClientHello::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ClientHello.public_key)
}
#if LANG_CXX11
void ClientHello::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ClientHello.public_key)
}
#endif
void ClientHello::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ClientHello.public_key)
}
void ClientHello::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ClientHello.public_key)
}
::std::string* ClientHello::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:proto.ClientHello.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientHello::release_public_key() {
  // @@protoc_insertion_point(field_release:proto.ClientHello.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientHello::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:proto.ClientHello.public_key)
}

// bytes iv = 4;
void ClientHello::clear_iv() {
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClientHello::iv() const {
  // @@protoc_insertion_point(field_get:proto.ClientHello.iv)
  return iv_.GetNoArena();
}
void ClientHello::set_iv(const ::std::string& value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ClientHello.iv)
}
#if LANG_CXX11
void ClientHello::set_iv(::std::string&& value) {
  
  iv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ClientHello.iv)
}
#endif
void ClientHello::set_iv(const char* value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ClientHello.iv)
}
void ClientHello::set_iv(const void* value, size_t size) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ClientHello.iv)
}
::std::string* ClientHello::mutable_iv() {
  
  // @@protoc_insertion_point(field_mutable:proto.ClientHello.iv)
  return iv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClientHello::release_iv() {
  // @@protoc_insertion_point(field_release:proto.ClientHello.iv)
  
  return iv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClientHello::set_allocated_iv(::std::string* iv) {
  if (iv != NULL) {
    
  } else {
    
  }
  iv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:proto.ClientHello.iv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServerHello::kEncryptionFieldNumber;
const int ServerHello::kIvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServerHello::ServerHello()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_key_5fexchange_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ServerHello)
}
ServerHello::ServerHello(const ServerHello& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.iv().size() > 0) {
    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  encryption_ = from.encryption_;
  // @@protoc_insertion_point(copy_constructor:proto.ServerHello)
}

void ServerHello::SharedCtor() {
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryption_ = 0;
  _cached_size_ = 0;
}

ServerHello::~ServerHello() {
  // @@protoc_insertion_point(destructor:proto.ServerHello)
  SharedDtor();
}

void ServerHello::SharedDtor() {
  iv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ServerHello::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServerHello& ServerHello::default_instance() {
  protobuf_key_5fexchange_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServerHello* ServerHello::New(::google::protobuf::Arena* arena) const {
  ServerHello* n = new ServerHello;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServerHello::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ServerHello)
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  encryption_ = 0;
}

bool ServerHello::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ServerHello)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Encryption encryption = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encryption(static_cast< ::proto::Encryption >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes iv = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ServerHello)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ServerHello)
  return false;
#undef DO_
}

void ServerHello::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ServerHello)
  // .proto.Encryption encryption = 1;
  if (this->encryption() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encryption(), output);
  }

  // bytes iv = 2;
  if (this->iv().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->iv(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.ServerHello)
}

size_t ServerHello::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ServerHello)
  size_t total_size = 0;

  // bytes iv = 2;
  if (this->iv().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->iv());
  }

  // .proto.Encryption encryption = 1;
  if (this->encryption() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encryption());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServerHello::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServerHello*>(&from));
}

void ServerHello::MergeFrom(const ServerHello& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ServerHello)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.iv().size() > 0) {

    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  if (from.encryption() != 0) {
    set_encryption(from.encryption());
  }
}

void ServerHello::CopyFrom(const ServerHello& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ServerHello)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServerHello::IsInitialized() const {
  return true;
}

void ServerHello::Swap(ServerHello* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServerHello::InternalSwap(ServerHello* other) {
  iv_.Swap(&other->iv_);
  std::swap(encryption_, other->encryption_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServerHello::GetTypeName() const {
  return "proto.ServerHello";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServerHello

// .proto.Encryption encryption = 1;
void ServerHello::clear_encryption() {
  encryption_ = 0;
}
::proto::Encryption ServerHello::encryption() const {
  // @@protoc_insertion_point(field_get:proto.ServerHello.encryption)
  return static_cast< ::proto::Encryption >(encryption_);
}
void ServerHello::set_encryption(::proto::Encryption value) {
  
  encryption_ = value;
  // @@protoc_insertion_point(field_set:proto.ServerHello.encryption)
}

// bytes iv = 2;
void ServerHello::clear_iv() {
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ServerHello::iv() const {
  // @@protoc_insertion_point(field_get:proto.ServerHello.iv)
  return iv_.GetNoArena();
}
void ServerHello::set_iv(const ::std::string& value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ServerHello.iv)
}
#if LANG_CXX11
void ServerHello::set_iv(::std::string&& value) {
  
  iv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ServerHello.iv)
}
#endif
void ServerHello::set_iv(const char* value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ServerHello.iv)
}
void ServerHello::set_iv(const void* value, size_t size) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ServerHello.iv)
}
::std::string* ServerHello::mutable_iv() {
  
  // @@protoc_insertion_point(field_mutable:proto.ServerHello.iv)
  return iv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ServerHello::release_iv() {
  // @@protoc_insertion_point(field_release:proto.ServerHello.iv)
  
  return iv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ServerHello::set_allocated_iv(::std::string* iv) {
  if (iv != NULL) {
    
  } else {
    
  }
  iv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:proto.ServerHello.iv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrpIdentify::kUsernameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrpIdentify::SrpIdentify()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_key_5fexchange_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SrpIdentify)
}
SrpIdentify::SrpIdentify(const SrpIdentify& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.username().size() > 0) {
    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.SrpIdentify)
}

void SrpIdentify::SharedCtor() {
  username_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SrpIdentify::~SrpIdentify() {
  // @@protoc_insertion_point(destructor:proto.SrpIdentify)
  SharedDtor();
}

void SrpIdentify::SharedDtor() {
  username_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SrpIdentify::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SrpIdentify& SrpIdentify::default_instance() {
  protobuf_key_5fexchange_2eproto::InitDefaults();
  return *internal_default_instance();
}

SrpIdentify* SrpIdentify::New(::google::protobuf::Arena* arena) const {
  SrpIdentify* n = new SrpIdentify;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SrpIdentify::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SrpIdentify)
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SrpIdentify::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SrpIdentify)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string username = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_username()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->username().data(), this->username().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.SrpIdentify.username"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SrpIdentify)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SrpIdentify)
  return false;
#undef DO_
}

void SrpIdentify::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SrpIdentify)
  // string username = 1;
  if (this->username().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->username().data(), this->username().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SrpIdentify.username");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->username(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.SrpIdentify)
}

size_t SrpIdentify::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SrpIdentify)
  size_t total_size = 0;

  // string username = 1;
  if (this->username().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->username());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrpIdentify::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SrpIdentify*>(&from));
}

void SrpIdentify::MergeFrom(const SrpIdentify& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SrpIdentify)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.username().size() > 0) {

    username_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.username_);
  }
}

void SrpIdentify::CopyFrom(const SrpIdentify& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SrpIdentify)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrpIdentify::IsInitialized() const {
  return true;
}

void SrpIdentify::Swap(SrpIdentify* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrpIdentify::InternalSwap(SrpIdentify* other) {
  username_.Swap(&other->username_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SrpIdentify::GetTypeName() const {
  return "proto.SrpIdentify";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SrpIdentify

// string username = 1;
void SrpIdentify::clear_username() {
  username_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SrpIdentify::username() const {
  // @@protoc_insertion_point(field_get:proto.SrpIdentify.username)
  return username_.GetNoArena();
}
void SrpIdentify::set_username(const ::std::string& value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SrpIdentify.username)
}
#if LANG_CXX11
void SrpIdentify::set_username(::std::string&& value) {
  
  username_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SrpIdentify.username)
}
#endif
void SrpIdentify::set_username(const char* value) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SrpIdentify.username)
}
void SrpIdentify::set_username(const char* value, size_t size) {
  
  username_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SrpIdentify.username)
}
::std::string* SrpIdentify::mutable_username() {
  
  // @@protoc_insertion_point(field_mutable:proto.SrpIdentify.username)
  return username_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SrpIdentify::release_username() {
  // @@protoc_insertion_point(field_release:proto.SrpIdentify.username)
  
  return username_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SrpIdentify::set_allocated_username(::std::string* username) {
  if (username != NULL) {
    
  } else {
    
  }
  username_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), username);
  // @@protoc_insertion_point(field_set_allocated:proto.SrpIdentify.username)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrpServerKeyExchange::kNumberFieldNumber;
const int SrpServerKeyExchange::kGeneratorFieldNumber;
const int SrpServerKeyExchange::kSaltFieldNumber;
const int SrpServerKeyExchange::kBFieldNumber;
const int SrpServerKeyExchange::kIvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrpServerKeyExchange::SrpServerKeyExchange()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_key_5fexchange_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SrpServerKeyExchange)
}
SrpServerKeyExchange::SrpServerKeyExchange(const SrpServerKeyExchange& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.number().size() > 0) {
    number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  generator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.generator().size() > 0) {
    generator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generator_);
  }
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.salt().size() > 0) {
    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.b().size() > 0) {
    b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.b_);
  }
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.iv().size() > 0) {
    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.SrpServerKeyExchange)
}

void SrpServerKeyExchange::SharedCtor() {
  number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generator_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  b_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SrpServerKeyExchange::~SrpServerKeyExchange() {
  // @@protoc_insertion_point(destructor:proto.SrpServerKeyExchange)
  SharedDtor();
}

void SrpServerKeyExchange::SharedDtor() {
  number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generator_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  b_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SrpServerKeyExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SrpServerKeyExchange& SrpServerKeyExchange::default_instance() {
  protobuf_key_5fexchange_2eproto::InitDefaults();
  return *internal_default_instance();
}

SrpServerKeyExchange* SrpServerKeyExchange::New(::google::protobuf::Arena* arena) const {
  SrpServerKeyExchange* n = new SrpServerKeyExchange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SrpServerKeyExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SrpServerKeyExchange)
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  generator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SrpServerKeyExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SrpServerKeyExchange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes number = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_number()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes generator = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_generator()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes salt = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_salt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes B = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_b()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes iv = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SrpServerKeyExchange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SrpServerKeyExchange)
  return false;
#undef DO_
}

void SrpServerKeyExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SrpServerKeyExchange)
  // bytes number = 1;
  if (this->number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->number(), output);
  }

  // bytes generator = 2;
  if (this->generator().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->generator(), output);
  }

  // bytes salt = 3;
  if (this->salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->salt(), output);
  }

  // bytes B = 4;
  if (this->b().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->b(), output);
  }

  // bytes iv = 5;
  if (this->iv().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->iv(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.SrpServerKeyExchange)
}

size_t SrpServerKeyExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SrpServerKeyExchange)
  size_t total_size = 0;

  // bytes number = 1;
  if (this->number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->number());
  }

  // bytes generator = 2;
  if (this->generator().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->generator());
  }

  // bytes salt = 3;
  if (this->salt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->salt());
  }

  // bytes B = 4;
  if (this->b().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->b());
  }

  // bytes iv = 5;
  if (this->iv().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->iv());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrpServerKeyExchange::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SrpServerKeyExchange*>(&from));
}

void SrpServerKeyExchange::MergeFrom(const SrpServerKeyExchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SrpServerKeyExchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.number().size() > 0) {

    number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.number_);
  }
  if (from.generator().size() > 0) {

    generator_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.generator_);
  }
  if (from.salt().size() > 0) {

    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  if (from.b().size() > 0) {

    b_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.b_);
  }
  if (from.iv().size() > 0) {

    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
}

void SrpServerKeyExchange::CopyFrom(const SrpServerKeyExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SrpServerKeyExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrpServerKeyExchange::IsInitialized() const {
  return true;
}

void SrpServerKeyExchange::Swap(SrpServerKeyExchange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrpServerKeyExchange::InternalSwap(SrpServerKeyExchange* other) {
  number_.Swap(&other->number_);
  generator_.Swap(&other->generator_);
  salt_.Swap(&other->salt_);
  b_.Swap(&other->b_);
  iv_.Swap(&other->iv_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SrpServerKeyExchange::GetTypeName() const {
  return "proto.SrpServerKeyExchange";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SrpServerKeyExchange

// bytes number = 1;
void SrpServerKeyExchange::clear_number() {
  number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SrpServerKeyExchange::number() const {
  // @@protoc_insertion_point(field_get:proto.SrpServerKeyExchange.number)
  return number_.GetNoArena();
}
void SrpServerKeyExchange::set_number(const ::std::string& value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SrpServerKeyExchange.number)
}
#if LANG_CXX11
void SrpServerKeyExchange::set_number(::std::string&& value) {
  
  number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SrpServerKeyExchange.number)
}
#endif
void SrpServerKeyExchange::set_number(const char* value) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SrpServerKeyExchange.number)
}
void SrpServerKeyExchange::set_number(const void* value, size_t size) {
  
  number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SrpServerKeyExchange.number)
}
::std::string* SrpServerKeyExchange::mutable_number() {
  
  // @@protoc_insertion_point(field_mutable:proto.SrpServerKeyExchange.number)
  return number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SrpServerKeyExchange::release_number() {
  // @@protoc_insertion_point(field_release:proto.SrpServerKeyExchange.number)
  
  return number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SrpServerKeyExchange::set_allocated_number(::std::string* number) {
  if (number != NULL) {
    
  } else {
    
  }
  number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), number);
  // @@protoc_insertion_point(field_set_allocated:proto.SrpServerKeyExchange.number)
}

// bytes generator = 2;
void SrpServerKeyExchange::clear_generator() {
  generator_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SrpServerKeyExchange::generator() const {
  // @@protoc_insertion_point(field_get:proto.SrpServerKeyExchange.generator)
  return generator_.GetNoArena();
}
void SrpServerKeyExchange::set_generator(const ::std::string& value) {
  
  generator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SrpServerKeyExchange.generator)
}
#if LANG_CXX11
void SrpServerKeyExchange::set_generator(::std::string&& value) {
  
  generator_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SrpServerKeyExchange.generator)
}
#endif
void SrpServerKeyExchange::set_generator(const char* value) {
  
  generator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SrpServerKeyExchange.generator)
}
void SrpServerKeyExchange::set_generator(const void* value, size_t size) {
  
  generator_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SrpServerKeyExchange.generator)
}
::std::string* SrpServerKeyExchange::mutable_generator() {
  
  // @@protoc_insertion_point(field_mutable:proto.SrpServerKeyExchange.generator)
  return generator_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SrpServerKeyExchange::release_generator() {
  // @@protoc_insertion_point(field_release:proto.SrpServerKeyExchange.generator)
  
  return generator_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SrpServerKeyExchange::set_allocated_generator(::std::string* generator) {
  if (generator != NULL) {
    
  } else {
    
  }
  generator_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), generator);
  // @@protoc_insertion_point(field_set_allocated:proto.SrpServerKeyExchange.generator)
}

// bytes salt = 3;
void SrpServerKeyExchange::clear_salt() {
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SrpServerKeyExchange::salt() const {
  // @@protoc_insertion_point(field_get:proto.SrpServerKeyExchange.salt)
  return salt_.GetNoArena();
}
void SrpServerKeyExchange::set_salt(const ::std::string& value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SrpServerKeyExchange.salt)
}
#if LANG_CXX11
void SrpServerKeyExchange::set_salt(::std::string&& value) {
  
  salt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SrpServerKeyExchange.salt)
}
#endif
void SrpServerKeyExchange::set_salt(const char* value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SrpServerKeyExchange.salt)
}
void SrpServerKeyExchange::set_salt(const void* value, size_t size) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SrpServerKeyExchange.salt)
}
::std::string* SrpServerKeyExchange::mutable_salt() {
  
  // @@protoc_insertion_point(field_mutable:proto.SrpServerKeyExchange.salt)
  return salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SrpServerKeyExchange::release_salt() {
  // @@protoc_insertion_point(field_release:proto.SrpServerKeyExchange.salt)
  
  return salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SrpServerKeyExchange::set_allocated_salt(::std::string* salt) {
  if (salt != NULL) {
    
  } else {
    
  }
  salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salt);
  // @@protoc_insertion_point(field_set_allocated:proto.SrpServerKeyExchange.salt)
}

// bytes B = 4;
void SrpServerKeyExchange::clear_b() {
  b_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SrpServerKeyExchange::b() const {
  // @@protoc_insertion_point(field_get:proto.SrpServerKeyExchange.B)
  return b_.GetNoArena();
}
void SrpServerKeyExchange::set_b(const ::std::string& value) {
  
  b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SrpServerKeyExchange.B)
}
#if LANG_CXX11
void SrpServerKeyExchange::set_b(::std::string&& value) {
  
  b_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SrpServerKeyExchange.B)
}
#endif
void SrpServerKeyExchange::set_b(const char* value) {
  
  b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SrpServerKeyExchange.B)
}
void SrpServerKeyExchange::set_b(const void* value, size_t size) {
  
  b_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SrpServerKeyExchange.B)
}
::std::string* SrpServerKeyExchange::mutable_b() {
  
  // @@protoc_insertion_point(field_mutable:proto.SrpServerKeyExchange.B)
  return b_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SrpServerKeyExchange::release_b() {
  // @@protoc_insertion_point(field_release:proto.SrpServerKeyExchange.B)
  
  return b_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SrpServerKeyExchange::set_allocated_b(::std::string* b) {
  if (b != NULL) {
    
  } else {
    
  }
  b_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), b);
  // @@protoc_insertion_point(field_set_allocated:proto.SrpServerKeyExchange.B)
}

// bytes iv = 5;
void SrpServerKeyExchange::clear_iv() {
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SrpServerKeyExchange::iv() const {
  // @@protoc_insertion_point(field_get:proto.SrpServerKeyExchange.iv)
  return iv_.GetNoArena();
}
void SrpServerKeyExchange::set_iv(const ::std::string& value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SrpServerKeyExchange.iv)
}
#if LANG_CXX11
void SrpServerKeyExchange::set_iv(::std::string&& value) {
  
  iv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SrpServerKeyExchange.iv)
}
#endif
void SrpServerKeyExchange::set_iv(const char* value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SrpServerKeyExchange.iv)
}
void SrpServerKeyExchange::set_iv(const void* value, size_t size) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SrpServerKeyExchange.iv)
}
::std::string* SrpServerKeyExchange::mutable_iv() {
  
  // @@protoc_insertion_point(field_mutable:proto.SrpServerKeyExchange.iv)
  return iv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SrpServerKeyExchange::release_iv() {
  // @@protoc_insertion_point(field_release:proto.SrpServerKeyExchange.iv)
  
  return iv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SrpServerKeyExchange::set_allocated_iv(::std::string* iv) {
  if (iv != NULL) {
    
  } else {
    
  }
  iv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:proto.SrpServerKeyExchange.iv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SrpClientKeyExchange::kAFieldNumber;
const int SrpClientKeyExchange::kIvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SrpClientKeyExchange::SrpClientKeyExchange()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_key_5fexchange_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SrpClientKeyExchange)
}
SrpClientKeyExchange::SrpClientKeyExchange(const SrpClientKeyExchange& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.a().size() > 0) {
    a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_);
  }
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.iv().size() > 0) {
    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.SrpClientKeyExchange)
}

void SrpClientKeyExchange::SharedCtor() {
  a_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

SrpClientKeyExchange::~SrpClientKeyExchange() {
  // @@protoc_insertion_point(destructor:proto.SrpClientKeyExchange)
  SharedDtor();
}

void SrpClientKeyExchange::SharedDtor() {
  a_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void SrpClientKeyExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SrpClientKeyExchange& SrpClientKeyExchange::default_instance() {
  protobuf_key_5fexchange_2eproto::InitDefaults();
  return *internal_default_instance();
}

SrpClientKeyExchange* SrpClientKeyExchange::New(::google::protobuf::Arena* arena) const {
  SrpClientKeyExchange* n = new SrpClientKeyExchange;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SrpClientKeyExchange::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SrpClientKeyExchange)
  a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool SrpClientKeyExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SrpClientKeyExchange)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bytes A = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_a()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes iv = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SrpClientKeyExchange)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SrpClientKeyExchange)
  return false;
#undef DO_
}

void SrpClientKeyExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SrpClientKeyExchange)
  // bytes A = 1;
  if (this->a().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->a(), output);
  }

  // bytes iv = 2;
  if (this->iv().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->iv(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.SrpClientKeyExchange)
}

size_t SrpClientKeyExchange::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SrpClientKeyExchange)
  size_t total_size = 0;

  // bytes A = 1;
  if (this->a().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->a());
  }

  // bytes iv = 2;
  if (this->iv().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->iv());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SrpClientKeyExchange::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SrpClientKeyExchange*>(&from));
}

void SrpClientKeyExchange::MergeFrom(const SrpClientKeyExchange& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SrpClientKeyExchange)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.a().size() > 0) {

    a_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.a_);
  }
  if (from.iv().size() > 0) {

    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
}

void SrpClientKeyExchange::CopyFrom(const SrpClientKeyExchange& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SrpClientKeyExchange)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SrpClientKeyExchange::IsInitialized() const {
  return true;
}

void SrpClientKeyExchange::Swap(SrpClientKeyExchange* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SrpClientKeyExchange::InternalSwap(SrpClientKeyExchange* other) {
  a_.Swap(&other->a_);
  iv_.Swap(&other->iv_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SrpClientKeyExchange::GetTypeName() const {
  return "proto.SrpClientKeyExchange";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SrpClientKeyExchange

// bytes A = 1;
void SrpClientKeyExchange::clear_a() {
  a_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SrpClientKeyExchange::a() const {
  // @@protoc_insertion_point(field_get:proto.SrpClientKeyExchange.A)
  return a_.GetNoArena();
}
void SrpClientKeyExchange::set_a(const ::std::string& value) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SrpClientKeyExchange.A)
}
#if LANG_CXX11
void SrpClientKeyExchange::set_a(::std::string&& value) {
  
  a_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SrpClientKeyExchange.A)
}
#endif
void SrpClientKeyExchange::set_a(const char* value) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SrpClientKeyExchange.A)
}
void SrpClientKeyExchange::set_a(const void* value, size_t size) {
  
  a_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SrpClientKeyExchange.A)
}
::std::string* SrpClientKeyExchange::mutable_a() {
  
  // @@protoc_insertion_point(field_mutable:proto.SrpClientKeyExchange.A)
  return a_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SrpClientKeyExchange::release_a() {
  // @@protoc_insertion_point(field_release:proto.SrpClientKeyExchange.A)
  
  return a_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SrpClientKeyExchange::set_allocated_a(::std::string* a) {
  if (a != NULL) {
    
  } else {
    
  }
  a_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), a);
  // @@protoc_insertion_point(field_set_allocated:proto.SrpClientKeyExchange.A)
}

// bytes iv = 2;
void SrpClientKeyExchange::clear_iv() {
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SrpClientKeyExchange::iv() const {
  // @@protoc_insertion_point(field_get:proto.SrpClientKeyExchange.iv)
  return iv_.GetNoArena();
}
void SrpClientKeyExchange::set_iv(const ::std::string& value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SrpClientKeyExchange.iv)
}
#if LANG_CXX11
void SrpClientKeyExchange::set_iv(::std::string&& value) {
  
  iv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SrpClientKeyExchange.iv)
}
#endif
void SrpClientKeyExchange::set_iv(const char* value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SrpClientKeyExchange.iv)
}
void SrpClientKeyExchange::set_iv(const void* value, size_t size) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SrpClientKeyExchange.iv)
}
::std::string* SrpClientKeyExchange::mutable_iv() {
  
  // @@protoc_insertion_point(field_mutable:proto.SrpClientKeyExchange.iv)
  return iv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SrpClientKeyExchange::release_iv() {
  // @@protoc_insertion_point(field_release:proto.SrpClientKeyExchange.iv)
  
  return iv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SrpClientKeyExchange::set_allocated_iv(::std::string* iv) {
  if (iv != NULL) {
    
  } else {
    
  }
  iv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:proto.SrpClientKeyExchange.iv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionChallenge::kVersionFieldNumber;
const int SessionChallenge::kSessionTypesFieldNumber;
const int SessionChallenge::kCpuCoresFieldNumber;
const int SessionChallenge::kOsNameFieldNumber;
const int SessionChallenge::kComputerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionChallenge::SessionChallenge()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_key_5fexchange_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SessionChallenge)
}
SessionChallenge::SessionChallenge(const SessionChallenge& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  os_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.os_name().size() > 0) {
    os_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_name_);
  }
  computer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.computer_name().size() > 0) {
    computer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.computer_name_);
  }
  if (from.has_version()) {
    version_ = new ::proto::Version(*from.version_);
  } else {
    version_ = NULL;
  }
  ::memcpy(&session_types_, &from.session_types_,
    reinterpret_cast<char*>(&cpu_cores_) -
    reinterpret_cast<char*>(&session_types_) + sizeof(cpu_cores_));
  // @@protoc_insertion_point(copy_constructor:proto.SessionChallenge)
}

void SessionChallenge::SharedCtor() {
  os_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  computer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, reinterpret_cast<char*>(&cpu_cores_) -
    reinterpret_cast<char*>(&version_) + sizeof(cpu_cores_));
  _cached_size_ = 0;
}

SessionChallenge::~SessionChallenge() {
  // @@protoc_insertion_point(destructor:proto.SessionChallenge)
  SharedDtor();
}

void SessionChallenge::SharedDtor() {
  os_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  computer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete version_;
  }
}

void SessionChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionChallenge& SessionChallenge::default_instance() {
  protobuf_key_5fexchange_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionChallenge* SessionChallenge::New(::google::protobuf::Arena* arena) const {
  SessionChallenge* n = new SessionChallenge;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SessionChallenge)
  os_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  computer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  ::memset(&session_types_, 0, reinterpret_cast<char*>(&cpu_cores_) -
    reinterpret_cast<char*>(&session_types_) + sizeof(cpu_cores_));
}

bool SessionChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SessionChallenge)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Version version = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_types = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_types_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cpu_cores = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_cores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string os_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->os_name().data(), this->os_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.SessionChallenge.os_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string computer_name = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_computer_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->computer_name().data(), this->computer_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.SessionChallenge.computer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SessionChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SessionChallenge)
  return false;
#undef DO_
}

void SessionChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SessionChallenge)
  // .proto.Version version = 1;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->version_, output);
  }

  // uint32 session_types = 2;
  if (this->session_types() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_types(), output);
  }

  // uint32 cpu_cores = 3;
  if (this->cpu_cores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cpu_cores(), output);
  }

  // string os_name = 4;
  if (this->os_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->os_name().data(), this->os_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SessionChallenge.os_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->os_name(), output);
  }

  // string computer_name = 5;
  if (this->computer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->computer_name().data(), this->computer_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SessionChallenge.computer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->computer_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.SessionChallenge)
}

size_t SessionChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SessionChallenge)
  size_t total_size = 0;

  // string os_name = 4;
  if (this->os_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->os_name());
  }

  // string computer_name = 5;
  if (this->computer_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->computer_name());
  }

  // .proto.Version version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->version_);
  }

  // uint32 session_types = 2;
  if (this->session_types() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_types());
  }

  // uint32 cpu_cores = 3;
  if (this->cpu_cores() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cpu_cores());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionChallenge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionChallenge*>(&from));
}

void SessionChallenge::MergeFrom(const SessionChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SessionChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.os_name().size() > 0) {

    os_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_name_);
  }
  if (from.computer_name().size() > 0) {

    computer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.computer_name_);
  }
  if (from.has_version()) {
    mutable_version()->::proto::Version::MergeFrom(from.version());
  }
  if (from.session_types() != 0) {
    set_session_types(from.session_types());
  }
  if (from.cpu_cores() != 0) {
    set_cpu_cores(from.cpu_cores());
  }
}

void SessionChallenge::CopyFrom(const SessionChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SessionChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionChallenge::IsInitialized() const {
  return true;
}

void SessionChallenge::Swap(SessionChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionChallenge::InternalSwap(SessionChallenge* other) {
  os_name_.Swap(&other->os_name_);
  computer_name_.Swap(&other->computer_name_);
  std::swap(version_, other->version_);
  std::swap(session_types_, other->session_types_);
  std::swap(cpu_cores_, other->cpu_cores_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SessionChallenge::GetTypeName() const {
  return "proto.SessionChallenge";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionChallenge

// .proto.Version version = 1;
bool SessionChallenge::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
void SessionChallenge::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) delete version_;
  version_ = NULL;
}
const ::proto::Version& SessionChallenge::version() const {
  // @@protoc_insertion_point(field_get:proto.SessionChallenge.version)
  return version_ != NULL ? *version_
                         : *::proto::Version::internal_default_instance();
}
::proto::Version* SessionChallenge::mutable_version() {
  
  if (version_ == NULL) {
    version_ = new ::proto::Version;
  }
  // @@protoc_insertion_point(field_mutable:proto.SessionChallenge.version)
  return version_;
}
::proto::Version* SessionChallenge::release_version() {
  // @@protoc_insertion_point(field_release:proto.SessionChallenge.version)
  
  ::proto::Version* temp = version_;
  version_ = NULL;
  return temp;
}
void SessionChallenge::set_allocated_version(::proto::Version* version) {
  delete version_;
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SessionChallenge.version)
}

// uint32 session_types = 2;
void SessionChallenge::clear_session_types() {
  session_types_ = 0u;
}
::google::protobuf::uint32 SessionChallenge::session_types() const {
  // @@protoc_insertion_point(field_get:proto.SessionChallenge.session_types)
  return session_types_;
}
void SessionChallenge::set_session_types(::google::protobuf::uint32 value) {
  
  session_types_ = value;
  // @@protoc_insertion_point(field_set:proto.SessionChallenge.session_types)
}

// uint32 cpu_cores = 3;
void SessionChallenge::clear_cpu_cores() {
  cpu_cores_ = 0u;
}
::google::protobuf::uint32 SessionChallenge::cpu_cores() const {
  // @@protoc_insertion_point(field_get:proto.SessionChallenge.cpu_cores)
  return cpu_cores_;
}
void SessionChallenge::set_cpu_cores(::google::protobuf::uint32 value) {
  
  cpu_cores_ = value;
  // @@protoc_insertion_point(field_set:proto.SessionChallenge.cpu_cores)
}

// string os_name = 4;
void SessionChallenge::clear_os_name() {
  os_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SessionChallenge::os_name() const {
  // @@protoc_insertion_point(field_get:proto.SessionChallenge.os_name)
  return os_name_.GetNoArena();
}
void SessionChallenge::set_os_name(const ::std::string& value) {
  
  os_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SessionChallenge.os_name)
}
#if LANG_CXX11
void SessionChallenge::set_os_name(::std::string&& value) {
  
  os_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SessionChallenge.os_name)
}
#endif
void SessionChallenge::set_os_name(const char* value) {
  
  os_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SessionChallenge.os_name)
}
void SessionChallenge::set_os_name(const char* value, size_t size) {
  
  os_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SessionChallenge.os_name)
}
::std::string* SessionChallenge::mutable_os_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.SessionChallenge.os_name)
  return os_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionChallenge::release_os_name() {
  // @@protoc_insertion_point(field_release:proto.SessionChallenge.os_name)
  
  return os_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionChallenge::set_allocated_os_name(::std::string* os_name) {
  if (os_name != NULL) {
    
  } else {
    
  }
  os_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_name);
  // @@protoc_insertion_point(field_set_allocated:proto.SessionChallenge.os_name)
}

// string computer_name = 5;
void SessionChallenge::clear_computer_name() {
  computer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SessionChallenge::computer_name() const {
  // @@protoc_insertion_point(field_get:proto.SessionChallenge.computer_name)
  return computer_name_.GetNoArena();
}
void SessionChallenge::set_computer_name(const ::std::string& value) {
  
  computer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SessionChallenge.computer_name)
}
#if LANG_CXX11
void SessionChallenge::set_computer_name(::std::string&& value) {
  
  computer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SessionChallenge.computer_name)
}
#endif
void SessionChallenge::set_computer_name(const char* value) {
  
  computer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SessionChallenge.computer_name)
}
void SessionChallenge::set_computer_name(const char* value, size_t size) {
  
  computer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SessionChallenge.computer_name)
}
::std::string* SessionChallenge::mutable_computer_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.SessionChallenge.computer_name)
  return computer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionChallenge::release_computer_name() {
  // @@protoc_insertion_point(field_release:proto.SessionChallenge.computer_name)
  
  return computer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionChallenge::set_allocated_computer_name(::std::string* computer_name) {
  if (computer_name != NULL) {
    
  } else {
    
  }
  computer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), computer_name);
  // @@protoc_insertion_point(field_set_allocated:proto.SessionChallenge.computer_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionResponse::kVersionFieldNumber;
const int SessionResponse::kSessionTypeFieldNumber;
const int SessionResponse::kCpuCoresFieldNumber;
const int SessionResponse::kOsNameFieldNumber;
const int SessionResponse::kComputerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionResponse::SessionResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_key_5fexchange_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SessionResponse)
}
SessionResponse::SessionResponse(const SessionResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  os_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.os_name().size() > 0) {
    os_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_name_);
  }
  computer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.computer_name().size() > 0) {
    computer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.computer_name_);
  }
  if (from.has_version()) {
    version_ = new ::proto::Version(*from.version_);
  } else {
    version_ = NULL;
  }
  ::memcpy(&session_type_, &from.session_type_,
    reinterpret_cast<char*>(&cpu_cores_) -
    reinterpret_cast<char*>(&session_type_) + sizeof(cpu_cores_));
  // @@protoc_insertion_point(copy_constructor:proto.SessionResponse)
}

void SessionResponse::SharedCtor() {
  os_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  computer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, reinterpret_cast<char*>(&cpu_cores_) -
    reinterpret_cast<char*>(&version_) + sizeof(cpu_cores_));
  _cached_size_ = 0;
}

SessionResponse::~SessionResponse() {
  // @@protoc_insertion_point(destructor:proto.SessionResponse)
  SharedDtor();
}

void SessionResponse::SharedDtor() {
  os_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  computer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete version_;
  }
}

void SessionResponse::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionResponse& SessionResponse::default_instance() {
  protobuf_key_5fexchange_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionResponse* SessionResponse::New(::google::protobuf::Arena* arena) const {
  SessionResponse* n = new SessionResponse;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SessionResponse)
  os_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  computer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  ::memset(&session_type_, 0, reinterpret_cast<char*>(&cpu_cores_) -
    reinterpret_cast<char*>(&session_type_) + sizeof(cpu_cores_));
}

bool SessionResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SessionResponse)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Version version = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 session_type = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &session_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cpu_cores = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cpu_cores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string os_name = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->os_name().data(), this->os_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.SessionResponse.os_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string computer_name = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_computer_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->computer_name().data(), this->computer_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.SessionResponse.computer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SessionResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SessionResponse)
  return false;
#undef DO_
}

void SessionResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SessionResponse)
  // .proto.Version version = 1;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->version_, output);
  }

  // uint32 session_type = 2;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->session_type(), output);
  }

  // uint32 cpu_cores = 3;
  if (this->cpu_cores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->cpu_cores(), output);
  }

  // string os_name = 4;
  if (this->os_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->os_name().data(), this->os_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SessionResponse.os_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->os_name(), output);
  }

  // string computer_name = 5;
  if (this->computer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->computer_name().data(), this->computer_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.SessionResponse.computer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->computer_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.SessionResponse)
}

size_t SessionResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SessionResponse)
  size_t total_size = 0;

  // string os_name = 4;
  if (this->os_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->os_name());
  }

  // string computer_name = 5;
  if (this->computer_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->computer_name());
  }

  // .proto.Version version = 1;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->version_);
  }

  // uint32 session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->session_type());
  }

  // uint32 cpu_cores = 3;
  if (this->cpu_cores() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cpu_cores());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionResponse*>(&from));
}

void SessionResponse::MergeFrom(const SessionResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SessionResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.os_name().size() > 0) {

    os_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_name_);
  }
  if (from.computer_name().size() > 0) {

    computer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.computer_name_);
  }
  if (from.has_version()) {
    mutable_version()->::proto::Version::MergeFrom(from.version());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
  if (from.cpu_cores() != 0) {
    set_cpu_cores(from.cpu_cores());
  }
}

void SessionResponse::CopyFrom(const SessionResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SessionResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionResponse::IsInitialized() const {
  return true;
}

void SessionResponse::Swap(SessionResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionResponse::InternalSwap(SessionResponse* other) {
  os_name_.Swap(&other->os_name_);
  computer_name_.Swap(&other->computer_name_);
  std::swap(version_, other->version_);
  std::swap(session_type_, other->session_type_);
  std::swap(cpu_cores_, other->cpu_cores_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SessionResponse::GetTypeName() const {
  return "proto.SessionResponse";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionResponse

// .proto.Version version = 1;
bool SessionResponse::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
void SessionResponse::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) delete version_;
  version_ = NULL;
}
const ::proto::Version& SessionResponse::version() const {
  // @@protoc_insertion_point(field_get:proto.SessionResponse.version)
  return version_ != NULL ? *version_
                         : *::proto::Version::internal_default_instance();
}
::proto::Version* SessionResponse::mutable_version() {
  
  if (version_ == NULL) {
    version_ = new ::proto::Version;
  }
  // @@protoc_insertion_point(field_mutable:proto.SessionResponse.version)
  return version_;
}
::proto::Version* SessionResponse::release_version() {
  // @@protoc_insertion_point(field_release:proto.SessionResponse.version)
  
  ::proto::Version* temp = version_;
  version_ = NULL;
  return temp;
}
void SessionResponse::set_allocated_version(::proto::Version* version) {
  delete version_;
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SessionResponse.version)
}

// uint32 session_type = 2;
void SessionResponse::clear_session_type() {
  session_type_ = 0u;
}
::google::protobuf::uint32 SessionResponse::session_type() const {
  // @@protoc_insertion_point(field_get:proto.SessionResponse.session_type)
  return session_type_;
}
void SessionResponse::set_session_type(::google::protobuf::uint32 value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:proto.SessionResponse.session_type)
}

// uint32 cpu_cores = 3;
void SessionResponse::clear_cpu_cores() {
  cpu_cores_ = 0u;
}
::google::protobuf::uint32 SessionResponse::cpu_cores() const {
  // @@protoc_insertion_point(field_get:proto.SessionResponse.cpu_cores)
  return cpu_cores_;
}
void SessionResponse::set_cpu_cores(::google::protobuf::uint32 value) {
  
  cpu_cores_ = value;
  // @@protoc_insertion_point(field_set:proto.SessionResponse.cpu_cores)
}

// string os_name = 4;
void SessionResponse::clear_os_name() {
  os_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SessionResponse::os_name() const {
  // @@protoc_insertion_point(field_get:proto.SessionResponse.os_name)
  return os_name_.GetNoArena();
}
void SessionResponse::set_os_name(const ::std::string& value) {
  
  os_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SessionResponse.os_name)
}
#if LANG_CXX11
void SessionResponse::set_os_name(::std::string&& value) {
  
  os_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SessionResponse.os_name)
}
#endif
void SessionResponse::set_os_name(const char* value) {
  
  os_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SessionResponse.os_name)
}
void SessionResponse::set_os_name(const char* value, size_t size) {
  
  os_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SessionResponse.os_name)
}
::std::string* SessionResponse::mutable_os_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.SessionResponse.os_name)
  return os_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionResponse::release_os_name() {
  // @@protoc_insertion_point(field_release:proto.SessionResponse.os_name)
  
  return os_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionResponse::set_allocated_os_name(::std::string* os_name) {
  if (os_name != NULL) {
    
  } else {
    
  }
  os_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_name);
  // @@protoc_insertion_point(field_set_allocated:proto.SessionResponse.os_name)
}

// string computer_name = 5;
void SessionResponse::clear_computer_name() {
  computer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& SessionResponse::computer_name() const {
  // @@protoc_insertion_point(field_get:proto.SessionResponse.computer_name)
  return computer_name_.GetNoArena();
}
void SessionResponse::set_computer_name(const ::std::string& value) {
  
  computer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.SessionResponse.computer_name)
}
#if LANG_CXX11
void SessionResponse::set_computer_name(::std::string&& value) {
  
  computer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.SessionResponse.computer_name)
}
#endif
void SessionResponse::set_computer_name(const char* value) {
  
  computer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.SessionResponse.computer_name)
}
void SessionResponse::set_computer_name(const char* value, size_t size) {
  
  computer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.SessionResponse.computer_name)
}
::std::string* SessionResponse::mutable_computer_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.SessionResponse.computer_name)
  return computer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* SessionResponse::release_computer_name() {
  // @@protoc_insertion_point(field_release:proto.SessionResponse.computer_name)
  
  return computer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void SessionResponse::set_allocated_computer_name(::std::string* computer_name) {
  if (computer_name != NULL) {
    
  } else {
    
  }
  computer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), computer_name);
  // @@protoc_insertion_point(field_set_allocated:proto.SessionResponse.computer_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
