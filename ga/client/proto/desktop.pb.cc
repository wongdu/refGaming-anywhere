// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desktop.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "desktop.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace proto {
class KeyEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<KeyEvent> {
} _KeyEvent_default_instance_;
class MouseEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MouseEvent> {
} _MouseEvent_default_instance_;
class ClipboardEventDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClipboardEvent> {
} _ClipboardEvent_default_instance_;
class CursorShapeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<CursorShape> {
} _CursorShape_default_instance_;
class SizeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Size> {
} _Size_default_instance_;
class RectDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Rect> {
} _Rect_default_instance_;
class VideoPacketFormatDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoPacketFormat> {
} _VideoPacketFormat_default_instance_;
class VideoPacketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<VideoPacket> {
} _VideoPacket_default_instance_;
class AudioPacketDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AudioPacket> {
} _AudioPacket_default_instance_;
class DesktopExtensionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DesktopExtension> {
} _DesktopExtension_default_instance_;
class DesktopConfigRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DesktopConfigRequest> {
} _DesktopConfigRequest_default_instance_;
class DesktopConfigDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DesktopConfig> {
} _DesktopConfig_default_instance_;
class HostToClientDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HostToClient> {
} _HostToClient_default_instance_;
class ClientToHostDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ClientToHost> {
} _ClientToHost_default_instance_;

namespace protobuf_desktop_2eproto {


void TableStruct::Shutdown() {
  _KeyEvent_default_instance_.Shutdown();
  _MouseEvent_default_instance_.Shutdown();
  _ClipboardEvent_default_instance_.Shutdown();
  _CursorShape_default_instance_.Shutdown();
  _Size_default_instance_.Shutdown();
  _Rect_default_instance_.Shutdown();
  _VideoPacketFormat_default_instance_.Shutdown();
  _VideoPacket_default_instance_.Shutdown();
  _AudioPacket_default_instance_.Shutdown();
  _DesktopExtension_default_instance_.Shutdown();
  _DesktopConfigRequest_default_instance_.Shutdown();
  _DesktopConfig_default_instance_.Shutdown();
  _HostToClient_default_instance_.Shutdown();
  _ClientToHost_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _KeyEvent_default_instance_.DefaultConstruct();
  _MouseEvent_default_instance_.DefaultConstruct();
  _ClipboardEvent_default_instance_.DefaultConstruct();
  _CursorShape_default_instance_.DefaultConstruct();
  _Size_default_instance_.DefaultConstruct();
  _Rect_default_instance_.DefaultConstruct();
  _VideoPacketFormat_default_instance_.DefaultConstruct();
  _VideoPacket_default_instance_.DefaultConstruct();
  _AudioPacket_default_instance_.DefaultConstruct();
  _DesktopExtension_default_instance_.DefaultConstruct();
  _DesktopConfigRequest_default_instance_.DefaultConstruct();
  _DesktopConfig_default_instance_.DefaultConstruct();
  _HostToClient_default_instance_.DefaultConstruct();
  _ClientToHost_default_instance_.DefaultConstruct();
  _VideoPacketFormat_default_instance_.get_mutable()->video_rect_ = const_cast< ::proto::Rect*>(
      ::proto::Rect::internal_default_instance());
  _VideoPacketFormat_default_instance_.get_mutable()->screen_size_ = const_cast< ::proto::Size*>(
      ::proto::Size::internal_default_instance());
  _VideoPacket_default_instance_.get_mutable()->format_ = const_cast< ::proto::VideoPacketFormat*>(
      ::proto::VideoPacketFormat::internal_default_instance());
  _HostToClient_default_instance_.get_mutable()->video_packet_ = const_cast< ::proto::VideoPacket*>(
      ::proto::VideoPacket::internal_default_instance());
  _HostToClient_default_instance_.get_mutable()->audio_packet_ = const_cast< ::proto::AudioPacket*>(
      ::proto::AudioPacket::internal_default_instance());
  _HostToClient_default_instance_.get_mutable()->cursor_shape_ = const_cast< ::proto::CursorShape*>(
      ::proto::CursorShape::internal_default_instance());
  _HostToClient_default_instance_.get_mutable()->clipboard_event_ = const_cast< ::proto::ClipboardEvent*>(
      ::proto::ClipboardEvent::internal_default_instance());
  _HostToClient_default_instance_.get_mutable()->extension_ = const_cast< ::proto::DesktopExtension*>(
      ::proto::DesktopExtension::internal_default_instance());
  _HostToClient_default_instance_.get_mutable()->config_request_ = const_cast< ::proto::DesktopConfigRequest*>(
      ::proto::DesktopConfigRequest::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->mouse_event_ = const_cast< ::proto::MouseEvent*>(
      ::proto::MouseEvent::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->key_event_ = const_cast< ::proto::KeyEvent*>(
      ::proto::KeyEvent::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->clipboard_event_ = const_cast< ::proto::ClipboardEvent*>(
      ::proto::ClipboardEvent::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->extension_ = const_cast< ::proto::DesktopExtension*>(
      ::proto::DesktopExtension::internal_default_instance());
  _ClientToHost_default_instance_.get_mutable()->config_ = const_cast< ::proto::DesktopConfig*>(
      ::proto::DesktopConfig::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_desktop_2eproto

bool KeyEvent_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const KeyEvent_Flags KeyEvent::UNKNOWN;
const KeyEvent_Flags KeyEvent::CAPSLOCK;
const KeyEvent_Flags KeyEvent::NUMLOCK;
const KeyEvent_Flags KeyEvent::PRESSED;
const KeyEvent_Flags KeyEvent::Flags_MIN;
const KeyEvent_Flags KeyEvent::Flags_MAX;
const int KeyEvent::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool MouseEvent_ButtonMask_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const MouseEvent_ButtonMask MouseEvent::EMPTY;
const MouseEvent_ButtonMask MouseEvent::LEFT_BUTTON;
const MouseEvent_ButtonMask MouseEvent::MIDDLE_BUTTON;
const MouseEvent_ButtonMask MouseEvent::RIGHT_BUTTON;
const MouseEvent_ButtonMask MouseEvent::WHEEL_UP;
const MouseEvent_ButtonMask MouseEvent::WHEEL_DOWN;
const MouseEvent_ButtonMask MouseEvent::ButtonMask_MIN;
const MouseEvent_ButtonMask MouseEvent::ButtonMask_MAX;
const int MouseEvent::ButtonMask_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CursorShape_Flags_IsValid(int value) {
  switch (value) {
    case 0:
    case 64:
    case 128:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CursorShape_Flags CursorShape::UNKNOWN;
const CursorShape_Flags CursorShape::RESET_CACHE;
const CursorShape_Flags CursorShape::CACHE;
const CursorShape_Flags CursorShape::Flags_MIN;
const CursorShape_Flags CursorShape::Flags_MAX;
const int CursorShape::Flags_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AudioPacket_SamplingRate_IsValid(int value) {
  switch (value) {
    case 0:
    case 44100:
    case 48000:
    case 96000:
    case 192000:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AudioPacket_SamplingRate AudioPacket::SAMPLING_RATE_INVALID;
const AudioPacket_SamplingRate AudioPacket::SAMPLING_RATE_44100;
const AudioPacket_SamplingRate AudioPacket::SAMPLING_RATE_48000;
const AudioPacket_SamplingRate AudioPacket::SAMPLING_RATE_96000;
const AudioPacket_SamplingRate AudioPacket::SAMPLING_RATE_192000;
const AudioPacket_SamplingRate AudioPacket::SamplingRate_MIN;
const AudioPacket_SamplingRate AudioPacket::SamplingRate_MAX;
const int AudioPacket::SamplingRate_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AudioPacket_BytesPerSample_IsValid(int value) {
  switch (value) {
    case 0:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AudioPacket_BytesPerSample AudioPacket::BYTES_PER_SAMPLE_INVALID;
const AudioPacket_BytesPerSample AudioPacket::BYTES_PER_SAMPLE_2;
const AudioPacket_BytesPerSample AudioPacket::BytesPerSample_MIN;
const AudioPacket_BytesPerSample AudioPacket::BytesPerSample_MAX;
const int AudioPacket::BytesPerSample_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AudioPacket_Channels_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AudioPacket_Channels AudioPacket::CHANNELS_INVALID;
const AudioPacket_Channels AudioPacket::CHANNELS_MONO;
const AudioPacket_Channels AudioPacket::CHANNELS_STEREO;
const AudioPacket_Channels AudioPacket::CHANNELS_SURROUND;
const AudioPacket_Channels AudioPacket::CHANNELS_4_0;
const AudioPacket_Channels AudioPacket::CHANNELS_4_1;
const AudioPacket_Channels AudioPacket::CHANNELS_5_1;
const AudioPacket_Channels AudioPacket::CHANNELS_6_1;
const AudioPacket_Channels AudioPacket::CHANNELS_7_1;
const AudioPacket_Channels AudioPacket::Channels_MIN;
const AudioPacket_Channels AudioPacket::Channels_MAX;
const int AudioPacket::Channels_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool VideoEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
      return true;
    default:
      return false;
  }
}

bool AudioEncoding_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

bool DesktopFlags_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
    case 16:
    case 32:
    case 64:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int KeyEvent::kUsbKeycodeFieldNumber;
const int KeyEvent::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

KeyEvent::KeyEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.KeyEvent)
}
KeyEvent::KeyEvent(const KeyEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&usb_keycode_, &from.usb_keycode_,
    reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&usb_keycode_) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:proto.KeyEvent)
}

void KeyEvent::SharedCtor() {
  ::memset(&usb_keycode_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&usb_keycode_) + sizeof(flags_));
  _cached_size_ = 0;
}

KeyEvent::~KeyEvent() {
  // @@protoc_insertion_point(destructor:proto.KeyEvent)
  SharedDtor();
}

void KeyEvent::SharedDtor() {
}

void KeyEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const KeyEvent& KeyEvent::default_instance() {
  protobuf_desktop_2eproto::InitDefaults();
  return *internal_default_instance();
}

KeyEvent* KeyEvent::New(::google::protobuf::Arena* arena) const {
  KeyEvent* n = new KeyEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void KeyEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.KeyEvent)
  ::memset(&usb_keycode_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&usb_keycode_) + sizeof(flags_));
}

bool KeyEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.KeyEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 usb_keycode = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &usb_keycode_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.KeyEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.KeyEvent)
  return false;
#undef DO_
}

void KeyEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.KeyEvent)
  // uint32 usb_keycode = 1;
  if (this->usb_keycode() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->usb_keycode(), output);
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flags(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.KeyEvent)
}

size_t KeyEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.KeyEvent)
  size_t total_size = 0;

  // uint32 usb_keycode = 1;
  if (this->usb_keycode() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->usb_keycode());
  }

  // uint32 flags = 2;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KeyEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const KeyEvent*>(&from));
}

void KeyEvent::MergeFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.KeyEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.usb_keycode() != 0) {
    set_usb_keycode(from.usb_keycode());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void KeyEvent::CopyFrom(const KeyEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.KeyEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KeyEvent::IsInitialized() const {
  return true;
}

void KeyEvent::Swap(KeyEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void KeyEvent::InternalSwap(KeyEvent* other) {
  std::swap(usb_keycode_, other->usb_keycode_);
  std::swap(flags_, other->flags_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string KeyEvent::GetTypeName() const {
  return "proto.KeyEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyEvent

// uint32 usb_keycode = 1;
void KeyEvent::clear_usb_keycode() {
  usb_keycode_ = 0u;
}
::google::protobuf::uint32 KeyEvent::usb_keycode() const {
  // @@protoc_insertion_point(field_get:proto.KeyEvent.usb_keycode)
  return usb_keycode_;
}
void KeyEvent::set_usb_keycode(::google::protobuf::uint32 value) {
  
  usb_keycode_ = value;
  // @@protoc_insertion_point(field_set:proto.KeyEvent.usb_keycode)
}

// uint32 flags = 2;
void KeyEvent::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 KeyEvent::flags() const {
  // @@protoc_insertion_point(field_get:proto.KeyEvent.flags)
  return flags_;
}
void KeyEvent::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.KeyEvent.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MouseEvent::kMaskFieldNumber;
const int MouseEvent::kXFieldNumber;
const int MouseEvent::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MouseEvent::MouseEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.MouseEvent)
}
MouseEvent::MouseEvent(const MouseEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&mask_, &from.mask_,
    reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&mask_) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:proto.MouseEvent)
}

void MouseEvent::SharedCtor() {
  ::memset(&mask_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&mask_) + sizeof(y_));
  _cached_size_ = 0;
}

MouseEvent::~MouseEvent() {
  // @@protoc_insertion_point(destructor:proto.MouseEvent)
  SharedDtor();
}

void MouseEvent::SharedDtor() {
}

void MouseEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MouseEvent& MouseEvent::default_instance() {
  protobuf_desktop_2eproto::InitDefaults();
  return *internal_default_instance();
}

MouseEvent* MouseEvent::New(::google::protobuf::Arena* arena) const {
  MouseEvent* n = new MouseEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MouseEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.MouseEvent)
  ::memset(&mask_, 0, reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&mask_) + sizeof(y_));
}

bool MouseEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.MouseEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 mask = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &mask_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 x = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.MouseEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.MouseEvent)
  return false;
#undef DO_
}

void MouseEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.MouseEvent)
  // uint32 mask = 1;
  if (this->mask() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->mask(), output);
  }

  // int32 x = 2;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x(), output);
  }

  // int32 y = 3;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.MouseEvent)
}

size_t MouseEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.MouseEvent)
  size_t total_size = 0;

  // uint32 mask = 1;
  if (this->mask() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->mask());
  }

  // int32 x = 2;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 3;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MouseEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MouseEvent*>(&from));
}

void MouseEvent::MergeFrom(const MouseEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.MouseEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.mask() != 0) {
    set_mask(from.mask());
  }
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void MouseEvent::CopyFrom(const MouseEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.MouseEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseEvent::IsInitialized() const {
  return true;
}

void MouseEvent::Swap(MouseEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MouseEvent::InternalSwap(MouseEvent* other) {
  std::swap(mask_, other->mask_);
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MouseEvent::GetTypeName() const {
  return "proto.MouseEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MouseEvent

// uint32 mask = 1;
void MouseEvent::clear_mask() {
  mask_ = 0u;
}
::google::protobuf::uint32 MouseEvent::mask() const {
  // @@protoc_insertion_point(field_get:proto.MouseEvent.mask)
  return mask_;
}
void MouseEvent::set_mask(::google::protobuf::uint32 value) {
  
  mask_ = value;
  // @@protoc_insertion_point(field_set:proto.MouseEvent.mask)
}

// int32 x = 2;
void MouseEvent::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 MouseEvent::x() const {
  // @@protoc_insertion_point(field_get:proto.MouseEvent.x)
  return x_;
}
void MouseEvent::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.MouseEvent.x)
}

// int32 y = 3;
void MouseEvent::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 MouseEvent::y() const {
  // @@protoc_insertion_point(field_get:proto.MouseEvent.y)
  return y_;
}
void MouseEvent::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.MouseEvent.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClipboardEvent::kMimeTypeFieldNumber;
const int ClipboardEvent::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClipboardEvent::ClipboardEvent()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ClipboardEvent)
}
ClipboardEvent::ClipboardEvent(const ClipboardEvent& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  mime_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mime_type().size() > 0) {
    mime_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.ClipboardEvent)
}

void ClipboardEvent::SharedCtor() {
  mime_type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

ClipboardEvent::~ClipboardEvent() {
  // @@protoc_insertion_point(destructor:proto.ClipboardEvent)
  SharedDtor();
}

void ClipboardEvent::SharedDtor() {
  mime_type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void ClipboardEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClipboardEvent& ClipboardEvent::default_instance() {
  protobuf_desktop_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClipboardEvent* ClipboardEvent::New(::google::protobuf::Arena* arena) const {
  ClipboardEvent* n = new ClipboardEvent;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClipboardEvent::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClipboardEvent)
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool ClipboardEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ClipboardEvent)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string mime_type = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mime_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mime_type().data(), this->mime_type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.ClipboardEvent.mime_type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ClipboardEvent)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ClipboardEvent)
  return false;
#undef DO_
}

void ClipboardEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ClipboardEvent)
  // string mime_type = 1;
  if (this->mime_type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mime_type().data(), this->mime_type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.ClipboardEvent.mime_type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->mime_type(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.ClipboardEvent)
}

size_t ClipboardEvent::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClipboardEvent)
  size_t total_size = 0;

  // string mime_type = 1;
  if (this->mime_type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mime_type());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClipboardEvent::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClipboardEvent*>(&from));
}

void ClipboardEvent::MergeFrom(const ClipboardEvent& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ClipboardEvent)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.mime_type().size() > 0) {

    mime_type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mime_type_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void ClipboardEvent::CopyFrom(const ClipboardEvent& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClipboardEvent)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClipboardEvent::IsInitialized() const {
  return true;
}

void ClipboardEvent::Swap(ClipboardEvent* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClipboardEvent::InternalSwap(ClipboardEvent* other) {
  mime_type_.Swap(&other->mime_type_);
  data_.Swap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClipboardEvent::GetTypeName() const {
  return "proto.ClipboardEvent";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClipboardEvent

// string mime_type = 1;
void ClipboardEvent::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClipboardEvent::mime_type() const {
  // @@protoc_insertion_point(field_get:proto.ClipboardEvent.mime_type)
  return mime_type_.GetNoArena();
}
void ClipboardEvent::set_mime_type(const ::std::string& value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ClipboardEvent.mime_type)
}
#if LANG_CXX11
void ClipboardEvent::set_mime_type(::std::string&& value) {
  
  mime_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ClipboardEvent.mime_type)
}
#endif
void ClipboardEvent::set_mime_type(const char* value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ClipboardEvent.mime_type)
}
void ClipboardEvent::set_mime_type(const char* value, size_t size) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ClipboardEvent.mime_type)
}
::std::string* ClipboardEvent::mutable_mime_type() {
  
  // @@protoc_insertion_point(field_mutable:proto.ClipboardEvent.mime_type)
  return mime_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClipboardEvent::release_mime_type() {
  // @@protoc_insertion_point(field_release:proto.ClipboardEvent.mime_type)
  
  return mime_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClipboardEvent::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != NULL) {
    
  } else {
    
  }
  mime_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:proto.ClipboardEvent.mime_type)
}

// bytes data = 2;
void ClipboardEvent::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& ClipboardEvent::data() const {
  // @@protoc_insertion_point(field_get:proto.ClipboardEvent.data)
  return data_.GetNoArena();
}
void ClipboardEvent::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ClipboardEvent.data)
}
#if LANG_CXX11
void ClipboardEvent::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ClipboardEvent.data)
}
#endif
void ClipboardEvent::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ClipboardEvent.data)
}
void ClipboardEvent::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ClipboardEvent.data)
}
::std::string* ClipboardEvent::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.ClipboardEvent.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* ClipboardEvent::release_data() {
  // @@protoc_insertion_point(field_release:proto.ClipboardEvent.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void ClipboardEvent::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.ClipboardEvent.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CursorShape::kFlagsFieldNumber;
const int CursorShape::kWidthFieldNumber;
const int CursorShape::kHeightFieldNumber;
const int CursorShape::kHotspotXFieldNumber;
const int CursorShape::kHotspotYFieldNumber;
const int CursorShape::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CursorShape::CursorShape()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.CursorShape)
}
CursorShape::CursorShape(const CursorShape& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&flags_, &from.flags_,
    reinterpret_cast<char*>(&hotspot_y_) -
    reinterpret_cast<char*>(&flags_) + sizeof(hotspot_y_));
  // @@protoc_insertion_point(copy_constructor:proto.CursorShape)
}

void CursorShape::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, reinterpret_cast<char*>(&hotspot_y_) -
    reinterpret_cast<char*>(&flags_) + sizeof(hotspot_y_));
  _cached_size_ = 0;
}

CursorShape::~CursorShape() {
  // @@protoc_insertion_point(destructor:proto.CursorShape)
  SharedDtor();
}

void CursorShape::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CursorShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const CursorShape& CursorShape::default_instance() {
  protobuf_desktop_2eproto::InitDefaults();
  return *internal_default_instance();
}

CursorShape* CursorShape::New(::google::protobuf::Arena* arena) const {
  CursorShape* n = new CursorShape;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CursorShape::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.CursorShape)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&flags_, 0, reinterpret_cast<char*>(&hotspot_y_) -
    reinterpret_cast<char*>(&flags_) + sizeof(hotspot_y_));
}

bool CursorShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.CursorShape)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flags = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hotspot_x = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotspot_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hotspot_y = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotspot_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.CursorShape)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.CursorShape)
  return false;
#undef DO_
}

void CursorShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.CursorShape)
  // uint32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  // int32 width = 2;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->width(), output);
  }

  // int32 height = 3;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->height(), output);
  }

  // int32 hotspot_x = 4;
  if (this->hotspot_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hotspot_x(), output);
  }

  // int32 hotspot_y = 5;
  if (this->hotspot_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hotspot_y(), output);
  }

  // bytes data = 6;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      6, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.CursorShape)
}

size_t CursorShape::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.CursorShape)
  size_t total_size = 0;

  // bytes data = 6;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // int32 width = 2;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 3;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 hotspot_x = 4;
  if (this->hotspot_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hotspot_x());
  }

  // int32 hotspot_y = 5;
  if (this->hotspot_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hotspot_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CursorShape::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CursorShape*>(&from));
}

void CursorShape::MergeFrom(const CursorShape& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.CursorShape)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.hotspot_x() != 0) {
    set_hotspot_x(from.hotspot_x());
  }
  if (from.hotspot_y() != 0) {
    set_hotspot_y(from.hotspot_y());
  }
}

void CursorShape::CopyFrom(const CursorShape& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.CursorShape)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CursorShape::IsInitialized() const {
  return true;
}

void CursorShape::Swap(CursorShape* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CursorShape::InternalSwap(CursorShape* other) {
  data_.Swap(&other->data_);
  std::swap(flags_, other->flags_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(hotspot_x_, other->hotspot_x_);
  std::swap(hotspot_y_, other->hotspot_y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string CursorShape::GetTypeName() const {
  return "proto.CursorShape";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CursorShape

// uint32 flags = 1;
void CursorShape::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 CursorShape::flags() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.flags)
  return flags_;
}
void CursorShape::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.flags)
}

// int32 width = 2;
void CursorShape::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 CursorShape::width() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.width)
  return width_;
}
void CursorShape::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.width)
}

// int32 height = 3;
void CursorShape::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 CursorShape::height() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.height)
  return height_;
}
void CursorShape::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.height)
}

// int32 hotspot_x = 4;
void CursorShape::clear_hotspot_x() {
  hotspot_x_ = 0;
}
::google::protobuf::int32 CursorShape::hotspot_x() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.hotspot_x)
  return hotspot_x_;
}
void CursorShape::set_hotspot_x(::google::protobuf::int32 value) {
  
  hotspot_x_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.hotspot_x)
}

// int32 hotspot_y = 5;
void CursorShape::clear_hotspot_y() {
  hotspot_y_ = 0;
}
::google::protobuf::int32 CursorShape::hotspot_y() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.hotspot_y)
  return hotspot_y_;
}
void CursorShape::set_hotspot_y(::google::protobuf::int32 value) {
  
  hotspot_y_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.hotspot_y)
}

// bytes data = 6;
void CursorShape::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& CursorShape::data() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.data)
  return data_.GetNoArena();
}
void CursorShape::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CursorShape.data)
}
#if LANG_CXX11
void CursorShape::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.CursorShape.data)
}
#endif
void CursorShape::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CursorShape.data)
}
void CursorShape::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CursorShape.data)
}
::std::string* CursorShape::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.CursorShape.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* CursorShape::release_data() {
  // @@protoc_insertion_point(field_release:proto.CursorShape.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void CursorShape::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.CursorShape.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Size::kWidthFieldNumber;
const int Size::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Size::Size()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Size)
}
Size::Size(const Size& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:proto.Size)
}

void Size::SharedCtor() {
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
  _cached_size_ = 0;
}

Size::~Size() {
  // @@protoc_insertion_point(destructor:proto.Size)
  SharedDtor();
}

void Size::SharedDtor() {
}

void Size::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Size& Size::default_instance() {
  protobuf_desktop_2eproto::InitDefaults();
  return *internal_default_instance();
}

Size* Size::New(::google::protobuf::Arena* arena) const {
  Size* n = new Size;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Size::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Size)
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
}

bool Size::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Size)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 width = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Size)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Size)
  return false;
#undef DO_
}

void Size::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Size)
  // int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Size)
}

size_t Size::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Size)
  size_t total_size = 0;

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Size::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Size*>(&from));
}

void Size::MergeFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Size)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Size::CopyFrom(const Size& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Size)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Size::IsInitialized() const {
  return true;
}

void Size::Swap(Size* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Size::InternalSwap(Size* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Size::GetTypeName() const {
  return "proto.Size";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Size

// int32 width = 1;
void Size::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 Size::width() const {
  // @@protoc_insertion_point(field_get:proto.Size.width)
  return width_;
}
void Size::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.Size.width)
}

// int32 height = 2;
void Size::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 Size::height() const {
  // @@protoc_insertion_point(field_get:proto.Size.height)
  return height_;
}
void Size::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.Size.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Rect::kXFieldNumber;
const int Rect::kYFieldNumber;
const int Rect::kWidthFieldNumber;
const int Rect::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Rect::Rect()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Rect)
}
Rect::Rect(const Rect& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:proto.Rect)
}

void Rect::SharedCtor() {
  ::memset(&x_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_) + sizeof(height_));
  _cached_size_ = 0;
}

Rect::~Rect() {
  // @@protoc_insertion_point(destructor:proto.Rect)
  SharedDtor();
}

void Rect::SharedDtor() {
}

void Rect::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Rect& Rect::default_instance() {
  protobuf_desktop_2eproto::InitDefaults();
  return *internal_default_instance();
}

Rect* Rect::New(::google::protobuf::Arena* arena) const {
  Rect* n = new Rect;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Rect::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Rect)
  ::memset(&x_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&x_) + sizeof(height_));
}

bool Rect::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Rect)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Rect)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Rect)
  return false;
#undef DO_
}

void Rect::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Rect)
  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Rect)
}

size_t Rect::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Rect)
  size_t total_size = 0;

  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Rect::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Rect*>(&from));
}

void Rect::MergeFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Rect)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void Rect::CopyFrom(const Rect& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Rect)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Rect::IsInitialized() const {
  return true;
}

void Rect::Swap(Rect* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Rect::InternalSwap(Rect* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Rect::GetTypeName() const {
  return "proto.Rect";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Rect

// int32 x = 1;
void Rect::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 Rect::x() const {
  // @@protoc_insertion_point(field_get:proto.Rect.x)
  return x_;
}
void Rect::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.Rect.x)
}

// int32 y = 2;
void Rect::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 Rect::y() const {
  // @@protoc_insertion_point(field_get:proto.Rect.y)
  return y_;
}
void Rect::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.Rect.y)
}

// int32 width = 3;
void Rect::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 Rect::width() const {
  // @@protoc_insertion_point(field_get:proto.Rect.width)
  return width_;
}
void Rect::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.Rect.width)
}

// int32 height = 4;
void Rect::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 Rect::height() const {
  // @@protoc_insertion_point(field_get:proto.Rect.height)
  return height_;
}
void Rect::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.Rect.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoPacketFormat::kVideoRectFieldNumber;
const int VideoPacketFormat::kScreenSizeFieldNumber;
const int VideoPacketFormat::kCapturerTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoPacketFormat::VideoPacketFormat()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.VideoPacketFormat)
}
VideoPacketFormat::VideoPacketFormat(const VideoPacketFormat& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_video_rect()) {
    video_rect_ = new ::proto::Rect(*from.video_rect_);
  } else {
    video_rect_ = NULL;
  }
  if (from.has_screen_size()) {
    screen_size_ = new ::proto::Size(*from.screen_size_);
  } else {
    screen_size_ = NULL;
  }
  capturer_type_ = from.capturer_type_;
  // @@protoc_insertion_point(copy_constructor:proto.VideoPacketFormat)
}

void VideoPacketFormat::SharedCtor() {
  ::memset(&video_rect_, 0, reinterpret_cast<char*>(&capturer_type_) -
    reinterpret_cast<char*>(&video_rect_) + sizeof(capturer_type_));
  _cached_size_ = 0;
}

VideoPacketFormat::~VideoPacketFormat() {
  // @@protoc_insertion_point(destructor:proto.VideoPacketFormat)
  SharedDtor();
}

void VideoPacketFormat::SharedDtor() {
  if (this != internal_default_instance()) {
    delete video_rect_;
  }
  if (this != internal_default_instance()) {
    delete screen_size_;
  }
}

void VideoPacketFormat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoPacketFormat& VideoPacketFormat::default_instance() {
  protobuf_desktop_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoPacketFormat* VideoPacketFormat::New(::google::protobuf::Arena* arena) const {
  VideoPacketFormat* n = new VideoPacketFormat;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoPacketFormat::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VideoPacketFormat)
  if (GetArenaNoVirtual() == NULL && video_rect_ != NULL) {
    delete video_rect_;
  }
  video_rect_ = NULL;
  if (GetArenaNoVirtual() == NULL && screen_size_ != NULL) {
    delete screen_size_;
  }
  screen_size_ = NULL;
  capturer_type_ = 0u;
}

bool VideoPacketFormat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.VideoPacketFormat)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Rect video_rect = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_rect()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Size screen_size = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screen_size()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 capturer_type = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capturer_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.VideoPacketFormat)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.VideoPacketFormat)
  return false;
#undef DO_
}

void VideoPacketFormat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.VideoPacketFormat)
  // .proto.Rect video_rect = 1;
  if (this->has_video_rect()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->video_rect_, output);
  }

  // .proto.Size screen_size = 3;
  if (this->has_screen_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->screen_size_, output);
  }

  // uint32 capturer_type = 4;
  if (this->capturer_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->capturer_type(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.VideoPacketFormat)
}

size_t VideoPacketFormat::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VideoPacketFormat)
  size_t total_size = 0;

  // .proto.Rect video_rect = 1;
  if (this->has_video_rect()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->video_rect_);
  }

  // .proto.Size screen_size = 3;
  if (this->has_screen_size()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->screen_size_);
  }

  // uint32 capturer_type = 4;
  if (this->capturer_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->capturer_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoPacketFormat::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoPacketFormat*>(&from));
}

void VideoPacketFormat::MergeFrom(const VideoPacketFormat& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.VideoPacketFormat)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_video_rect()) {
    mutable_video_rect()->::proto::Rect::MergeFrom(from.video_rect());
  }
  if (from.has_screen_size()) {
    mutable_screen_size()->::proto::Size::MergeFrom(from.screen_size());
  }
  if (from.capturer_type() != 0) {
    set_capturer_type(from.capturer_type());
  }
}

void VideoPacketFormat::CopyFrom(const VideoPacketFormat& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VideoPacketFormat)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoPacketFormat::IsInitialized() const {
  return true;
}

void VideoPacketFormat::Swap(VideoPacketFormat* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoPacketFormat::InternalSwap(VideoPacketFormat* other) {
  std::swap(video_rect_, other->video_rect_);
  std::swap(screen_size_, other->screen_size_);
  std::swap(capturer_type_, other->capturer_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VideoPacketFormat::GetTypeName() const {
  return "proto.VideoPacketFormat";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoPacketFormat

// .proto.Rect video_rect = 1;
bool VideoPacketFormat::has_video_rect() const {
  return this != internal_default_instance() && video_rect_ != NULL;
}
void VideoPacketFormat::clear_video_rect() {
  if (GetArenaNoVirtual() == NULL && video_rect_ != NULL) delete video_rect_;
  video_rect_ = NULL;
}
const ::proto::Rect& VideoPacketFormat::video_rect() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacketFormat.video_rect)
  return video_rect_ != NULL ? *video_rect_
                         : *::proto::Rect::internal_default_instance();
}
::proto::Rect* VideoPacketFormat::mutable_video_rect() {
  
  if (video_rect_ == NULL) {
    video_rect_ = new ::proto::Rect;
  }
  // @@protoc_insertion_point(field_mutable:proto.VideoPacketFormat.video_rect)
  return video_rect_;
}
::proto::Rect* VideoPacketFormat::release_video_rect() {
  // @@protoc_insertion_point(field_release:proto.VideoPacketFormat.video_rect)
  
  ::proto::Rect* temp = video_rect_;
  video_rect_ = NULL;
  return temp;
}
void VideoPacketFormat::set_allocated_video_rect(::proto::Rect* video_rect) {
  delete video_rect_;
  video_rect_ = video_rect;
  if (video_rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.VideoPacketFormat.video_rect)
}

// .proto.Size screen_size = 3;
bool VideoPacketFormat::has_screen_size() const {
  return this != internal_default_instance() && screen_size_ != NULL;
}
void VideoPacketFormat::clear_screen_size() {
  if (GetArenaNoVirtual() == NULL && screen_size_ != NULL) delete screen_size_;
  screen_size_ = NULL;
}
const ::proto::Size& VideoPacketFormat::screen_size() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacketFormat.screen_size)
  return screen_size_ != NULL ? *screen_size_
                         : *::proto::Size::internal_default_instance();
}
::proto::Size* VideoPacketFormat::mutable_screen_size() {
  
  if (screen_size_ == NULL) {
    screen_size_ = new ::proto::Size;
  }
  // @@protoc_insertion_point(field_mutable:proto.VideoPacketFormat.screen_size)
  return screen_size_;
}
::proto::Size* VideoPacketFormat::release_screen_size() {
  // @@protoc_insertion_point(field_release:proto.VideoPacketFormat.screen_size)
  
  ::proto::Size* temp = screen_size_;
  screen_size_ = NULL;
  return temp;
}
void VideoPacketFormat::set_allocated_screen_size(::proto::Size* screen_size) {
  delete screen_size_;
  screen_size_ = screen_size;
  if (screen_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.VideoPacketFormat.screen_size)
}

// uint32 capturer_type = 4;
void VideoPacketFormat::clear_capturer_type() {
  capturer_type_ = 0u;
}
::google::protobuf::uint32 VideoPacketFormat::capturer_type() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacketFormat.capturer_type)
  return capturer_type_;
}
void VideoPacketFormat::set_capturer_type(::google::protobuf::uint32 value) {
  
  capturer_type_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPacketFormat.capturer_type)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int VideoPacket::kEncodingFieldNumber;
const int VideoPacket::kFormatFieldNumber;
const int VideoPacket::kDirtyRectFieldNumber;
const int VideoPacket::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

VideoPacket::VideoPacket()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.VideoPacket)
}
VideoPacket::VideoPacket(const VideoPacket& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      dirty_rect_(from.dirty_rect_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_format()) {
    format_ = new ::proto::VideoPacketFormat(*from.format_);
  } else {
    format_ = NULL;
  }
  encoding_ = from.encoding_;
  // @@protoc_insertion_point(copy_constructor:proto.VideoPacket)
}

void VideoPacket::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&format_, 0, reinterpret_cast<char*>(&encoding_) -
    reinterpret_cast<char*>(&format_) + sizeof(encoding_));
  _cached_size_ = 0;
}

VideoPacket::~VideoPacket() {
  // @@protoc_insertion_point(destructor:proto.VideoPacket)
  SharedDtor();
}

void VideoPacket::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete format_;
  }
}

void VideoPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const VideoPacket& VideoPacket::default_instance() {
  protobuf_desktop_2eproto::InitDefaults();
  return *internal_default_instance();
}

VideoPacket* VideoPacket::New(::google::protobuf::Arena* arena) const {
  VideoPacket* n = new VideoPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void VideoPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.VideoPacket)
  dirty_rect_.Clear();
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && format_ != NULL) {
    delete format_;
  }
  format_ = NULL;
  encoding_ = 0;
}

bool VideoPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.VideoPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.VideoEncoding encoding = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::proto::VideoEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.VideoPacketFormat format = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_format()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.Rect dirty_rect = 3;
      case 3: {
        if (tag == 26u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dirty_rect()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // bytes data = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.VideoPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.VideoPacket)
  return false;
#undef DO_
}

void VideoPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.VideoPacket)
  // .proto.VideoEncoding encoding = 1;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->encoding(), output);
  }

  // .proto.VideoPacketFormat format = 2;
  if (this->has_format()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->format_, output);
  }

  // repeated .proto.Rect dirty_rect = 3;
  for (unsigned int i = 0, n = this->dirty_rect_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->dirty_rect(i), output);
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.VideoPacket)
}

size_t VideoPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.VideoPacket)
  size_t total_size = 0;

  // repeated .proto.Rect dirty_rect = 3;
  {
    unsigned int count = this->dirty_rect_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dirty_rect(i));
    }
  }

  // bytes data = 4;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // .proto.VideoPacketFormat format = 2;
  if (this->has_format()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->format_);
  }

  // .proto.VideoEncoding encoding = 1;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VideoPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const VideoPacket*>(&from));
}

void VideoPacket::MergeFrom(const VideoPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.VideoPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dirty_rect_.MergeFrom(from.dirty_rect_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_format()) {
    mutable_format()->::proto::VideoPacketFormat::MergeFrom(from.format());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
}

void VideoPacket::CopyFrom(const VideoPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.VideoPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VideoPacket::IsInitialized() const {
  return true;
}

void VideoPacket::Swap(VideoPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void VideoPacket::InternalSwap(VideoPacket* other) {
  dirty_rect_.UnsafeArenaSwap(&other->dirty_rect_);
  data_.Swap(&other->data_);
  std::swap(format_, other->format_);
  std::swap(encoding_, other->encoding_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string VideoPacket::GetTypeName() const {
  return "proto.VideoPacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// VideoPacket

// .proto.VideoEncoding encoding = 1;
void VideoPacket::clear_encoding() {
  encoding_ = 0;
}
::proto::VideoEncoding VideoPacket::encoding() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.encoding)
  return static_cast< ::proto::VideoEncoding >(encoding_);
}
void VideoPacket::set_encoding(::proto::VideoEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPacket.encoding)
}

// .proto.VideoPacketFormat format = 2;
bool VideoPacket::has_format() const {
  return this != internal_default_instance() && format_ != NULL;
}
void VideoPacket::clear_format() {
  if (GetArenaNoVirtual() == NULL && format_ != NULL) delete format_;
  format_ = NULL;
}
const ::proto::VideoPacketFormat& VideoPacket::format() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.format)
  return format_ != NULL ? *format_
                         : *::proto::VideoPacketFormat::internal_default_instance();
}
::proto::VideoPacketFormat* VideoPacket::mutable_format() {
  
  if (format_ == NULL) {
    format_ = new ::proto::VideoPacketFormat;
  }
  // @@protoc_insertion_point(field_mutable:proto.VideoPacket.format)
  return format_;
}
::proto::VideoPacketFormat* VideoPacket::release_format() {
  // @@protoc_insertion_point(field_release:proto.VideoPacket.format)
  
  ::proto::VideoPacketFormat* temp = format_;
  format_ = NULL;
  return temp;
}
void VideoPacket::set_allocated_format(::proto::VideoPacketFormat* format) {
  delete format_;
  format_ = format;
  if (format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.VideoPacket.format)
}

// repeated .proto.Rect dirty_rect = 3;
int VideoPacket::dirty_rect_size() const {
  return dirty_rect_.size();
}
void VideoPacket::clear_dirty_rect() {
  dirty_rect_.Clear();
}
const ::proto::Rect& VideoPacket::dirty_rect(int index) const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.dirty_rect)
  return dirty_rect_.Get(index);
}
::proto::Rect* VideoPacket::mutable_dirty_rect(int index) {
  // @@protoc_insertion_point(field_mutable:proto.VideoPacket.dirty_rect)
  return dirty_rect_.Mutable(index);
}
::proto::Rect* VideoPacket::add_dirty_rect() {
  // @@protoc_insertion_point(field_add:proto.VideoPacket.dirty_rect)
  return dirty_rect_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::Rect >*
VideoPacket::mutable_dirty_rect() {
  // @@protoc_insertion_point(field_mutable_list:proto.VideoPacket.dirty_rect)
  return &dirty_rect_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::Rect >&
VideoPacket::dirty_rect() const {
  // @@protoc_insertion_point(field_list:proto.VideoPacket.dirty_rect)
  return dirty_rect_;
}

// bytes data = 4;
void VideoPacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& VideoPacket::data() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.data)
  return data_.GetNoArena();
}
void VideoPacket::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.VideoPacket.data)
}
#if LANG_CXX11
void VideoPacket::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.VideoPacket.data)
}
#endif
void VideoPacket::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.VideoPacket.data)
}
void VideoPacket::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.VideoPacket.data)
}
::std::string* VideoPacket::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.VideoPacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* VideoPacket::release_data() {
  // @@protoc_insertion_point(field_release:proto.VideoPacket.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void VideoPacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.VideoPacket.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AudioPacket::kTimestampFieldNumber;
const int AudioPacket::kDataFieldNumber;
const int AudioPacket::kEncodingFieldNumber;
const int AudioPacket::kSamplingRateFieldNumber;
const int AudioPacket::kBytesPerSampleFieldNumber;
const int AudioPacket::kChannelsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AudioPacket::AudioPacket()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AudioPacket)
}
AudioPacket::AudioPacket(const AudioPacket& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&timestamp_, &from.timestamp_,
    reinterpret_cast<char*>(&channels_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(channels_));
  // @@protoc_insertion_point(copy_constructor:proto.AudioPacket)
}

void AudioPacket::SharedCtor() {
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&channels_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(channels_));
  _cached_size_ = 0;
}

AudioPacket::~AudioPacket() {
  // @@protoc_insertion_point(destructor:proto.AudioPacket)
  SharedDtor();
}

void AudioPacket::SharedDtor() {
}

void AudioPacket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AudioPacket& AudioPacket::default_instance() {
  protobuf_desktop_2eproto::InitDefaults();
  return *internal_default_instance();
}

AudioPacket* AudioPacket::New(::google::protobuf::Arena* arena) const {
  AudioPacket* n = new AudioPacket;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AudioPacket::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AudioPacket)
  data_.Clear();
  ::memset(&timestamp_, 0, reinterpret_cast<char*>(&channels_) -
    reinterpret_cast<char*>(&timestamp_) + sizeof(channels_));
}

bool AudioPacket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AudioPacket)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 timestamp = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timestamp_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated bytes data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AudioEncoding encoding = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encoding(static_cast< ::proto::AudioEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AudioPacket.SamplingRate sampling_rate = 4;
      case 4: {
        if (tag == 32u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_sampling_rate(static_cast< ::proto::AudioPacket_SamplingRate >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AudioPacket.BytesPerSample bytes_per_sample = 5;
      case 5: {
        if (tag == 40u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_bytes_per_sample(static_cast< ::proto::AudioPacket_BytesPerSample >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AudioPacket.Channels channels = 6;
      case 6: {
        if (tag == 48u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_channels(static_cast< ::proto::AudioPacket_Channels >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AudioPacket)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AudioPacket)
  return false;
#undef DO_
}

void AudioPacket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AudioPacket)
  // int32 timestamp = 1;
  if (this->timestamp() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->timestamp(), output);
  }

  // repeated bytes data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->data(i), output);
  }

  // .proto.AudioEncoding encoding = 3;
  if (this->encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->encoding(), output);
  }

  // .proto.AudioPacket.SamplingRate sampling_rate = 4;
  if (this->sampling_rate() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->sampling_rate(), output);
  }

  // .proto.AudioPacket.BytesPerSample bytes_per_sample = 5;
  if (this->bytes_per_sample() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->bytes_per_sample(), output);
  }

  // .proto.AudioPacket.Channels channels = 6;
  if (this->channels() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      6, this->channels(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.AudioPacket)
}

size_t AudioPacket::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AudioPacket)
  size_t total_size = 0;

  // repeated bytes data = 2;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->data_size());
  for (int i = 0; i < this->data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->data(i));
  }

  // int32 timestamp = 1;
  if (this->timestamp() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->timestamp());
  }

  // .proto.AudioEncoding encoding = 3;
  if (this->encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encoding());
  }

  // .proto.AudioPacket.SamplingRate sampling_rate = 4;
  if (this->sampling_rate() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->sampling_rate());
  }

  // .proto.AudioPacket.BytesPerSample bytes_per_sample = 5;
  if (this->bytes_per_sample() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->bytes_per_sample());
  }

  // .proto.AudioPacket.Channels channels = 6;
  if (this->channels() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->channels());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AudioPacket::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AudioPacket*>(&from));
}

void AudioPacket::MergeFrom(const AudioPacket& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AudioPacket)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.MergeFrom(from.data_);
  if (from.timestamp() != 0) {
    set_timestamp(from.timestamp());
  }
  if (from.encoding() != 0) {
    set_encoding(from.encoding());
  }
  if (from.sampling_rate() != 0) {
    set_sampling_rate(from.sampling_rate());
  }
  if (from.bytes_per_sample() != 0) {
    set_bytes_per_sample(from.bytes_per_sample());
  }
  if (from.channels() != 0) {
    set_channels(from.channels());
  }
}

void AudioPacket::CopyFrom(const AudioPacket& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AudioPacket)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AudioPacket::IsInitialized() const {
  return true;
}

void AudioPacket::Swap(AudioPacket* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AudioPacket::InternalSwap(AudioPacket* other) {
  data_.UnsafeArenaSwap(&other->data_);
  std::swap(timestamp_, other->timestamp_);
  std::swap(encoding_, other->encoding_);
  std::swap(sampling_rate_, other->sampling_rate_);
  std::swap(bytes_per_sample_, other->bytes_per_sample_);
  std::swap(channels_, other->channels_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AudioPacket::GetTypeName() const {
  return "proto.AudioPacket";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AudioPacket

// int32 timestamp = 1;
void AudioPacket::clear_timestamp() {
  timestamp_ = 0;
}
::google::protobuf::int32 AudioPacket::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.AudioPacket.timestamp)
  return timestamp_;
}
void AudioPacket::set_timestamp(::google::protobuf::int32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.AudioPacket.timestamp)
}

// repeated bytes data = 2;
int AudioPacket::data_size() const {
  return data_.size();
}
void AudioPacket::clear_data() {
  data_.Clear();
}
const ::std::string& AudioPacket::data(int index) const {
  // @@protoc_insertion_point(field_get:proto.AudioPacket.data)
  return data_.Get(index);
}
::std::string* AudioPacket::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AudioPacket.data)
  return data_.Mutable(index);
}
void AudioPacket::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.AudioPacket.data)
  data_.Mutable(index)->assign(value);
}
void AudioPacket::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.AudioPacket.data)
}
void AudioPacket::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.AudioPacket.data)
}
::std::string* AudioPacket::add_data() {
  // @@protoc_insertion_point(field_add_mutable:proto.AudioPacket.data)
  return data_.Add();
}
void AudioPacket::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.AudioPacket.data)
}
void AudioPacket::add_data(const char* value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.AudioPacket.data)
}
void AudioPacket::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.AudioPacket.data)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
AudioPacket::data() const {
  // @@protoc_insertion_point(field_list:proto.AudioPacket.data)
  return data_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
AudioPacket::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:proto.AudioPacket.data)
  return &data_;
}

// .proto.AudioEncoding encoding = 3;
void AudioPacket::clear_encoding() {
  encoding_ = 0;
}
::proto::AudioEncoding AudioPacket::encoding() const {
  // @@protoc_insertion_point(field_get:proto.AudioPacket.encoding)
  return static_cast< ::proto::AudioEncoding >(encoding_);
}
void AudioPacket::set_encoding(::proto::AudioEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:proto.AudioPacket.encoding)
}

// .proto.AudioPacket.SamplingRate sampling_rate = 4;
void AudioPacket::clear_sampling_rate() {
  sampling_rate_ = 0;
}
::proto::AudioPacket_SamplingRate AudioPacket::sampling_rate() const {
  // @@protoc_insertion_point(field_get:proto.AudioPacket.sampling_rate)
  return static_cast< ::proto::AudioPacket_SamplingRate >(sampling_rate_);
}
void AudioPacket::set_sampling_rate(::proto::AudioPacket_SamplingRate value) {
  
  sampling_rate_ = value;
  // @@protoc_insertion_point(field_set:proto.AudioPacket.sampling_rate)
}

// .proto.AudioPacket.BytesPerSample bytes_per_sample = 5;
void AudioPacket::clear_bytes_per_sample() {
  bytes_per_sample_ = 0;
}
::proto::AudioPacket_BytesPerSample AudioPacket::bytes_per_sample() const {
  // @@protoc_insertion_point(field_get:proto.AudioPacket.bytes_per_sample)
  return static_cast< ::proto::AudioPacket_BytesPerSample >(bytes_per_sample_);
}
void AudioPacket::set_bytes_per_sample(::proto::AudioPacket_BytesPerSample value) {
  
  bytes_per_sample_ = value;
  // @@protoc_insertion_point(field_set:proto.AudioPacket.bytes_per_sample)
}

// .proto.AudioPacket.Channels channels = 6;
void AudioPacket::clear_channels() {
  channels_ = 0;
}
::proto::AudioPacket_Channels AudioPacket::channels() const {
  // @@protoc_insertion_point(field_get:proto.AudioPacket.channels)
  return static_cast< ::proto::AudioPacket_Channels >(channels_);
}
void AudioPacket::set_channels(::proto::AudioPacket_Channels value) {
  
  channels_ = value;
  // @@protoc_insertion_point(field_set:proto.AudioPacket.channels)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DesktopExtension::kNameFieldNumber;
const int DesktopExtension::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DesktopExtension::DesktopExtension()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DesktopExtension)
}
DesktopExtension::DesktopExtension(const DesktopExtension& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.DesktopExtension)
}

void DesktopExtension::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

DesktopExtension::~DesktopExtension() {
  // @@protoc_insertion_point(destructor:proto.DesktopExtension)
  SharedDtor();
}

void DesktopExtension::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DesktopExtension::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DesktopExtension& DesktopExtension::default_instance() {
  protobuf_desktop_2eproto::InitDefaults();
  return *internal_default_instance();
}

DesktopExtension* DesktopExtension::New(::google::protobuf::Arena* arena) const {
  DesktopExtension* n = new DesktopExtension;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DesktopExtension::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DesktopExtension)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool DesktopExtension::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DesktopExtension)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.DesktopExtension.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DesktopExtension)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DesktopExtension)
  return false;
#undef DO_
}

void DesktopExtension::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DesktopExtension)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.DesktopExtension.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.DesktopExtension)
}

size_t DesktopExtension::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DesktopExtension)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // bytes data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DesktopExtension::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DesktopExtension*>(&from));
}

void DesktopExtension::MergeFrom(const DesktopExtension& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DesktopExtension)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
}

void DesktopExtension::CopyFrom(const DesktopExtension& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DesktopExtension)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesktopExtension::IsInitialized() const {
  return true;
}

void DesktopExtension::Swap(DesktopExtension* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DesktopExtension::InternalSwap(DesktopExtension* other) {
  name_.Swap(&other->name_);
  data_.Swap(&other->data_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DesktopExtension::GetTypeName() const {
  return "proto.DesktopExtension";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DesktopExtension

// string name = 1;
void DesktopExtension::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DesktopExtension::name() const {
  // @@protoc_insertion_point(field_get:proto.DesktopExtension.name)
  return name_.GetNoArena();
}
void DesktopExtension::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DesktopExtension.name)
}
#if LANG_CXX11
void DesktopExtension::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DesktopExtension.name)
}
#endif
void DesktopExtension::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DesktopExtension.name)
}
void DesktopExtension::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DesktopExtension.name)
}
::std::string* DesktopExtension::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.DesktopExtension.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DesktopExtension::release_name() {
  // @@protoc_insertion_point(field_release:proto.DesktopExtension.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DesktopExtension::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.DesktopExtension.name)
}

// bytes data = 2;
void DesktopExtension::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DesktopExtension::data() const {
  // @@protoc_insertion_point(field_get:proto.DesktopExtension.data)
  return data_.GetNoArena();
}
void DesktopExtension::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DesktopExtension.data)
}
#if LANG_CXX11
void DesktopExtension::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DesktopExtension.data)
}
#endif
void DesktopExtension::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DesktopExtension.data)
}
void DesktopExtension::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DesktopExtension.data)
}
::std::string* DesktopExtension::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.DesktopExtension.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DesktopExtension::release_data() {
  // @@protoc_insertion_point(field_release:proto.DesktopExtension.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DesktopExtension::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.DesktopExtension.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DesktopConfigRequest::kExtensionsFieldNumber;
const int DesktopConfigRequest::kVideoEncodingsFieldNumber;
const int DesktopConfigRequest::kAudioEncodingsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DesktopConfigRequest::DesktopConfigRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DesktopConfigRequest)
}
DesktopConfigRequest::DesktopConfigRequest(const DesktopConfigRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  extensions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.extensions().size() > 0) {
    extensions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extensions_);
  }
  ::memcpy(&video_encodings_, &from.video_encodings_,
    reinterpret_cast<char*>(&audio_encodings_) -
    reinterpret_cast<char*>(&video_encodings_) + sizeof(audio_encodings_));
  // @@protoc_insertion_point(copy_constructor:proto.DesktopConfigRequest)
}

void DesktopConfigRequest::SharedCtor() {
  extensions_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&video_encodings_, 0, reinterpret_cast<char*>(&audio_encodings_) -
    reinterpret_cast<char*>(&video_encodings_) + sizeof(audio_encodings_));
  _cached_size_ = 0;
}

DesktopConfigRequest::~DesktopConfigRequest() {
  // @@protoc_insertion_point(destructor:proto.DesktopConfigRequest)
  SharedDtor();
}

void DesktopConfigRequest::SharedDtor() {
  extensions_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void DesktopConfigRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DesktopConfigRequest& DesktopConfigRequest::default_instance() {
  protobuf_desktop_2eproto::InitDefaults();
  return *internal_default_instance();
}

DesktopConfigRequest* DesktopConfigRequest::New(::google::protobuf::Arena* arena) const {
  DesktopConfigRequest* n = new DesktopConfigRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DesktopConfigRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DesktopConfigRequest)
  extensions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&video_encodings_, 0, reinterpret_cast<char*>(&audio_encodings_) -
    reinterpret_cast<char*>(&video_encodings_) + sizeof(audio_encodings_));
}

bool DesktopConfigRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DesktopConfigRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string extensions = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_extensions()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->extensions().data(), this->extensions().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.DesktopConfigRequest.extensions"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 video_encodings = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &video_encodings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 audio_encodings = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &audio_encodings_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DesktopConfigRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DesktopConfigRequest)
  return false;
#undef DO_
}

void DesktopConfigRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DesktopConfigRequest)
  // string extensions = 1;
  if (this->extensions().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->extensions().data(), this->extensions().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.DesktopConfigRequest.extensions");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->extensions(), output);
  }

  // uint32 video_encodings = 2;
  if (this->video_encodings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->video_encodings(), output);
  }

  // uint32 audio_encodings = 3;
  if (this->audio_encodings() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->audio_encodings(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.DesktopConfigRequest)
}

size_t DesktopConfigRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DesktopConfigRequest)
  size_t total_size = 0;

  // string extensions = 1;
  if (this->extensions().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->extensions());
  }

  // uint32 video_encodings = 2;
  if (this->video_encodings() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->video_encodings());
  }

  // uint32 audio_encodings = 3;
  if (this->audio_encodings() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->audio_encodings());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DesktopConfigRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DesktopConfigRequest*>(&from));
}

void DesktopConfigRequest::MergeFrom(const DesktopConfigRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DesktopConfigRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.extensions().size() > 0) {

    extensions_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.extensions_);
  }
  if (from.video_encodings() != 0) {
    set_video_encodings(from.video_encodings());
  }
  if (from.audio_encodings() != 0) {
    set_audio_encodings(from.audio_encodings());
  }
}

void DesktopConfigRequest::CopyFrom(const DesktopConfigRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DesktopConfigRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesktopConfigRequest::IsInitialized() const {
  return true;
}

void DesktopConfigRequest::Swap(DesktopConfigRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DesktopConfigRequest::InternalSwap(DesktopConfigRequest* other) {
  extensions_.Swap(&other->extensions_);
  std::swap(video_encodings_, other->video_encodings_);
  std::swap(audio_encodings_, other->audio_encodings_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DesktopConfigRequest::GetTypeName() const {
  return "proto.DesktopConfigRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DesktopConfigRequest

// string extensions = 1;
void DesktopConfigRequest::clear_extensions() {
  extensions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& DesktopConfigRequest::extensions() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfigRequest.extensions)
  return extensions_.GetNoArena();
}
void DesktopConfigRequest::set_extensions(const ::std::string& value) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DesktopConfigRequest.extensions)
}
#if LANG_CXX11
void DesktopConfigRequest::set_extensions(::std::string&& value) {
  
  extensions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DesktopConfigRequest.extensions)
}
#endif
void DesktopConfigRequest::set_extensions(const char* value) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DesktopConfigRequest.extensions)
}
void DesktopConfigRequest::set_extensions(const char* value, size_t size) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DesktopConfigRequest.extensions)
}
::std::string* DesktopConfigRequest::mutable_extensions() {
  
  // @@protoc_insertion_point(field_mutable:proto.DesktopConfigRequest.extensions)
  return extensions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* DesktopConfigRequest::release_extensions() {
  // @@protoc_insertion_point(field_release:proto.DesktopConfigRequest.extensions)
  
  return extensions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void DesktopConfigRequest::set_allocated_extensions(::std::string* extensions) {
  if (extensions != NULL) {
    
  } else {
    
  }
  extensions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extensions);
  // @@protoc_insertion_point(field_set_allocated:proto.DesktopConfigRequest.extensions)
}

// uint32 video_encodings = 2;
void DesktopConfigRequest::clear_video_encodings() {
  video_encodings_ = 0u;
}
::google::protobuf::uint32 DesktopConfigRequest::video_encodings() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfigRequest.video_encodings)
  return video_encodings_;
}
void DesktopConfigRequest::set_video_encodings(::google::protobuf::uint32 value) {
  
  video_encodings_ = value;
  // @@protoc_insertion_point(field_set:proto.DesktopConfigRequest.video_encodings)
}

// uint32 audio_encodings = 3;
void DesktopConfigRequest::clear_audio_encodings() {
  audio_encodings_ = 0u;
}
::google::protobuf::uint32 DesktopConfigRequest::audio_encodings() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfigRequest.audio_encodings)
  return audio_encodings_;
}
void DesktopConfigRequest::set_audio_encodings(::google::protobuf::uint32 value) {
  
  audio_encodings_ = value;
  // @@protoc_insertion_point(field_set:proto.DesktopConfigRequest.audio_encodings)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DesktopConfig::kFlagsFieldNumber;
const int DesktopConfig::kVideoEncodingFieldNumber;
const int DesktopConfig::kUpdateIntervalFieldNumber;
const int DesktopConfig::kScaleFactorFieldNumber;
const int DesktopConfig::kAudioEncodingFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DesktopConfig::DesktopConfig()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.DesktopConfig)
}
DesktopConfig::DesktopConfig(const DesktopConfig& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&flags_, &from.flags_,
    reinterpret_cast<char*>(&audio_encoding_) -
    reinterpret_cast<char*>(&flags_) + sizeof(audio_encoding_));
  // @@protoc_insertion_point(copy_constructor:proto.DesktopConfig)
}

void DesktopConfig::SharedCtor() {
  ::memset(&flags_, 0, reinterpret_cast<char*>(&audio_encoding_) -
    reinterpret_cast<char*>(&flags_) + sizeof(audio_encoding_));
  _cached_size_ = 0;
}

DesktopConfig::~DesktopConfig() {
  // @@protoc_insertion_point(destructor:proto.DesktopConfig)
  SharedDtor();
}

void DesktopConfig::SharedDtor() {
}

void DesktopConfig::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DesktopConfig& DesktopConfig::default_instance() {
  protobuf_desktop_2eproto::InitDefaults();
  return *internal_default_instance();
}

DesktopConfig* DesktopConfig::New(::google::protobuf::Arena* arena) const {
  DesktopConfig* n = new DesktopConfig;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DesktopConfig::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.DesktopConfig)
  ::memset(&flags_, 0, reinterpret_cast<char*>(&audio_encoding_) -
    reinterpret_cast<char*>(&flags_) + sizeof(audio_encoding_));
}

bool DesktopConfig::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.DesktopConfig)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 flags = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.VideoEncoding video_encoding = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_video_encoding(static_cast< ::proto::VideoEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 update_interval = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 scale_factor = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &scale_factor_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AudioEncoding audio_encoding = 7;
      case 7: {
        if (tag == 56u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_audio_encoding(static_cast< ::proto::AudioEncoding >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.DesktopConfig)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.DesktopConfig)
  return false;
#undef DO_
}

void DesktopConfig::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.DesktopConfig)
  // uint32 flags = 1;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->flags(), output);
  }

  // .proto.VideoEncoding video_encoding = 2;
  if (this->video_encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->video_encoding(), output);
  }

  // uint32 update_interval = 4;
  if (this->update_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->update_interval(), output);
  }

  // uint32 scale_factor = 6;
  if (this->scale_factor() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->scale_factor(), output);
  }

  // .proto.AudioEncoding audio_encoding = 7;
  if (this->audio_encoding() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      7, this->audio_encoding(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.DesktopConfig)
}

size_t DesktopConfig::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.DesktopConfig)
  size_t total_size = 0;

  // uint32 flags = 1;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  // .proto.VideoEncoding video_encoding = 2;
  if (this->video_encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->video_encoding());
  }

  // uint32 update_interval = 4;
  if (this->update_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_interval());
  }

  // uint32 scale_factor = 6;
  if (this->scale_factor() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->scale_factor());
  }

  // .proto.AudioEncoding audio_encoding = 7;
  if (this->audio_encoding() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->audio_encoding());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DesktopConfig::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DesktopConfig*>(&from));
}

void DesktopConfig::MergeFrom(const DesktopConfig& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.DesktopConfig)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
  if (from.video_encoding() != 0) {
    set_video_encoding(from.video_encoding());
  }
  if (from.update_interval() != 0) {
    set_update_interval(from.update_interval());
  }
  if (from.scale_factor() != 0) {
    set_scale_factor(from.scale_factor());
  }
  if (from.audio_encoding() != 0) {
    set_audio_encoding(from.audio_encoding());
  }
}

void DesktopConfig::CopyFrom(const DesktopConfig& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.DesktopConfig)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesktopConfig::IsInitialized() const {
  return true;
}

void DesktopConfig::Swap(DesktopConfig* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DesktopConfig::InternalSwap(DesktopConfig* other) {
  std::swap(flags_, other->flags_);
  std::swap(video_encoding_, other->video_encoding_);
  std::swap(update_interval_, other->update_interval_);
  std::swap(scale_factor_, other->scale_factor_);
  std::swap(audio_encoding_, other->audio_encoding_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DesktopConfig::GetTypeName() const {
  return "proto.DesktopConfig";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DesktopConfig

// uint32 flags = 1;
void DesktopConfig::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 DesktopConfig::flags() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfig.flags)
  return flags_;
}
void DesktopConfig::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.DesktopConfig.flags)
}

// .proto.VideoEncoding video_encoding = 2;
void DesktopConfig::clear_video_encoding() {
  video_encoding_ = 0;
}
::proto::VideoEncoding DesktopConfig::video_encoding() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfig.video_encoding)
  return static_cast< ::proto::VideoEncoding >(video_encoding_);
}
void DesktopConfig::set_video_encoding(::proto::VideoEncoding value) {
  
  video_encoding_ = value;
  // @@protoc_insertion_point(field_set:proto.DesktopConfig.video_encoding)
}

// uint32 update_interval = 4;
void DesktopConfig::clear_update_interval() {
  update_interval_ = 0u;
}
::google::protobuf::uint32 DesktopConfig::update_interval() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfig.update_interval)
  return update_interval_;
}
void DesktopConfig::set_update_interval(::google::protobuf::uint32 value) {
  
  update_interval_ = value;
  // @@protoc_insertion_point(field_set:proto.DesktopConfig.update_interval)
}

// uint32 scale_factor = 6;
void DesktopConfig::clear_scale_factor() {
  scale_factor_ = 0u;
}
::google::protobuf::uint32 DesktopConfig::scale_factor() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfig.scale_factor)
  return scale_factor_;
}
void DesktopConfig::set_scale_factor(::google::protobuf::uint32 value) {
  
  scale_factor_ = value;
  // @@protoc_insertion_point(field_set:proto.DesktopConfig.scale_factor)
}

// .proto.AudioEncoding audio_encoding = 7;
void DesktopConfig::clear_audio_encoding() {
  audio_encoding_ = 0;
}
::proto::AudioEncoding DesktopConfig::audio_encoding() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfig.audio_encoding)
  return static_cast< ::proto::AudioEncoding >(audio_encoding_);
}
void DesktopConfig::set_audio_encoding(::proto::AudioEncoding value) {
  
  audio_encoding_ = value;
  // @@protoc_insertion_point(field_set:proto.DesktopConfig.audio_encoding)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostToClient::kVideoPacketFieldNumber;
const int HostToClient::kAudioPacketFieldNumber;
const int HostToClient::kCursorShapeFieldNumber;
const int HostToClient::kClipboardEventFieldNumber;
const int HostToClient::kExtensionFieldNumber;
const int HostToClient::kConfigRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostToClient::HostToClient()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HostToClient)
}
HostToClient::HostToClient(const HostToClient& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_video_packet()) {
    video_packet_ = new ::proto::VideoPacket(*from.video_packet_);
  } else {
    video_packet_ = NULL;
  }
  if (from.has_audio_packet()) {
    audio_packet_ = new ::proto::AudioPacket(*from.audio_packet_);
  } else {
    audio_packet_ = NULL;
  }
  if (from.has_cursor_shape()) {
    cursor_shape_ = new ::proto::CursorShape(*from.cursor_shape_);
  } else {
    cursor_shape_ = NULL;
  }
  if (from.has_clipboard_event()) {
    clipboard_event_ = new ::proto::ClipboardEvent(*from.clipboard_event_);
  } else {
    clipboard_event_ = NULL;
  }
  if (from.has_extension()) {
    extension_ = new ::proto::DesktopExtension(*from.extension_);
  } else {
    extension_ = NULL;
  }
  if (from.has_config_request()) {
    config_request_ = new ::proto::DesktopConfigRequest(*from.config_request_);
  } else {
    config_request_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.HostToClient)
}

void HostToClient::SharedCtor() {
  ::memset(&video_packet_, 0, reinterpret_cast<char*>(&config_request_) -
    reinterpret_cast<char*>(&video_packet_) + sizeof(config_request_));
  _cached_size_ = 0;
}

HostToClient::~HostToClient() {
  // @@protoc_insertion_point(destructor:proto.HostToClient)
  SharedDtor();
}

void HostToClient::SharedDtor() {
  if (this != internal_default_instance()) {
    delete video_packet_;
  }
  if (this != internal_default_instance()) {
    delete audio_packet_;
  }
  if (this != internal_default_instance()) {
    delete cursor_shape_;
  }
  if (this != internal_default_instance()) {
    delete clipboard_event_;
  }
  if (this != internal_default_instance()) {
    delete extension_;
  }
  if (this != internal_default_instance()) {
    delete config_request_;
  }
}

void HostToClient::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HostToClient& HostToClient::default_instance() {
  protobuf_desktop_2eproto::InitDefaults();
  return *internal_default_instance();
}

HostToClient* HostToClient::New(::google::protobuf::Arena* arena) const {
  HostToClient* n = new HostToClient;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostToClient::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HostToClient)
  if (GetArenaNoVirtual() == NULL && video_packet_ != NULL) {
    delete video_packet_;
  }
  video_packet_ = NULL;
  if (GetArenaNoVirtual() == NULL && audio_packet_ != NULL) {
    delete audio_packet_;
  }
  audio_packet_ = NULL;
  if (GetArenaNoVirtual() == NULL && cursor_shape_ != NULL) {
    delete cursor_shape_;
  }
  cursor_shape_ = NULL;
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) {
    delete clipboard_event_;
  }
  clipboard_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && extension_ != NULL) {
    delete extension_;
  }
  extension_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_request_ != NULL) {
    delete config_request_;
  }
  config_request_ = NULL;
}

bool HostToClient::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HostToClient)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.VideoPacket video_packet = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_video_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AudioPacket audio_packet = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.CursorShape cursor_shape = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cursor_shape()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ClipboardEvent clipboard_event = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clipboard_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.DesktopExtension extension = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.DesktopConfigRequest config_request = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HostToClient)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HostToClient)
  return false;
#undef DO_
}

void HostToClient::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HostToClient)
  // .proto.VideoPacket video_packet = 1;
  if (this->has_video_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->video_packet_, output);
  }

  // .proto.AudioPacket audio_packet = 2;
  if (this->has_audio_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->audio_packet_, output);
  }

  // .proto.CursorShape cursor_shape = 3;
  if (this->has_cursor_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->cursor_shape_, output);
  }

  // .proto.ClipboardEvent clipboard_event = 4;
  if (this->has_clipboard_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->clipboard_event_, output);
  }

  // .proto.DesktopExtension extension = 5;
  if (this->has_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->extension_, output);
  }

  // .proto.DesktopConfigRequest config_request = 6;
  if (this->has_config_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->config_request_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.HostToClient)
}

size_t HostToClient::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HostToClient)
  size_t total_size = 0;

  // .proto.VideoPacket video_packet = 1;
  if (this->has_video_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->video_packet_);
  }

  // .proto.AudioPacket audio_packet = 2;
  if (this->has_audio_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->audio_packet_);
  }

  // .proto.CursorShape cursor_shape = 3;
  if (this->has_cursor_shape()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->cursor_shape_);
  }

  // .proto.ClipboardEvent clipboard_event = 4;
  if (this->has_clipboard_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clipboard_event_);
  }

  // .proto.DesktopExtension extension = 5;
  if (this->has_extension()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extension_);
  }

  // .proto.DesktopConfigRequest config_request = 6;
  if (this->has_config_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_request_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostToClient::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HostToClient*>(&from));
}

void HostToClient::MergeFrom(const HostToClient& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HostToClient)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_video_packet()) {
    mutable_video_packet()->::proto::VideoPacket::MergeFrom(from.video_packet());
  }
  if (from.has_audio_packet()) {
    mutable_audio_packet()->::proto::AudioPacket::MergeFrom(from.audio_packet());
  }
  if (from.has_cursor_shape()) {
    mutable_cursor_shape()->::proto::CursorShape::MergeFrom(from.cursor_shape());
  }
  if (from.has_clipboard_event()) {
    mutable_clipboard_event()->::proto::ClipboardEvent::MergeFrom(from.clipboard_event());
  }
  if (from.has_extension()) {
    mutable_extension()->::proto::DesktopExtension::MergeFrom(from.extension());
  }
  if (from.has_config_request()) {
    mutable_config_request()->::proto::DesktopConfigRequest::MergeFrom(from.config_request());
  }
}

void HostToClient::CopyFrom(const HostToClient& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HostToClient)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostToClient::IsInitialized() const {
  return true;
}

void HostToClient::Swap(HostToClient* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostToClient::InternalSwap(HostToClient* other) {
  std::swap(video_packet_, other->video_packet_);
  std::swap(audio_packet_, other->audio_packet_);
  std::swap(cursor_shape_, other->cursor_shape_);
  std::swap(clipboard_event_, other->clipboard_event_);
  std::swap(extension_, other->extension_);
  std::swap(config_request_, other->config_request_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HostToClient::GetTypeName() const {
  return "proto.HostToClient";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostToClient

// .proto.VideoPacket video_packet = 1;
bool HostToClient::has_video_packet() const {
  return this != internal_default_instance() && video_packet_ != NULL;
}
void HostToClient::clear_video_packet() {
  if (GetArenaNoVirtual() == NULL && video_packet_ != NULL) delete video_packet_;
  video_packet_ = NULL;
}
const ::proto::VideoPacket& HostToClient::video_packet() const {
  // @@protoc_insertion_point(field_get:proto.HostToClient.video_packet)
  return video_packet_ != NULL ? *video_packet_
                         : *::proto::VideoPacket::internal_default_instance();
}
::proto::VideoPacket* HostToClient::mutable_video_packet() {
  
  if (video_packet_ == NULL) {
    video_packet_ = new ::proto::VideoPacket;
  }
  // @@protoc_insertion_point(field_mutable:proto.HostToClient.video_packet)
  return video_packet_;
}
::proto::VideoPacket* HostToClient::release_video_packet() {
  // @@protoc_insertion_point(field_release:proto.HostToClient.video_packet)
  
  ::proto::VideoPacket* temp = video_packet_;
  video_packet_ = NULL;
  return temp;
}
void HostToClient::set_allocated_video_packet(::proto::VideoPacket* video_packet) {
  delete video_packet_;
  video_packet_ = video_packet;
  if (video_packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HostToClient.video_packet)
}

// .proto.AudioPacket audio_packet = 2;
bool HostToClient::has_audio_packet() const {
  return this != internal_default_instance() && audio_packet_ != NULL;
}
void HostToClient::clear_audio_packet() {
  if (GetArenaNoVirtual() == NULL && audio_packet_ != NULL) delete audio_packet_;
  audio_packet_ = NULL;
}
const ::proto::AudioPacket& HostToClient::audio_packet() const {
  // @@protoc_insertion_point(field_get:proto.HostToClient.audio_packet)
  return audio_packet_ != NULL ? *audio_packet_
                         : *::proto::AudioPacket::internal_default_instance();
}
::proto::AudioPacket* HostToClient::mutable_audio_packet() {
  
  if (audio_packet_ == NULL) {
    audio_packet_ = new ::proto::AudioPacket;
  }
  // @@protoc_insertion_point(field_mutable:proto.HostToClient.audio_packet)
  return audio_packet_;
}
::proto::AudioPacket* HostToClient::release_audio_packet() {
  // @@protoc_insertion_point(field_release:proto.HostToClient.audio_packet)
  
  ::proto::AudioPacket* temp = audio_packet_;
  audio_packet_ = NULL;
  return temp;
}
void HostToClient::set_allocated_audio_packet(::proto::AudioPacket* audio_packet) {
  delete audio_packet_;
  audio_packet_ = audio_packet;
  if (audio_packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HostToClient.audio_packet)
}

// .proto.CursorShape cursor_shape = 3;
bool HostToClient::has_cursor_shape() const {
  return this != internal_default_instance() && cursor_shape_ != NULL;
}
void HostToClient::clear_cursor_shape() {
  if (GetArenaNoVirtual() == NULL && cursor_shape_ != NULL) delete cursor_shape_;
  cursor_shape_ = NULL;
}
const ::proto::CursorShape& HostToClient::cursor_shape() const {
  // @@protoc_insertion_point(field_get:proto.HostToClient.cursor_shape)
  return cursor_shape_ != NULL ? *cursor_shape_
                         : *::proto::CursorShape::internal_default_instance();
}
::proto::CursorShape* HostToClient::mutable_cursor_shape() {
  
  if (cursor_shape_ == NULL) {
    cursor_shape_ = new ::proto::CursorShape;
  }
  // @@protoc_insertion_point(field_mutable:proto.HostToClient.cursor_shape)
  return cursor_shape_;
}
::proto::CursorShape* HostToClient::release_cursor_shape() {
  // @@protoc_insertion_point(field_release:proto.HostToClient.cursor_shape)
  
  ::proto::CursorShape* temp = cursor_shape_;
  cursor_shape_ = NULL;
  return temp;
}
void HostToClient::set_allocated_cursor_shape(::proto::CursorShape* cursor_shape) {
  delete cursor_shape_;
  cursor_shape_ = cursor_shape;
  if (cursor_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HostToClient.cursor_shape)
}

// .proto.ClipboardEvent clipboard_event = 4;
bool HostToClient::has_clipboard_event() const {
  return this != internal_default_instance() && clipboard_event_ != NULL;
}
void HostToClient::clear_clipboard_event() {
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) delete clipboard_event_;
  clipboard_event_ = NULL;
}
const ::proto::ClipboardEvent& HostToClient::clipboard_event() const {
  // @@protoc_insertion_point(field_get:proto.HostToClient.clipboard_event)
  return clipboard_event_ != NULL ? *clipboard_event_
                         : *::proto::ClipboardEvent::internal_default_instance();
}
::proto::ClipboardEvent* HostToClient::mutable_clipboard_event() {
  
  if (clipboard_event_ == NULL) {
    clipboard_event_ = new ::proto::ClipboardEvent;
  }
  // @@protoc_insertion_point(field_mutable:proto.HostToClient.clipboard_event)
  return clipboard_event_;
}
::proto::ClipboardEvent* HostToClient::release_clipboard_event() {
  // @@protoc_insertion_point(field_release:proto.HostToClient.clipboard_event)
  
  ::proto::ClipboardEvent* temp = clipboard_event_;
  clipboard_event_ = NULL;
  return temp;
}
void HostToClient::set_allocated_clipboard_event(::proto::ClipboardEvent* clipboard_event) {
  delete clipboard_event_;
  clipboard_event_ = clipboard_event;
  if (clipboard_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HostToClient.clipboard_event)
}

// .proto.DesktopExtension extension = 5;
bool HostToClient::has_extension() const {
  return this != internal_default_instance() && extension_ != NULL;
}
void HostToClient::clear_extension() {
  if (GetArenaNoVirtual() == NULL && extension_ != NULL) delete extension_;
  extension_ = NULL;
}
const ::proto::DesktopExtension& HostToClient::extension() const {
  // @@protoc_insertion_point(field_get:proto.HostToClient.extension)
  return extension_ != NULL ? *extension_
                         : *::proto::DesktopExtension::internal_default_instance();
}
::proto::DesktopExtension* HostToClient::mutable_extension() {
  
  if (extension_ == NULL) {
    extension_ = new ::proto::DesktopExtension;
  }
  // @@protoc_insertion_point(field_mutable:proto.HostToClient.extension)
  return extension_;
}
::proto::DesktopExtension* HostToClient::release_extension() {
  // @@protoc_insertion_point(field_release:proto.HostToClient.extension)
  
  ::proto::DesktopExtension* temp = extension_;
  extension_ = NULL;
  return temp;
}
void HostToClient::set_allocated_extension(::proto::DesktopExtension* extension) {
  delete extension_;
  extension_ = extension;
  if (extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HostToClient.extension)
}

// .proto.DesktopConfigRequest config_request = 6;
bool HostToClient::has_config_request() const {
  return this != internal_default_instance() && config_request_ != NULL;
}
void HostToClient::clear_config_request() {
  if (GetArenaNoVirtual() == NULL && config_request_ != NULL) delete config_request_;
  config_request_ = NULL;
}
const ::proto::DesktopConfigRequest& HostToClient::config_request() const {
  // @@protoc_insertion_point(field_get:proto.HostToClient.config_request)
  return config_request_ != NULL ? *config_request_
                         : *::proto::DesktopConfigRequest::internal_default_instance();
}
::proto::DesktopConfigRequest* HostToClient::mutable_config_request() {
  
  if (config_request_ == NULL) {
    config_request_ = new ::proto::DesktopConfigRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.HostToClient.config_request)
  return config_request_;
}
::proto::DesktopConfigRequest* HostToClient::release_config_request() {
  // @@protoc_insertion_point(field_release:proto.HostToClient.config_request)
  
  ::proto::DesktopConfigRequest* temp = config_request_;
  config_request_ = NULL;
  return temp;
}
void HostToClient::set_allocated_config_request(::proto::DesktopConfigRequest* config_request) {
  delete config_request_;
  config_request_ = config_request;
  if (config_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HostToClient.config_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ClientToHost::kMouseEventFieldNumber;
const int ClientToHost::kKeyEventFieldNumber;
const int ClientToHost::kClipboardEventFieldNumber;
const int ClientToHost::kExtensionFieldNumber;
const int ClientToHost::kConfigFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ClientToHost::ClientToHost()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ClientToHost)
}
ClientToHost::ClientToHost(const ClientToHost& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mouse_event()) {
    mouse_event_ = new ::proto::MouseEvent(*from.mouse_event_);
  } else {
    mouse_event_ = NULL;
  }
  if (from.has_key_event()) {
    key_event_ = new ::proto::KeyEvent(*from.key_event_);
  } else {
    key_event_ = NULL;
  }
  if (from.has_clipboard_event()) {
    clipboard_event_ = new ::proto::ClipboardEvent(*from.clipboard_event_);
  } else {
    clipboard_event_ = NULL;
  }
  if (from.has_extension()) {
    extension_ = new ::proto::DesktopExtension(*from.extension_);
  } else {
    extension_ = NULL;
  }
  if (from.has_config()) {
    config_ = new ::proto::DesktopConfig(*from.config_);
  } else {
    config_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.ClientToHost)
}

void ClientToHost::SharedCtor() {
  ::memset(&mouse_event_, 0, reinterpret_cast<char*>(&config_) -
    reinterpret_cast<char*>(&mouse_event_) + sizeof(config_));
  _cached_size_ = 0;
}

ClientToHost::~ClientToHost() {
  // @@protoc_insertion_point(destructor:proto.ClientToHost)
  SharedDtor();
}

void ClientToHost::SharedDtor() {
  if (this != internal_default_instance()) {
    delete mouse_event_;
  }
  if (this != internal_default_instance()) {
    delete key_event_;
  }
  if (this != internal_default_instance()) {
    delete clipboard_event_;
  }
  if (this != internal_default_instance()) {
    delete extension_;
  }
  if (this != internal_default_instance()) {
    delete config_;
  }
}

void ClientToHost::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ClientToHost& ClientToHost::default_instance() {
  protobuf_desktop_2eproto::InitDefaults();
  return *internal_default_instance();
}

ClientToHost* ClientToHost::New(::google::protobuf::Arena* arena) const {
  ClientToHost* n = new ClientToHost;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ClientToHost::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ClientToHost)
  if (GetArenaNoVirtual() == NULL && mouse_event_ != NULL) {
    delete mouse_event_;
  }
  mouse_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_event_ != NULL) {
    delete key_event_;
  }
  key_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) {
    delete clipboard_event_;
  }
  clipboard_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && extension_ != NULL) {
    delete extension_;
  }
  extension_ = NULL;
  if (GetArenaNoVirtual() == NULL && config_ != NULL) {
    delete config_;
  }
  config_ = NULL;
}

bool ClientToHost::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ClientToHost)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.MouseEvent mouse_event = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mouse_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.KeyEvent key_event = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ClipboardEvent clipboard_event = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clipboard_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.DesktopExtension extension = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_extension()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.DesktopConfig config = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_config()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ClientToHost)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ClientToHost)
  return false;
#undef DO_
}

void ClientToHost::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ClientToHost)
  // .proto.MouseEvent mouse_event = 1;
  if (this->has_mouse_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->mouse_event_, output);
  }

  // .proto.KeyEvent key_event = 2;
  if (this->has_key_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->key_event_, output);
  }

  // .proto.ClipboardEvent clipboard_event = 5;
  if (this->has_clipboard_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->clipboard_event_, output);
  }

  // .proto.DesktopExtension extension = 6;
  if (this->has_extension()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->extension_, output);
  }

  // .proto.DesktopConfig config = 7;
  if (this->has_config()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->config_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.ClientToHost)
}

size_t ClientToHost::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ClientToHost)
  size_t total_size = 0;

  // .proto.MouseEvent mouse_event = 1;
  if (this->has_mouse_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mouse_event_);
  }

  // .proto.KeyEvent key_event = 2;
  if (this->has_key_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_event_);
  }

  // .proto.ClipboardEvent clipboard_event = 5;
  if (this->has_clipboard_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clipboard_event_);
  }

  // .proto.DesktopExtension extension = 6;
  if (this->has_extension()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->extension_);
  }

  // .proto.DesktopConfig config = 7;
  if (this->has_config()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->config_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToHost::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ClientToHost*>(&from));
}

void ClientToHost::MergeFrom(const ClientToHost& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ClientToHost)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_mouse_event()) {
    mutable_mouse_event()->::proto::MouseEvent::MergeFrom(from.mouse_event());
  }
  if (from.has_key_event()) {
    mutable_key_event()->::proto::KeyEvent::MergeFrom(from.key_event());
  }
  if (from.has_clipboard_event()) {
    mutable_clipboard_event()->::proto::ClipboardEvent::MergeFrom(from.clipboard_event());
  }
  if (from.has_extension()) {
    mutable_extension()->::proto::DesktopExtension::MergeFrom(from.extension());
  }
  if (from.has_config()) {
    mutable_config()->::proto::DesktopConfig::MergeFrom(from.config());
  }
}

void ClientToHost::CopyFrom(const ClientToHost& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ClientToHost)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToHost::IsInitialized() const {
  return true;
}

void ClientToHost::Swap(ClientToHost* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ClientToHost::InternalSwap(ClientToHost* other) {
  std::swap(mouse_event_, other->mouse_event_);
  std::swap(key_event_, other->key_event_);
  std::swap(clipboard_event_, other->clipboard_event_);
  std::swap(extension_, other->extension_);
  std::swap(config_, other->config_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ClientToHost::GetTypeName() const {
  return "proto.ClientToHost";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ClientToHost

// .proto.MouseEvent mouse_event = 1;
bool ClientToHost::has_mouse_event() const {
  return this != internal_default_instance() && mouse_event_ != NULL;
}
void ClientToHost::clear_mouse_event() {
  if (GetArenaNoVirtual() == NULL && mouse_event_ != NULL) delete mouse_event_;
  mouse_event_ = NULL;
}
const ::proto::MouseEvent& ClientToHost::mouse_event() const {
  // @@protoc_insertion_point(field_get:proto.ClientToHost.mouse_event)
  return mouse_event_ != NULL ? *mouse_event_
                         : *::proto::MouseEvent::internal_default_instance();
}
::proto::MouseEvent* ClientToHost::mutable_mouse_event() {
  
  if (mouse_event_ == NULL) {
    mouse_event_ = new ::proto::MouseEvent;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToHost.mouse_event)
  return mouse_event_;
}
::proto::MouseEvent* ClientToHost::release_mouse_event() {
  // @@protoc_insertion_point(field_release:proto.ClientToHost.mouse_event)
  
  ::proto::MouseEvent* temp = mouse_event_;
  mouse_event_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_mouse_event(::proto::MouseEvent* mouse_event) {
  delete mouse_event_;
  mouse_event_ = mouse_event;
  if (mouse_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToHost.mouse_event)
}

// .proto.KeyEvent key_event = 2;
bool ClientToHost::has_key_event() const {
  return this != internal_default_instance() && key_event_ != NULL;
}
void ClientToHost::clear_key_event() {
  if (GetArenaNoVirtual() == NULL && key_event_ != NULL) delete key_event_;
  key_event_ = NULL;
}
const ::proto::KeyEvent& ClientToHost::key_event() const {
  // @@protoc_insertion_point(field_get:proto.ClientToHost.key_event)
  return key_event_ != NULL ? *key_event_
                         : *::proto::KeyEvent::internal_default_instance();
}
::proto::KeyEvent* ClientToHost::mutable_key_event() {
  
  if (key_event_ == NULL) {
    key_event_ = new ::proto::KeyEvent;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToHost.key_event)
  return key_event_;
}
::proto::KeyEvent* ClientToHost::release_key_event() {
  // @@protoc_insertion_point(field_release:proto.ClientToHost.key_event)
  
  ::proto::KeyEvent* temp = key_event_;
  key_event_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_key_event(::proto::KeyEvent* key_event) {
  delete key_event_;
  key_event_ = key_event;
  if (key_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToHost.key_event)
}

// .proto.ClipboardEvent clipboard_event = 5;
bool ClientToHost::has_clipboard_event() const {
  return this != internal_default_instance() && clipboard_event_ != NULL;
}
void ClientToHost::clear_clipboard_event() {
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) delete clipboard_event_;
  clipboard_event_ = NULL;
}
const ::proto::ClipboardEvent& ClientToHost::clipboard_event() const {
  // @@protoc_insertion_point(field_get:proto.ClientToHost.clipboard_event)
  return clipboard_event_ != NULL ? *clipboard_event_
                         : *::proto::ClipboardEvent::internal_default_instance();
}
::proto::ClipboardEvent* ClientToHost::mutable_clipboard_event() {
  
  if (clipboard_event_ == NULL) {
    clipboard_event_ = new ::proto::ClipboardEvent;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToHost.clipboard_event)
  return clipboard_event_;
}
::proto::ClipboardEvent* ClientToHost::release_clipboard_event() {
  // @@protoc_insertion_point(field_release:proto.ClientToHost.clipboard_event)
  
  ::proto::ClipboardEvent* temp = clipboard_event_;
  clipboard_event_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_clipboard_event(::proto::ClipboardEvent* clipboard_event) {
  delete clipboard_event_;
  clipboard_event_ = clipboard_event;
  if (clipboard_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToHost.clipboard_event)
}

// .proto.DesktopExtension extension = 6;
bool ClientToHost::has_extension() const {
  return this != internal_default_instance() && extension_ != NULL;
}
void ClientToHost::clear_extension() {
  if (GetArenaNoVirtual() == NULL && extension_ != NULL) delete extension_;
  extension_ = NULL;
}
const ::proto::DesktopExtension& ClientToHost::extension() const {
  // @@protoc_insertion_point(field_get:proto.ClientToHost.extension)
  return extension_ != NULL ? *extension_
                         : *::proto::DesktopExtension::internal_default_instance();
}
::proto::DesktopExtension* ClientToHost::mutable_extension() {
  
  if (extension_ == NULL) {
    extension_ = new ::proto::DesktopExtension;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToHost.extension)
  return extension_;
}
::proto::DesktopExtension* ClientToHost::release_extension() {
  // @@protoc_insertion_point(field_release:proto.ClientToHost.extension)
  
  ::proto::DesktopExtension* temp = extension_;
  extension_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_extension(::proto::DesktopExtension* extension) {
  delete extension_;
  extension_ = extension;
  if (extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToHost.extension)
}

// .proto.DesktopConfig config = 7;
bool ClientToHost::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
void ClientToHost::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
const ::proto::DesktopConfig& ClientToHost::config() const {
  // @@protoc_insertion_point(field_get:proto.ClientToHost.config)
  return config_ != NULL ? *config_
                         : *::proto::DesktopConfig::internal_default_instance();
}
::proto::DesktopConfig* ClientToHost::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::proto::DesktopConfig;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToHost.config)
  return config_;
}
::proto::DesktopConfig* ClientToHost::release_config() {
  // @@protoc_insertion_point(field_release:proto.ClientToHost.config)
  
  ::proto::DesktopConfig* temp = config_;
  config_ = NULL;
  return temp;
}
void ClientToHost::set_allocated_config(::proto::DesktopConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToHost.config)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
