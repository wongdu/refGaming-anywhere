// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router_admin.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "router_admin.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace proto {
class SessionDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Session> {
} _Session_default_instance_;
class SessionRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionRequest> {
} _SessionRequest_default_instance_;
class SessionResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionResult> {
} _SessionResult_default_instance_;
class SessionListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionListRequest> {
} _SessionListRequest_default_instance_;
class SessionListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SessionList> {
} _SessionList_default_instance_;
class HostSessionDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<HostSessionData> {
} _HostSessionData_default_instance_;
class RelaySessionDataDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RelaySessionData> {
} _RelaySessionData_default_instance_;
class UserDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<User> {
} _User_default_instance_;
class UserListRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserListRequest> {
} _UserListRequest_default_instance_;
class UserListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserList> {
} _UserList_default_instance_;
class UserRequestDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserRequest> {
} _UserRequest_default_instance_;
class UserResultDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<UserResult> {
} _UserResult_default_instance_;
class RouterToAdminDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RouterToAdmin> {
} _RouterToAdmin_default_instance_;
class AdminToRouterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<AdminToRouter> {
} _AdminToRouter_default_instance_;

namespace protobuf_router_5fadmin_2eproto {


void TableStruct::Shutdown() {
  _Session_default_instance_.Shutdown();
  _SessionRequest_default_instance_.Shutdown();
  _SessionResult_default_instance_.Shutdown();
  _SessionListRequest_default_instance_.Shutdown();
  _SessionList_default_instance_.Shutdown();
  _HostSessionData_default_instance_.Shutdown();
  _RelaySessionData_default_instance_.Shutdown();
  _User_default_instance_.Shutdown();
  _UserListRequest_default_instance_.Shutdown();
  _UserList_default_instance_.Shutdown();
  _UserRequest_default_instance_.Shutdown();
  _UserResult_default_instance_.Shutdown();
  _RouterToAdmin_default_instance_.Shutdown();
  _AdminToRouter_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_common_2eproto::InitDefaults();
  ::proto::protobuf_router_5fcommon_2eproto::InitDefaults();
  _Session_default_instance_.DefaultConstruct();
  _SessionRequest_default_instance_.DefaultConstruct();
  _SessionResult_default_instance_.DefaultConstruct();
  _SessionListRequest_default_instance_.DefaultConstruct();
  _SessionList_default_instance_.DefaultConstruct();
  _HostSessionData_default_instance_.DefaultConstruct();
  _RelaySessionData_default_instance_.DefaultConstruct();
  _User_default_instance_.DefaultConstruct();
  _UserListRequest_default_instance_.DefaultConstruct();
  _UserList_default_instance_.DefaultConstruct();
  _UserRequest_default_instance_.DefaultConstruct();
  _UserResult_default_instance_.DefaultConstruct();
  _RouterToAdmin_default_instance_.DefaultConstruct();
  _AdminToRouter_default_instance_.DefaultConstruct();
  _Session_default_instance_.get_mutable()->version_ = const_cast< ::proto::Version*>(
      ::proto::Version::internal_default_instance());
  _UserRequest_default_instance_.get_mutable()->user_ = const_cast< ::proto::User*>(
      ::proto::User::internal_default_instance());
  _RouterToAdmin_default_instance_.get_mutable()->session_list_ = const_cast< ::proto::SessionList*>(
      ::proto::SessionList::internal_default_instance());
  _RouterToAdmin_default_instance_.get_mutable()->session_result_ = const_cast< ::proto::SessionResult*>(
      ::proto::SessionResult::internal_default_instance());
  _RouterToAdmin_default_instance_.get_mutable()->user_list_ = const_cast< ::proto::UserList*>(
      ::proto::UserList::internal_default_instance());
  _RouterToAdmin_default_instance_.get_mutable()->user_result_ = const_cast< ::proto::UserResult*>(
      ::proto::UserResult::internal_default_instance());
  _AdminToRouter_default_instance_.get_mutable()->session_list_request_ = const_cast< ::proto::SessionListRequest*>(
      ::proto::SessionListRequest::internal_default_instance());
  _AdminToRouter_default_instance_.get_mutable()->session_request_ = const_cast< ::proto::SessionRequest*>(
      ::proto::SessionRequest::internal_default_instance());
  _AdminToRouter_default_instance_.get_mutable()->user_list_request_ = const_cast< ::proto::UserListRequest*>(
      ::proto::UserListRequest::internal_default_instance());
  _AdminToRouter_default_instance_.get_mutable()->user_request_ = const_cast< ::proto::UserRequest*>(
      ::proto::UserRequest::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::proto::protobuf_common_2eproto::AddDescriptors();
  ::proto::protobuf_router_5fcommon_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_router_5fadmin_2eproto

bool SessionResult_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SessionResult_ErrorCode SessionResult::SUCCESS;
const SessionResult_ErrorCode SessionResult::INVALID_REQUEST;
const SessionResult_ErrorCode SessionResult::INTERNAL_ERROR;
const SessionResult_ErrorCode SessionResult::INVALID_SESSION_ID;
const SessionResult_ErrorCode SessionResult::ErrorCode_MIN;
const SessionResult_ErrorCode SessionResult::ErrorCode_MAX;
const int SessionResult::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SessionList_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SessionList_ErrorCode SessionList::SUCCESS;
const SessionList_ErrorCode SessionList::UNKNOWN_ERROR;
const SessionList_ErrorCode SessionList::ErrorCode_MIN;
const SessionList_ErrorCode SessionList::ErrorCode_MAX;
const int SessionList::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool UserList_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserList_ErrorCode UserList::SUCCESS;
const UserList_ErrorCode UserList::UNKNOWN_ERROR;
const UserList_ErrorCode UserList::ErrorCode_MIN;
const UserList_ErrorCode UserList::ErrorCode_MAX;
const int UserList::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool UserResult_ErrorCode_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const UserResult_ErrorCode UserResult::SUCCESS;
const UserResult_ErrorCode UserResult::INTERNAL_ERROR;
const UserResult_ErrorCode UserResult::INVALID_DATA;
const UserResult_ErrorCode UserResult::ALREADY_EXISTS;
const UserResult_ErrorCode UserResult::ErrorCode_MIN;
const UserResult_ErrorCode UserResult::ErrorCode_MAX;
const int UserResult::ErrorCode_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool SessionRequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

bool UserRequestType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Session::kSessionIdFieldNumber;
const int Session::kSessionTypeFieldNumber;
const int Session::kSessionDataFieldNumber;
const int Session::kTimepointFieldNumber;
const int Session::kIpAddressFieldNumber;
const int Session::kVersionFieldNumber;
const int Session::kOsNameFieldNumber;
const int Session::kComputerNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Session::Session()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Session)
}
Session::Session(const Session& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.session_data().size() > 0) {
    session_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_data_);
  }
  ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip_address().size() > 0) {
    ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  os_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.os_name().size() > 0) {
    os_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_name_);
  }
  computer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.computer_name().size() > 0) {
    computer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.computer_name_);
  }
  if (from.has_version()) {
    version_ = new ::proto::Version(*from.version_);
  } else {
    version_ = NULL;
  }
  ::memcpy(&session_id_, &from.session_id_,
    reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(session_type_));
  // @@protoc_insertion_point(copy_constructor:proto.Session)
}

void Session::SharedCtor() {
  session_data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_address_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  computer_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&version_, 0, reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&version_) + sizeof(session_type_));
  _cached_size_ = 0;
}

Session::~Session() {
  // @@protoc_insertion_point(destructor:proto.Session)
  SharedDtor();
}

void Session::SharedDtor() {
  session_data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_address_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  computer_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete version_;
  }
}

void Session::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Session& Session::default_instance() {
  protobuf_router_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

Session* Session::New(::google::protobuf::Arena* arena) const {
  Session* n = new Session;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Session::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Session)
  session_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  os_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  computer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && version_ != NULL) {
    delete version_;
  }
  version_ = NULL;
  ::memset(&session_id_, 0, reinterpret_cast<char*>(&session_type_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(session_type_));
}

bool Session::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Session)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 session_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.RouterSession session_type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_session_type(static_cast< ::proto::RouterSession >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes session_data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_session_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // fixed64 timepoint = 4;
      case 4: {
        if (tag == 33u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, &timepoint_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string ip_address = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip_address()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip_address().data(), this->ip_address().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Session.ip_address"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.Version version = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_version()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string os_name = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_os_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->os_name().data(), this->os_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Session.os_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string computer_name = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_computer_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->computer_name().data(), this->computer_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Session.computer_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Session)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Session)
  return false;
#undef DO_
}

void Session::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Session)
  // int64 session_id = 1;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->session_id(), output);
  }

  // .proto.RouterSession session_type = 2;
  if (this->session_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->session_type(), output);
  }

  // bytes session_data = 3;
  if (this->session_data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->session_data(), output);
  }

  // fixed64 timepoint = 4;
  if (this->timepoint() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFixed64(4, this->timepoint(), output);
  }

  // string ip_address = 5;
  if (this->ip_address().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip_address().data(), this->ip_address().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Session.ip_address");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->ip_address(), output);
  }

  // .proto.Version version = 6;
  if (this->has_version()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->version_, output);
  }

  // string os_name = 7;
  if (this->os_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->os_name().data(), this->os_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Session.os_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->os_name(), output);
  }

  // string computer_name = 8;
  if (this->computer_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->computer_name().data(), this->computer_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Session.computer_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      8, this->computer_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Session)
}

size_t Session::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Session)
  size_t total_size = 0;

  // bytes session_data = 3;
  if (this->session_data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->session_data());
  }

  // string ip_address = 5;
  if (this->ip_address().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip_address());
  }

  // string os_name = 7;
  if (this->os_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->os_name());
  }

  // string computer_name = 8;
  if (this->computer_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->computer_name());
  }

  // .proto.Version version = 6;
  if (this->has_version()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->version_);
  }

  // int64 session_id = 1;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->session_id());
  }

  // fixed64 timepoint = 4;
  if (this->timepoint() != 0) {
    total_size += 1 + 8;
  }

  // .proto.RouterSession session_type = 2;
  if (this->session_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->session_type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Session::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Session*>(&from));
}

void Session::MergeFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Session)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.session_data().size() > 0) {

    session_data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.session_data_);
  }
  if (from.ip_address().size() > 0) {

    ip_address_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_address_);
  }
  if (from.os_name().size() > 0) {

    os_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.os_name_);
  }
  if (from.computer_name().size() > 0) {

    computer_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.computer_name_);
  }
  if (from.has_version()) {
    mutable_version()->::proto::Version::MergeFrom(from.version());
  }
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.timepoint() != 0) {
    set_timepoint(from.timepoint());
  }
  if (from.session_type() != 0) {
    set_session_type(from.session_type());
  }
}

void Session::CopyFrom(const Session& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Session)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Session::IsInitialized() const {
  return true;
}

void Session::Swap(Session* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Session::InternalSwap(Session* other) {
  session_data_.Swap(&other->session_data_);
  ip_address_.Swap(&other->ip_address_);
  os_name_.Swap(&other->os_name_);
  computer_name_.Swap(&other->computer_name_);
  std::swap(version_, other->version_);
  std::swap(session_id_, other->session_id_);
  std::swap(timepoint_, other->timepoint_);
  std::swap(session_type_, other->session_type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Session::GetTypeName() const {
  return "proto.Session";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Session

// int64 session_id = 1;
void Session::clear_session_id() {
  session_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Session::session_id() const {
  // @@protoc_insertion_point(field_get:proto.Session.session_id)
  return session_id_;
}
void Session::set_session_id(::google::protobuf::int64 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.Session.session_id)
}

// .proto.RouterSession session_type = 2;
void Session::clear_session_type() {
  session_type_ = 0;
}
::proto::RouterSession Session::session_type() const {
  // @@protoc_insertion_point(field_get:proto.Session.session_type)
  return static_cast< ::proto::RouterSession >(session_type_);
}
void Session::set_session_type(::proto::RouterSession value) {
  
  session_type_ = value;
  // @@protoc_insertion_point(field_set:proto.Session.session_type)
}

// bytes session_data = 3;
void Session::clear_session_data() {
  session_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Session::session_data() const {
  // @@protoc_insertion_point(field_get:proto.Session.session_data)
  return session_data_.GetNoArena();
}
void Session::set_session_data(const ::std::string& value) {
  
  session_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Session.session_data)
}
#if LANG_CXX11
void Session::set_session_data(::std::string&& value) {
  
  session_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Session.session_data)
}
#endif
void Session::set_session_data(const char* value) {
  
  session_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Session.session_data)
}
void Session::set_session_data(const void* value, size_t size) {
  
  session_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Session.session_data)
}
::std::string* Session::mutable_session_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.Session.session_data)
  return session_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_session_data() {
  // @@protoc_insertion_point(field_release:proto.Session.session_data)
  
  return session_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_session_data(::std::string* session_data) {
  if (session_data != NULL) {
    
  } else {
    
  }
  session_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), session_data);
  // @@protoc_insertion_point(field_set_allocated:proto.Session.session_data)
}

// fixed64 timepoint = 4;
void Session::clear_timepoint() {
  timepoint_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Session::timepoint() const {
  // @@protoc_insertion_point(field_get:proto.Session.timepoint)
  return timepoint_;
}
void Session::set_timepoint(::google::protobuf::uint64 value) {
  
  timepoint_ = value;
  // @@protoc_insertion_point(field_set:proto.Session.timepoint)
}

// string ip_address = 5;
void Session::clear_ip_address() {
  ip_address_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Session::ip_address() const {
  // @@protoc_insertion_point(field_get:proto.Session.ip_address)
  return ip_address_.GetNoArena();
}
void Session::set_ip_address(const ::std::string& value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Session.ip_address)
}
#if LANG_CXX11
void Session::set_ip_address(::std::string&& value) {
  
  ip_address_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Session.ip_address)
}
#endif
void Session::set_ip_address(const char* value) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Session.ip_address)
}
void Session::set_ip_address(const char* value, size_t size) {
  
  ip_address_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Session.ip_address)
}
::std::string* Session::mutable_ip_address() {
  
  // @@protoc_insertion_point(field_mutable:proto.Session.ip_address)
  return ip_address_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_ip_address() {
  // @@protoc_insertion_point(field_release:proto.Session.ip_address)
  
  return ip_address_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_ip_address(::std::string* ip_address) {
  if (ip_address != NULL) {
    
  } else {
    
  }
  ip_address_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip_address);
  // @@protoc_insertion_point(field_set_allocated:proto.Session.ip_address)
}

// .proto.Version version = 6;
bool Session::has_version() const {
  return this != internal_default_instance() && version_ != NULL;
}
void Session::clear_version() {
  if (GetArenaNoVirtual() == NULL && version_ != NULL) delete version_;
  version_ = NULL;
}
const ::proto::Version& Session::version() const {
  // @@protoc_insertion_point(field_get:proto.Session.version)
  return version_ != NULL ? *version_
                         : *::proto::Version::internal_default_instance();
}
::proto::Version* Session::mutable_version() {
  
  if (version_ == NULL) {
    version_ = new ::proto::Version;
  }
  // @@protoc_insertion_point(field_mutable:proto.Session.version)
  return version_;
}
::proto::Version* Session::release_version() {
  // @@protoc_insertion_point(field_release:proto.Session.version)
  
  ::proto::Version* temp = version_;
  version_ = NULL;
  return temp;
}
void Session::set_allocated_version(::proto::Version* version) {
  delete version_;
  version_ = version;
  if (version) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.Session.version)
}

// string os_name = 7;
void Session::clear_os_name() {
  os_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Session::os_name() const {
  // @@protoc_insertion_point(field_get:proto.Session.os_name)
  return os_name_.GetNoArena();
}
void Session::set_os_name(const ::std::string& value) {
  
  os_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Session.os_name)
}
#if LANG_CXX11
void Session::set_os_name(::std::string&& value) {
  
  os_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Session.os_name)
}
#endif
void Session::set_os_name(const char* value) {
  
  os_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Session.os_name)
}
void Session::set_os_name(const char* value, size_t size) {
  
  os_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Session.os_name)
}
::std::string* Session::mutable_os_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.Session.os_name)
  return os_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_os_name() {
  // @@protoc_insertion_point(field_release:proto.Session.os_name)
  
  return os_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_os_name(::std::string* os_name) {
  if (os_name != NULL) {
    
  } else {
    
  }
  os_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), os_name);
  // @@protoc_insertion_point(field_set_allocated:proto.Session.os_name)
}

// string computer_name = 8;
void Session::clear_computer_name() {
  computer_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Session::computer_name() const {
  // @@protoc_insertion_point(field_get:proto.Session.computer_name)
  return computer_name_.GetNoArena();
}
void Session::set_computer_name(const ::std::string& value) {
  
  computer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Session.computer_name)
}
#if LANG_CXX11
void Session::set_computer_name(::std::string&& value) {
  
  computer_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Session.computer_name)
}
#endif
void Session::set_computer_name(const char* value) {
  
  computer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Session.computer_name)
}
void Session::set_computer_name(const char* value, size_t size) {
  
  computer_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Session.computer_name)
}
::std::string* Session::mutable_computer_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.Session.computer_name)
  return computer_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Session::release_computer_name() {
  // @@protoc_insertion_point(field_release:proto.Session.computer_name)
  
  return computer_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Session::set_allocated_computer_name(::std::string* computer_name) {
  if (computer_name != NULL) {
    
  } else {
    
  }
  computer_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), computer_name);
  // @@protoc_insertion_point(field_set_allocated:proto.Session.computer_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionRequest::kTypeFieldNumber;
const int SessionRequest::kSessionIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionRequest::SessionRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SessionRequest)
}
SessionRequest::SessionRequest(const SessionRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&session_id_, &from.session_id_,
    reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:proto.SessionRequest)
}

void SessionRequest::SharedCtor() {
  ::memset(&session_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(type_));
  _cached_size_ = 0;
}

SessionRequest::~SessionRequest() {
  // @@protoc_insertion_point(destructor:proto.SessionRequest)
  SharedDtor();
}

void SessionRequest::SharedDtor() {
}

void SessionRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionRequest& SessionRequest::default_instance() {
  protobuf_router_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionRequest* SessionRequest::New(::google::protobuf::Arena* arena) const {
  SessionRequest* n = new SessionRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SessionRequest)
  ::memset(&session_id_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&session_id_) + sizeof(type_));
}

bool SessionRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SessionRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.SessionRequestType type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto::SessionRequestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 session_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &session_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SessionRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SessionRequest)
  return false;
#undef DO_
}

void SessionRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SessionRequest)
  // .proto.SessionRequestType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int64 session_id = 2;
  if (this->session_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->session_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.SessionRequest)
}

size_t SessionRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SessionRequest)
  size_t total_size = 0;

  // int64 session_id = 2;
  if (this->session_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->session_id());
  }

  // .proto.SessionRequestType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionRequest*>(&from));
}

void SessionRequest::MergeFrom(const SessionRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SessionRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.session_id() != 0) {
    set_session_id(from.session_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void SessionRequest::CopyFrom(const SessionRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SessionRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionRequest::IsInitialized() const {
  return true;
}

void SessionRequest::Swap(SessionRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionRequest::InternalSwap(SessionRequest* other) {
  std::swap(session_id_, other->session_id_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SessionRequest::GetTypeName() const {
  return "proto.SessionRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionRequest

// .proto.SessionRequestType type = 1;
void SessionRequest::clear_type() {
  type_ = 0;
}
::proto::SessionRequestType SessionRequest::type() const {
  // @@protoc_insertion_point(field_get:proto.SessionRequest.type)
  return static_cast< ::proto::SessionRequestType >(type_);
}
void SessionRequest::set_type(::proto::SessionRequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.SessionRequest.type)
}

// int64 session_id = 2;
void SessionRequest::clear_session_id() {
  session_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SessionRequest::session_id() const {
  // @@protoc_insertion_point(field_get:proto.SessionRequest.session_id)
  return session_id_;
}
void SessionRequest::set_session_id(::google::protobuf::int64 value) {
  
  session_id_ = value;
  // @@protoc_insertion_point(field_set:proto.SessionRequest.session_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionResult::kTypeFieldNumber;
const int SessionResult::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionResult::SessionResult()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SessionResult)
}
SessionResult::SessionResult(const SessionResult& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&type_) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:proto.SessionResult)
}

void SessionResult::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&type_) + sizeof(error_code_));
  _cached_size_ = 0;
}

SessionResult::~SessionResult() {
  // @@protoc_insertion_point(destructor:proto.SessionResult)
  SharedDtor();
}

void SessionResult::SharedDtor() {
}

void SessionResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionResult& SessionResult::default_instance() {
  protobuf_router_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionResult* SessionResult::New(::google::protobuf::Arena* arena) const {
  SessionResult* n = new SessionResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SessionResult)
  ::memset(&type_, 0, reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&type_) + sizeof(error_code_));
}

bool SessionResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SessionResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.SessionRequestType type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto::SessionRequestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SessionResult.ErrorCode error_code = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::proto::SessionResult_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SessionResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SessionResult)
  return false;
#undef DO_
}

void SessionResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SessionResult)
  // .proto.SessionRequestType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .proto.SessionResult.ErrorCode error_code = 2;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.SessionResult)
}

size_t SessionResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SessionResult)
  size_t total_size = 0;

  // .proto.SessionRequestType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .proto.SessionResult.ErrorCode error_code = 2;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionResult*>(&from));
}

void SessionResult::MergeFrom(const SessionResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SessionResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void SessionResult::CopyFrom(const SessionResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SessionResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionResult::IsInitialized() const {
  return true;
}

void SessionResult::Swap(SessionResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionResult::InternalSwap(SessionResult* other) {
  std::swap(type_, other->type_);
  std::swap(error_code_, other->error_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SessionResult::GetTypeName() const {
  return "proto.SessionResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionResult

// .proto.SessionRequestType type = 1;
void SessionResult::clear_type() {
  type_ = 0;
}
::proto::SessionRequestType SessionResult::type() const {
  // @@protoc_insertion_point(field_get:proto.SessionResult.type)
  return static_cast< ::proto::SessionRequestType >(type_);
}
void SessionResult::set_type(::proto::SessionRequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.SessionResult.type)
}

// .proto.SessionResult.ErrorCode error_code = 2;
void SessionResult::clear_error_code() {
  error_code_ = 0;
}
::proto::SessionResult_ErrorCode SessionResult::error_code() const {
  // @@protoc_insertion_point(field_get:proto.SessionResult.error_code)
  return static_cast< ::proto::SessionResult_ErrorCode >(error_code_);
}
void SessionResult::set_error_code(::proto::SessionResult_ErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:proto.SessionResult.error_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionListRequest::kDummyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionListRequest::SessionListRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SessionListRequest)
}
SessionListRequest::SessionListRequest(const SessionListRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:proto.SessionListRequest)
}

void SessionListRequest::SharedCtor() {
  dummy_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

SessionListRequest::~SessionListRequest() {
  // @@protoc_insertion_point(destructor:proto.SessionListRequest)
  SharedDtor();
}

void SessionListRequest::SharedDtor() {
}

void SessionListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionListRequest& SessionListRequest::default_instance() {
  protobuf_router_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionListRequest* SessionListRequest::New(::google::protobuf::Arena* arena) const {
  SessionListRequest* n = new SessionListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SessionListRequest)
  dummy_ = GOOGLE_LONGLONG(0);
}

bool SessionListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SessionListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 dummy = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dummy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SessionListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SessionListRequest)
  return false;
#undef DO_
}

void SessionListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SessionListRequest)
  // int64 dummy = 1;
  if (this->dummy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dummy(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.SessionListRequest)
}

size_t SessionListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SessionListRequest)
  size_t total_size = 0;

  // int64 dummy = 1;
  if (this->dummy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->dummy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionListRequest*>(&from));
}

void SessionListRequest::MergeFrom(const SessionListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SessionListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.dummy() != 0) {
    set_dummy(from.dummy());
  }
}

void SessionListRequest::CopyFrom(const SessionListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SessionListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionListRequest::IsInitialized() const {
  return true;
}

void SessionListRequest::Swap(SessionListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionListRequest::InternalSwap(SessionListRequest* other) {
  std::swap(dummy_, other->dummy_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SessionListRequest::GetTypeName() const {
  return "proto.SessionListRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionListRequest

// int64 dummy = 1;
void SessionListRequest::clear_dummy() {
  dummy_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 SessionListRequest::dummy() const {
  // @@protoc_insertion_point(field_get:proto.SessionListRequest.dummy)
  return dummy_;
}
void SessionListRequest::set_dummy(::google::protobuf::int64 value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:proto.SessionListRequest.dummy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SessionList::kErrorCodeFieldNumber;
const int SessionList::kSessionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SessionList::SessionList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SessionList)
}
SessionList::SessionList(const SessionList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      session_(from.session_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:proto.SessionList)
}

void SessionList::SharedCtor() {
  error_code_ = 0;
  _cached_size_ = 0;
}

SessionList::~SessionList() {
  // @@protoc_insertion_point(destructor:proto.SessionList)
  SharedDtor();
}

void SessionList::SharedDtor() {
}

void SessionList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SessionList& SessionList::default_instance() {
  protobuf_router_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

SessionList* SessionList::New(::google::protobuf::Arena* arena) const {
  SessionList* n = new SessionList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SessionList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SessionList)
  session_.Clear();
  error_code_ = 0;
}

bool SessionList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SessionList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.SessionList.ErrorCode error_code = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::proto::SessionList_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.Session session = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_session()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SessionList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SessionList)
  return false;
#undef DO_
}

void SessionList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SessionList)
  // .proto.SessionList.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // repeated .proto.Session session = 2;
  for (unsigned int i = 0, n = this->session_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->session(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.SessionList)
}

size_t SessionList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SessionList)
  size_t total_size = 0;

  // repeated .proto.Session session = 2;
  {
    unsigned int count = this->session_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->session(i));
    }
  }

  // .proto.SessionList.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SessionList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SessionList*>(&from));
}

void SessionList::MergeFrom(const SessionList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SessionList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  session_.MergeFrom(from.session_);
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void SessionList::CopyFrom(const SessionList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SessionList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SessionList::IsInitialized() const {
  return true;
}

void SessionList::Swap(SessionList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SessionList::InternalSwap(SessionList* other) {
  session_.UnsafeArenaSwap(&other->session_);
  std::swap(error_code_, other->error_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SessionList::GetTypeName() const {
  return "proto.SessionList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SessionList

// .proto.SessionList.ErrorCode error_code = 1;
void SessionList::clear_error_code() {
  error_code_ = 0;
}
::proto::SessionList_ErrorCode SessionList::error_code() const {
  // @@protoc_insertion_point(field_get:proto.SessionList.error_code)
  return static_cast< ::proto::SessionList_ErrorCode >(error_code_);
}
void SessionList::set_error_code(::proto::SessionList_ErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:proto.SessionList.error_code)
}

// repeated .proto.Session session = 2;
int SessionList::session_size() const {
  return session_.size();
}
void SessionList::clear_session() {
  session_.Clear();
}
const ::proto::Session& SessionList::session(int index) const {
  // @@protoc_insertion_point(field_get:proto.SessionList.session)
  return session_.Get(index);
}
::proto::Session* SessionList::mutable_session(int index) {
  // @@protoc_insertion_point(field_mutable:proto.SessionList.session)
  return session_.Mutable(index);
}
::proto::Session* SessionList::add_session() {
  // @@protoc_insertion_point(field_add:proto.SessionList.session)
  return session_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::Session >*
SessionList::mutable_session() {
  // @@protoc_insertion_point(field_mutable_list:proto.SessionList.session)
  return &session_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::Session >&
SessionList::session() const {
  // @@protoc_insertion_point(field_list:proto.SessionList.session)
  return session_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int HostSessionData::kHostIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

HostSessionData::HostSessionData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.HostSessionData)
}
HostSessionData::HostSessionData(const HostSessionData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      host_id_(from.host_id_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.HostSessionData)
}

void HostSessionData::SharedCtor() {
  _cached_size_ = 0;
}

HostSessionData::~HostSessionData() {
  // @@protoc_insertion_point(destructor:proto.HostSessionData)
  SharedDtor();
}

void HostSessionData::SharedDtor() {
}

void HostSessionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const HostSessionData& HostSessionData::default_instance() {
  protobuf_router_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

HostSessionData* HostSessionData::New(::google::protobuf::Arena* arena) const {
  HostSessionData* n = new HostSessionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void HostSessionData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.HostSessionData)
  host_id_.Clear();
}

bool HostSessionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.HostSessionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated fixed64 host_id = 1;
      case 1: {
        if (tag == 10u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 input, this->mutable_host_id())));
        } else if (tag == 9u) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_FIXED64>(
                 1, 10u, input, this->mutable_host_id())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.HostSessionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.HostSessionData)
  return false;
#undef DO_
}

void HostSessionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.HostSessionData)
  // repeated fixed64 host_id = 1;
  if (this->host_id_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_host_id_cached_byte_size_);
    ::google::protobuf::internal::WireFormatLite::WriteFixed64Array(
      this->host_id().data(), this->host_id_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.HostSessionData)
}

size_t HostSessionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.HostSessionData)
  size_t total_size = 0;

  // repeated fixed64 host_id = 1;
  {
    unsigned int count = this->host_id_size();
    size_t data_size = 8UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _host_id_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HostSessionData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const HostSessionData*>(&from));
}

void HostSessionData::MergeFrom(const HostSessionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.HostSessionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_id_.MergeFrom(from.host_id_);
}

void HostSessionData::CopyFrom(const HostSessionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.HostSessionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HostSessionData::IsInitialized() const {
  return true;
}

void HostSessionData::Swap(HostSessionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void HostSessionData::InternalSwap(HostSessionData* other) {
  host_id_.UnsafeArenaSwap(&other->host_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string HostSessionData::GetTypeName() const {
  return "proto.HostSessionData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// HostSessionData

// repeated fixed64 host_id = 1;
int HostSessionData::host_id_size() const {
  return host_id_.size();
}
void HostSessionData::clear_host_id() {
  host_id_.Clear();
}
::google::protobuf::uint64 HostSessionData::host_id(int index) const {
  // @@protoc_insertion_point(field_get:proto.HostSessionData.host_id)
  return host_id_.Get(index);
}
void HostSessionData::set_host_id(int index, ::google::protobuf::uint64 value) {
  host_id_.Set(index, value);
  // @@protoc_insertion_point(field_set:proto.HostSessionData.host_id)
}
void HostSessionData::add_host_id(::google::protobuf::uint64 value) {
  host_id_.Add(value);
  // @@protoc_insertion_point(field_add:proto.HostSessionData.host_id)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint64 >&
HostSessionData::host_id() const {
  // @@protoc_insertion_point(field_list:proto.HostSessionData.host_id)
  return host_id_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint64 >*
HostSessionData::mutable_host_id() {
  // @@protoc_insertion_point(field_mutable_list:proto.HostSessionData.host_id)
  return &host_id_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelaySessionData::kPoolSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelaySessionData::RelaySessionData()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RelaySessionData)
}
RelaySessionData::RelaySessionData(const RelaySessionData& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  pool_size_ = from.pool_size_;
  // @@protoc_insertion_point(copy_constructor:proto.RelaySessionData)
}

void RelaySessionData::SharedCtor() {
  pool_size_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

RelaySessionData::~RelaySessionData() {
  // @@protoc_insertion_point(destructor:proto.RelaySessionData)
  SharedDtor();
}

void RelaySessionData::SharedDtor() {
}

void RelaySessionData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RelaySessionData& RelaySessionData::default_instance() {
  protobuf_router_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

RelaySessionData* RelaySessionData::New(::google::protobuf::Arena* arena) const {
  RelaySessionData* n = new RelaySessionData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelaySessionData::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RelaySessionData)
  pool_size_ = GOOGLE_ULONGLONG(0);
}

bool RelaySessionData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RelaySessionData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint64 pool_size = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pool_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RelaySessionData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RelaySessionData)
  return false;
#undef DO_
}

void RelaySessionData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RelaySessionData)
  // uint64 pool_size = 1;
  if (this->pool_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->pool_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.RelaySessionData)
}

size_t RelaySessionData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RelaySessionData)
  size_t total_size = 0;

  // uint64 pool_size = 1;
  if (this->pool_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->pool_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelaySessionData::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RelaySessionData*>(&from));
}

void RelaySessionData::MergeFrom(const RelaySessionData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RelaySessionData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.pool_size() != 0) {
    set_pool_size(from.pool_size());
  }
}

void RelaySessionData::CopyFrom(const RelaySessionData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RelaySessionData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelaySessionData::IsInitialized() const {
  return true;
}

void RelaySessionData::Swap(RelaySessionData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelaySessionData::InternalSwap(RelaySessionData* other) {
  std::swap(pool_size_, other->pool_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RelaySessionData::GetTypeName() const {
  return "proto.RelaySessionData";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelaySessionData

// uint64 pool_size = 1;
void RelaySessionData::clear_pool_size() {
  pool_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 RelaySessionData::pool_size() const {
  // @@protoc_insertion_point(field_get:proto.RelaySessionData.pool_size)
  return pool_size_;
}
void RelaySessionData::set_pool_size(::google::protobuf::uint64 value) {
  
  pool_size_ = value;
  // @@protoc_insertion_point(field_set:proto.RelaySessionData.pool_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int User::kEntryIdFieldNumber;
const int User::kNameFieldNumber;
const int User::kGroupFieldNumber;
const int User::kSaltFieldNumber;
const int User::kVerifierFieldNumber;
const int User::kSessionsFieldNumber;
const int User::kFlagsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

User::User()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.User)
}
User::User(const User& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.group().size() > 0) {
    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.salt().size() > 0) {
    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  verifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.verifier().size() > 0) {
    verifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifier_);
  }
  ::memcpy(&entry_id_, &from.entry_id_,
    reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&entry_id_) + sizeof(flags_));
  // @@protoc_insertion_point(copy_constructor:proto.User)
}

void User::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifier_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entry_id_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&entry_id_) + sizeof(flags_));
  _cached_size_ = 0;
}

User::~User() {
  // @@protoc_insertion_point(destructor:proto.User)
  SharedDtor();
}

void User::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifier_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void User::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const User& User::default_instance() {
  protobuf_router_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

User* User::New(::google::protobuf::Arena* arena) const {
  User* n = new User;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void User::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.User)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  verifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&entry_id_, 0, reinterpret_cast<char*>(&flags_) -
    reinterpret_cast<char*>(&entry_id_) + sizeof(flags_));
}

bool User::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.User)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 entry_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &entry_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.User.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string group = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_group()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->group().data(), this->group().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.User.group"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes salt = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_salt()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes verifier = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_verifier()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 sessions = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &sessions_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 flags = 7;
      case 7: {
        if (tag == 56u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flags_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.User)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.User)
  return false;
#undef DO_
}

void User::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.User)
  // int64 entry_id = 1;
  if (this->entry_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->entry_id(), output);
  }

  // string name = 2;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.User.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->name(), output);
  }

  // string group = 3;
  if (this->group().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->group().data(), this->group().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.User.group");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->group(), output);
  }

  // bytes salt = 4;
  if (this->salt().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->salt(), output);
  }

  // bytes verifier = 5;
  if (this->verifier().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->verifier(), output);
  }

  // uint32 sessions = 6;
  if (this->sessions() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->sessions(), output);
  }

  // uint32 flags = 7;
  if (this->flags() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(7, this->flags(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.User)
}

size_t User::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.User)
  size_t total_size = 0;

  // string name = 2;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string group = 3;
  if (this->group().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->group());
  }

  // bytes salt = 4;
  if (this->salt().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->salt());
  }

  // bytes verifier = 5;
  if (this->verifier().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->verifier());
  }

  // int64 entry_id = 1;
  if (this->entry_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->entry_id());
  }

  // uint32 sessions = 6;
  if (this->sessions() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->sessions());
  }

  // uint32 flags = 7;
  if (this->flags() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->flags());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void User::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const User*>(&from));
}

void User::MergeFrom(const User& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.User)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.group().size() > 0) {

    group_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.group_);
  }
  if (from.salt().size() > 0) {

    salt_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.salt_);
  }
  if (from.verifier().size() > 0) {

    verifier_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.verifier_);
  }
  if (from.entry_id() != 0) {
    set_entry_id(from.entry_id());
  }
  if (from.sessions() != 0) {
    set_sessions(from.sessions());
  }
  if (from.flags() != 0) {
    set_flags(from.flags());
  }
}

void User::CopyFrom(const User& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.User)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool User::IsInitialized() const {
  return true;
}

void User::Swap(User* other) {
  if (other == this) return;
  InternalSwap(other);
}
void User::InternalSwap(User* other) {
  name_.Swap(&other->name_);
  group_.Swap(&other->group_);
  salt_.Swap(&other->salt_);
  verifier_.Swap(&other->verifier_);
  std::swap(entry_id_, other->entry_id_);
  std::swap(sessions_, other->sessions_);
  std::swap(flags_, other->flags_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string User::GetTypeName() const {
  return "proto.User";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// User

// int64 entry_id = 1;
void User::clear_entry_id() {
  entry_id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 User::entry_id() const {
  // @@protoc_insertion_point(field_get:proto.User.entry_id)
  return entry_id_;
}
void User::set_entry_id(::google::protobuf::int64 value) {
  
  entry_id_ = value;
  // @@protoc_insertion_point(field_set:proto.User.entry_id)
}

// string name = 2;
void User::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::name() const {
  // @@protoc_insertion_point(field_get:proto.User.name)
  return name_.GetNoArena();
}
void User::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.User.name)
}
#if LANG_CXX11
void User::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.User.name)
}
#endif
void User::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.User.name)
}
void User::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.User.name)
}
::std::string* User::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.User.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_name() {
  // @@protoc_insertion_point(field_release:proto.User.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.User.name)
}

// string group = 3;
void User::clear_group() {
  group_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::group() const {
  // @@protoc_insertion_point(field_get:proto.User.group)
  return group_.GetNoArena();
}
void User::set_group(const ::std::string& value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.User.group)
}
#if LANG_CXX11
void User::set_group(::std::string&& value) {
  
  group_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.User.group)
}
#endif
void User::set_group(const char* value) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.User.group)
}
void User::set_group(const char* value, size_t size) {
  
  group_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.User.group)
}
::std::string* User::mutable_group() {
  
  // @@protoc_insertion_point(field_mutable:proto.User.group)
  return group_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_group() {
  // @@protoc_insertion_point(field_release:proto.User.group)
  
  return group_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_group(::std::string* group) {
  if (group != NULL) {
    
  } else {
    
  }
  group_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), group);
  // @@protoc_insertion_point(field_set_allocated:proto.User.group)
}

// bytes salt = 4;
void User::clear_salt() {
  salt_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::salt() const {
  // @@protoc_insertion_point(field_get:proto.User.salt)
  return salt_.GetNoArena();
}
void User::set_salt(const ::std::string& value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.User.salt)
}
#if LANG_CXX11
void User::set_salt(::std::string&& value) {
  
  salt_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.User.salt)
}
#endif
void User::set_salt(const char* value) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.User.salt)
}
void User::set_salt(const void* value, size_t size) {
  
  salt_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.User.salt)
}
::std::string* User::mutable_salt() {
  
  // @@protoc_insertion_point(field_mutable:proto.User.salt)
  return salt_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_salt() {
  // @@protoc_insertion_point(field_release:proto.User.salt)
  
  return salt_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_salt(::std::string* salt) {
  if (salt != NULL) {
    
  } else {
    
  }
  salt_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), salt);
  // @@protoc_insertion_point(field_set_allocated:proto.User.salt)
}

// bytes verifier = 5;
void User::clear_verifier() {
  verifier_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& User::verifier() const {
  // @@protoc_insertion_point(field_get:proto.User.verifier)
  return verifier_.GetNoArena();
}
void User::set_verifier(const ::std::string& value) {
  
  verifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.User.verifier)
}
#if LANG_CXX11
void User::set_verifier(::std::string&& value) {
  
  verifier_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.User.verifier)
}
#endif
void User::set_verifier(const char* value) {
  
  verifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.User.verifier)
}
void User::set_verifier(const void* value, size_t size) {
  
  verifier_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.User.verifier)
}
::std::string* User::mutable_verifier() {
  
  // @@protoc_insertion_point(field_mutable:proto.User.verifier)
  return verifier_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* User::release_verifier() {
  // @@protoc_insertion_point(field_release:proto.User.verifier)
  
  return verifier_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void User::set_allocated_verifier(::std::string* verifier) {
  if (verifier != NULL) {
    
  } else {
    
  }
  verifier_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), verifier);
  // @@protoc_insertion_point(field_set_allocated:proto.User.verifier)
}

// uint32 sessions = 6;
void User::clear_sessions() {
  sessions_ = 0u;
}
::google::protobuf::uint32 User::sessions() const {
  // @@protoc_insertion_point(field_get:proto.User.sessions)
  return sessions_;
}
void User::set_sessions(::google::protobuf::uint32 value) {
  
  sessions_ = value;
  // @@protoc_insertion_point(field_set:proto.User.sessions)
}

// uint32 flags = 7;
void User::clear_flags() {
  flags_ = 0u;
}
::google::protobuf::uint32 User::flags() const {
  // @@protoc_insertion_point(field_get:proto.User.flags)
  return flags_;
}
void User::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.User.flags)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserListRequest::kDummyFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserListRequest::UserListRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UserListRequest)
}
UserListRequest::UserListRequest(const UserListRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dummy_ = from.dummy_;
  // @@protoc_insertion_point(copy_constructor:proto.UserListRequest)
}

void UserListRequest::SharedCtor() {
  dummy_ = 0u;
  _cached_size_ = 0;
}

UserListRequest::~UserListRequest() {
  // @@protoc_insertion_point(destructor:proto.UserListRequest)
  SharedDtor();
}

void UserListRequest::SharedDtor() {
}

void UserListRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserListRequest& UserListRequest::default_instance() {
  protobuf_router_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserListRequest* UserListRequest::New(::google::protobuf::Arena* arena) const {
  UserListRequest* n = new UserListRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserListRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UserListRequest)
  dummy_ = 0u;
}

bool UserListRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UserListRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 dummy = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &dummy_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UserListRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UserListRequest)
  return false;
#undef DO_
}

void UserListRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UserListRequest)
  // uint32 dummy = 1;
  if (this->dummy() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->dummy(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.UserListRequest)
}

size_t UserListRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UserListRequest)
  size_t total_size = 0;

  // uint32 dummy = 1;
  if (this->dummy() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->dummy());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserListRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserListRequest*>(&from));
}

void UserListRequest::MergeFrom(const UserListRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UserListRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.dummy() != 0) {
    set_dummy(from.dummy());
  }
}

void UserListRequest::CopyFrom(const UserListRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UserListRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserListRequest::IsInitialized() const {
  return true;
}

void UserListRequest::Swap(UserListRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserListRequest::InternalSwap(UserListRequest* other) {
  std::swap(dummy_, other->dummy_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserListRequest::GetTypeName() const {
  return "proto.UserListRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserListRequest

// uint32 dummy = 1;
void UserListRequest::clear_dummy() {
  dummy_ = 0u;
}
::google::protobuf::uint32 UserListRequest::dummy() const {
  // @@protoc_insertion_point(field_get:proto.UserListRequest.dummy)
  return dummy_;
}
void UserListRequest::set_dummy(::google::protobuf::uint32 value) {
  
  dummy_ = value;
  // @@protoc_insertion_point(field_set:proto.UserListRequest.dummy)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserList::kErrorCodeFieldNumber;
const int UserList::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserList::UserList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UserList)
}
UserList::UserList(const UserList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      user_(from.user_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_code_ = from.error_code_;
  // @@protoc_insertion_point(copy_constructor:proto.UserList)
}

void UserList::SharedCtor() {
  error_code_ = 0;
  _cached_size_ = 0;
}

UserList::~UserList() {
  // @@protoc_insertion_point(destructor:proto.UserList)
  SharedDtor();
}

void UserList::SharedDtor() {
}

void UserList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserList& UserList::default_instance() {
  protobuf_router_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserList* UserList::New(::google::protobuf::Arena* arena) const {
  UserList* n = new UserList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UserList)
  user_.Clear();
  error_code_ = 0;
}

bool UserList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UserList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.UserList.ErrorCode error_code = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::proto::UserList_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.User user = 2;
      case 2: {
        if (tag == 18u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_user()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UserList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UserList)
  return false;
#undef DO_
}

void UserList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UserList)
  // .proto.UserList.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_code(), output);
  }

  // repeated .proto.User user = 2;
  for (unsigned int i = 0, n = this->user_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->user(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.UserList)
}

size_t UserList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UserList)
  size_t total_size = 0;

  // repeated .proto.User user = 2;
  {
    unsigned int count = this->user_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->user(i));
    }
  }

  // .proto.UserList.ErrorCode error_code = 1;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserList*>(&from));
}

void UserList::MergeFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UserList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  user_.MergeFrom(from.user_);
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void UserList::CopyFrom(const UserList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UserList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserList::IsInitialized() const {
  return true;
}

void UserList::Swap(UserList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserList::InternalSwap(UserList* other) {
  user_.UnsafeArenaSwap(&other->user_);
  std::swap(error_code_, other->error_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserList::GetTypeName() const {
  return "proto.UserList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserList

// .proto.UserList.ErrorCode error_code = 1;
void UserList::clear_error_code() {
  error_code_ = 0;
}
::proto::UserList_ErrorCode UserList::error_code() const {
  // @@protoc_insertion_point(field_get:proto.UserList.error_code)
  return static_cast< ::proto::UserList_ErrorCode >(error_code_);
}
void UserList::set_error_code(::proto::UserList_ErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:proto.UserList.error_code)
}

// repeated .proto.User user = 2;
int UserList::user_size() const {
  return user_.size();
}
void UserList::clear_user() {
  user_.Clear();
}
const ::proto::User& UserList::user(int index) const {
  // @@protoc_insertion_point(field_get:proto.UserList.user)
  return user_.Get(index);
}
::proto::User* UserList::mutable_user(int index) {
  // @@protoc_insertion_point(field_mutable:proto.UserList.user)
  return user_.Mutable(index);
}
::proto::User* UserList::add_user() {
  // @@protoc_insertion_point(field_add:proto.UserList.user)
  return user_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::User >*
UserList::mutable_user() {
  // @@protoc_insertion_point(field_mutable_list:proto.UserList.user)
  return &user_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::User >&
UserList::user() const {
  // @@protoc_insertion_point(field_list:proto.UserList.user)
  return user_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserRequest::kTypeFieldNumber;
const int UserRequest::kUserFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserRequest::UserRequest()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UserRequest)
}
UserRequest::UserRequest(const UserRequest& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    user_ = new ::proto::User(*from.user_);
  } else {
    user_ = NULL;
  }
  type_ = from.type_;
  // @@protoc_insertion_point(copy_constructor:proto.UserRequest)
}

void UserRequest::SharedCtor() {
  ::memset(&user_, 0, reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&user_) + sizeof(type_));
  _cached_size_ = 0;
}

UserRequest::~UserRequest() {
  // @@protoc_insertion_point(destructor:proto.UserRequest)
  SharedDtor();
}

void UserRequest::SharedDtor() {
  if (this != internal_default_instance()) {
    delete user_;
  }
}

void UserRequest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserRequest& UserRequest::default_instance() {
  protobuf_router_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserRequest* UserRequest::New(::google::protobuf::Arena* arena) const {
  UserRequest* n = new UserRequest;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UserRequest)
  if (GetArenaNoVirtual() == NULL && user_ != NULL) {
    delete user_;
  }
  user_ = NULL;
  type_ = 0;
}

bool UserRequest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UserRequest)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.UserRequestType type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto::UserRequestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.User user = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UserRequest)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UserRequest)
  return false;
#undef DO_
}

void UserRequest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UserRequest)
  // .proto.UserRequestType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .proto.User user = 2;
  if (this->has_user()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->user_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.UserRequest)
}

size_t UserRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UserRequest)
  size_t total_size = 0;

  // .proto.User user = 2;
  if (this->has_user()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_);
  }

  // .proto.UserRequestType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserRequest::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserRequest*>(&from));
}

void UserRequest::MergeFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UserRequest)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_user()) {
    mutable_user()->::proto::User::MergeFrom(from.user());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void UserRequest::CopyFrom(const UserRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UserRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserRequest::IsInitialized() const {
  return true;
}

void UserRequest::Swap(UserRequest* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserRequest::InternalSwap(UserRequest* other) {
  std::swap(user_, other->user_);
  std::swap(type_, other->type_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserRequest::GetTypeName() const {
  return "proto.UserRequest";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserRequest

// .proto.UserRequestType type = 1;
void UserRequest::clear_type() {
  type_ = 0;
}
::proto::UserRequestType UserRequest::type() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.type)
  return static_cast< ::proto::UserRequestType >(type_);
}
void UserRequest::set_type(::proto::UserRequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.UserRequest.type)
}

// .proto.User user = 2;
bool UserRequest::has_user() const {
  return this != internal_default_instance() && user_ != NULL;
}
void UserRequest::clear_user() {
  if (GetArenaNoVirtual() == NULL && user_ != NULL) delete user_;
  user_ = NULL;
}
const ::proto::User& UserRequest::user() const {
  // @@protoc_insertion_point(field_get:proto.UserRequest.user)
  return user_ != NULL ? *user_
                         : *::proto::User::internal_default_instance();
}
::proto::User* UserRequest::mutable_user() {
  
  if (user_ == NULL) {
    user_ = new ::proto::User;
  }
  // @@protoc_insertion_point(field_mutable:proto.UserRequest.user)
  return user_;
}
::proto::User* UserRequest::release_user() {
  // @@protoc_insertion_point(field_release:proto.UserRequest.user)
  
  ::proto::User* temp = user_;
  user_ = NULL;
  return temp;
}
void UserRequest::set_allocated_user(::proto::User* user) {
  delete user_;
  user_ = user;
  if (user) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.UserRequest.user)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int UserResult::kTypeFieldNumber;
const int UserResult::kErrorCodeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

UserResult::UserResult()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.UserResult)
}
UserResult::UserResult(const UserResult& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&type_) + sizeof(error_code_));
  // @@protoc_insertion_point(copy_constructor:proto.UserResult)
}

void UserResult::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&type_) + sizeof(error_code_));
  _cached_size_ = 0;
}

UserResult::~UserResult() {
  // @@protoc_insertion_point(destructor:proto.UserResult)
  SharedDtor();
}

void UserResult::SharedDtor() {
}

void UserResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const UserResult& UserResult::default_instance() {
  protobuf_router_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

UserResult* UserResult::New(::google::protobuf::Arena* arena) const {
  UserResult* n = new UserResult;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void UserResult::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.UserResult)
  ::memset(&type_, 0, reinterpret_cast<char*>(&error_code_) -
    reinterpret_cast<char*>(&type_) + sizeof(error_code_));
}

bool UserResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.UserResult)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.UserRequestType type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto::UserRequestType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UserResult.ErrorCode error_code = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_error_code(static_cast< ::proto::UserResult_ErrorCode >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.UserResult)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.UserResult)
  return false;
#undef DO_
}

void UserResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.UserResult)
  // .proto.UserRequestType type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // .proto.UserResult.ErrorCode error_code = 2;
  if (this->error_code() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->error_code(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.UserResult)
}

size_t UserResult::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.UserResult)
  size_t total_size = 0;

  // .proto.UserRequestType type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .proto.UserResult.ErrorCode error_code = 2;
  if (this->error_code() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_code());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UserResult::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const UserResult*>(&from));
}

void UserResult::MergeFrom(const UserResult& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.UserResult)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.error_code() != 0) {
    set_error_code(from.error_code());
  }
}

void UserResult::CopyFrom(const UserResult& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.UserResult)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UserResult::IsInitialized() const {
  return true;
}

void UserResult::Swap(UserResult* other) {
  if (other == this) return;
  InternalSwap(other);
}
void UserResult::InternalSwap(UserResult* other) {
  std::swap(type_, other->type_);
  std::swap(error_code_, other->error_code_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string UserResult::GetTypeName() const {
  return "proto.UserResult";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// UserResult

// .proto.UserRequestType type = 1;
void UserResult::clear_type() {
  type_ = 0;
}
::proto::UserRequestType UserResult::type() const {
  // @@protoc_insertion_point(field_get:proto.UserResult.type)
  return static_cast< ::proto::UserRequestType >(type_);
}
void UserResult::set_type(::proto::UserRequestType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.UserResult.type)
}

// .proto.UserResult.ErrorCode error_code = 2;
void UserResult::clear_error_code() {
  error_code_ = 0;
}
::proto::UserResult_ErrorCode UserResult::error_code() const {
  // @@protoc_insertion_point(field_get:proto.UserResult.error_code)
  return static_cast< ::proto::UserResult_ErrorCode >(error_code_);
}
void UserResult::set_error_code(::proto::UserResult_ErrorCode value) {
  
  error_code_ = value;
  // @@protoc_insertion_point(field_set:proto.UserResult.error_code)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RouterToAdmin::kSessionListFieldNumber;
const int RouterToAdmin::kSessionResultFieldNumber;
const int RouterToAdmin::kUserListFieldNumber;
const int RouterToAdmin::kUserResultFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RouterToAdmin::RouterToAdmin()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RouterToAdmin)
}
RouterToAdmin::RouterToAdmin(const RouterToAdmin& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_session_list()) {
    session_list_ = new ::proto::SessionList(*from.session_list_);
  } else {
    session_list_ = NULL;
  }
  if (from.has_session_result()) {
    session_result_ = new ::proto::SessionResult(*from.session_result_);
  } else {
    session_result_ = NULL;
  }
  if (from.has_user_list()) {
    user_list_ = new ::proto::UserList(*from.user_list_);
  } else {
    user_list_ = NULL;
  }
  if (from.has_user_result()) {
    user_result_ = new ::proto::UserResult(*from.user_result_);
  } else {
    user_result_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.RouterToAdmin)
}

void RouterToAdmin::SharedCtor() {
  ::memset(&session_list_, 0, reinterpret_cast<char*>(&user_result_) -
    reinterpret_cast<char*>(&session_list_) + sizeof(user_result_));
  _cached_size_ = 0;
}

RouterToAdmin::~RouterToAdmin() {
  // @@protoc_insertion_point(destructor:proto.RouterToAdmin)
  SharedDtor();
}

void RouterToAdmin::SharedDtor() {
  if (this != internal_default_instance()) {
    delete session_list_;
  }
  if (this != internal_default_instance()) {
    delete session_result_;
  }
  if (this != internal_default_instance()) {
    delete user_list_;
  }
  if (this != internal_default_instance()) {
    delete user_result_;
  }
}

void RouterToAdmin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RouterToAdmin& RouterToAdmin::default_instance() {
  protobuf_router_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

RouterToAdmin* RouterToAdmin::New(::google::protobuf::Arena* arena) const {
  RouterToAdmin* n = new RouterToAdmin;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RouterToAdmin::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RouterToAdmin)
  if (GetArenaNoVirtual() == NULL && session_list_ != NULL) {
    delete session_list_;
  }
  session_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && session_result_ != NULL) {
    delete session_result_;
  }
  session_result_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_list_ != NULL) {
    delete user_list_;
  }
  user_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_result_ != NULL) {
    delete user_result_;
  }
  user_result_ = NULL;
}

bool RouterToAdmin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RouterToAdmin)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.SessionList session_list = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SessionResult session_result = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UserList user_list = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UserResult user_result = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_result()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RouterToAdmin)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RouterToAdmin)
  return false;
#undef DO_
}

void RouterToAdmin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RouterToAdmin)
  // .proto.SessionList session_list = 1;
  if (this->has_session_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->session_list_, output);
  }

  // .proto.SessionResult session_result = 2;
  if (this->has_session_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->session_result_, output);
  }

  // .proto.UserList user_list = 3;
  if (this->has_user_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->user_list_, output);
  }

  // .proto.UserResult user_result = 4;
  if (this->has_user_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->user_result_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.RouterToAdmin)
}

size_t RouterToAdmin::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RouterToAdmin)
  size_t total_size = 0;

  // .proto.SessionList session_list = 1;
  if (this->has_session_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_list_);
  }

  // .proto.SessionResult session_result = 2;
  if (this->has_session_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_result_);
  }

  // .proto.UserList user_list = 3;
  if (this->has_user_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_list_);
  }

  // .proto.UserResult user_result = 4;
  if (this->has_user_result()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_result_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RouterToAdmin::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RouterToAdmin*>(&from));
}

void RouterToAdmin::MergeFrom(const RouterToAdmin& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RouterToAdmin)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_session_list()) {
    mutable_session_list()->::proto::SessionList::MergeFrom(from.session_list());
  }
  if (from.has_session_result()) {
    mutable_session_result()->::proto::SessionResult::MergeFrom(from.session_result());
  }
  if (from.has_user_list()) {
    mutable_user_list()->::proto::UserList::MergeFrom(from.user_list());
  }
  if (from.has_user_result()) {
    mutable_user_result()->::proto::UserResult::MergeFrom(from.user_result());
  }
}

void RouterToAdmin::CopyFrom(const RouterToAdmin& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RouterToAdmin)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RouterToAdmin::IsInitialized() const {
  return true;
}

void RouterToAdmin::Swap(RouterToAdmin* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RouterToAdmin::InternalSwap(RouterToAdmin* other) {
  std::swap(session_list_, other->session_list_);
  std::swap(session_result_, other->session_result_);
  std::swap(user_list_, other->user_list_);
  std::swap(user_result_, other->user_result_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RouterToAdmin::GetTypeName() const {
  return "proto.RouterToAdmin";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RouterToAdmin

// .proto.SessionList session_list = 1;
bool RouterToAdmin::has_session_list() const {
  return this != internal_default_instance() && session_list_ != NULL;
}
void RouterToAdmin::clear_session_list() {
  if (GetArenaNoVirtual() == NULL && session_list_ != NULL) delete session_list_;
  session_list_ = NULL;
}
const ::proto::SessionList& RouterToAdmin::session_list() const {
  // @@protoc_insertion_point(field_get:proto.RouterToAdmin.session_list)
  return session_list_ != NULL ? *session_list_
                         : *::proto::SessionList::internal_default_instance();
}
::proto::SessionList* RouterToAdmin::mutable_session_list() {
  
  if (session_list_ == NULL) {
    session_list_ = new ::proto::SessionList;
  }
  // @@protoc_insertion_point(field_mutable:proto.RouterToAdmin.session_list)
  return session_list_;
}
::proto::SessionList* RouterToAdmin::release_session_list() {
  // @@protoc_insertion_point(field_release:proto.RouterToAdmin.session_list)
  
  ::proto::SessionList* temp = session_list_;
  session_list_ = NULL;
  return temp;
}
void RouterToAdmin::set_allocated_session_list(::proto::SessionList* session_list) {
  delete session_list_;
  session_list_ = session_list;
  if (session_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RouterToAdmin.session_list)
}

// .proto.SessionResult session_result = 2;
bool RouterToAdmin::has_session_result() const {
  return this != internal_default_instance() && session_result_ != NULL;
}
void RouterToAdmin::clear_session_result() {
  if (GetArenaNoVirtual() == NULL && session_result_ != NULL) delete session_result_;
  session_result_ = NULL;
}
const ::proto::SessionResult& RouterToAdmin::session_result() const {
  // @@protoc_insertion_point(field_get:proto.RouterToAdmin.session_result)
  return session_result_ != NULL ? *session_result_
                         : *::proto::SessionResult::internal_default_instance();
}
::proto::SessionResult* RouterToAdmin::mutable_session_result() {
  
  if (session_result_ == NULL) {
    session_result_ = new ::proto::SessionResult;
  }
  // @@protoc_insertion_point(field_mutable:proto.RouterToAdmin.session_result)
  return session_result_;
}
::proto::SessionResult* RouterToAdmin::release_session_result() {
  // @@protoc_insertion_point(field_release:proto.RouterToAdmin.session_result)
  
  ::proto::SessionResult* temp = session_result_;
  session_result_ = NULL;
  return temp;
}
void RouterToAdmin::set_allocated_session_result(::proto::SessionResult* session_result) {
  delete session_result_;
  session_result_ = session_result;
  if (session_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RouterToAdmin.session_result)
}

// .proto.UserList user_list = 3;
bool RouterToAdmin::has_user_list() const {
  return this != internal_default_instance() && user_list_ != NULL;
}
void RouterToAdmin::clear_user_list() {
  if (GetArenaNoVirtual() == NULL && user_list_ != NULL) delete user_list_;
  user_list_ = NULL;
}
const ::proto::UserList& RouterToAdmin::user_list() const {
  // @@protoc_insertion_point(field_get:proto.RouterToAdmin.user_list)
  return user_list_ != NULL ? *user_list_
                         : *::proto::UserList::internal_default_instance();
}
::proto::UserList* RouterToAdmin::mutable_user_list() {
  
  if (user_list_ == NULL) {
    user_list_ = new ::proto::UserList;
  }
  // @@protoc_insertion_point(field_mutable:proto.RouterToAdmin.user_list)
  return user_list_;
}
::proto::UserList* RouterToAdmin::release_user_list() {
  // @@protoc_insertion_point(field_release:proto.RouterToAdmin.user_list)
  
  ::proto::UserList* temp = user_list_;
  user_list_ = NULL;
  return temp;
}
void RouterToAdmin::set_allocated_user_list(::proto::UserList* user_list) {
  delete user_list_;
  user_list_ = user_list;
  if (user_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RouterToAdmin.user_list)
}

// .proto.UserResult user_result = 4;
bool RouterToAdmin::has_user_result() const {
  return this != internal_default_instance() && user_result_ != NULL;
}
void RouterToAdmin::clear_user_result() {
  if (GetArenaNoVirtual() == NULL && user_result_ != NULL) delete user_result_;
  user_result_ = NULL;
}
const ::proto::UserResult& RouterToAdmin::user_result() const {
  // @@protoc_insertion_point(field_get:proto.RouterToAdmin.user_result)
  return user_result_ != NULL ? *user_result_
                         : *::proto::UserResult::internal_default_instance();
}
::proto::UserResult* RouterToAdmin::mutable_user_result() {
  
  if (user_result_ == NULL) {
    user_result_ = new ::proto::UserResult;
  }
  // @@protoc_insertion_point(field_mutable:proto.RouterToAdmin.user_result)
  return user_result_;
}
::proto::UserResult* RouterToAdmin::release_user_result() {
  // @@protoc_insertion_point(field_release:proto.RouterToAdmin.user_result)
  
  ::proto::UserResult* temp = user_result_;
  user_result_ = NULL;
  return temp;
}
void RouterToAdmin::set_allocated_user_result(::proto::UserResult* user_result) {
  delete user_result_;
  user_result_ = user_result;
  if (user_result) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RouterToAdmin.user_result)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AdminToRouter::kSessionListRequestFieldNumber;
const int AdminToRouter::kSessionRequestFieldNumber;
const int AdminToRouter::kUserListRequestFieldNumber;
const int AdminToRouter::kUserRequestFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AdminToRouter::AdminToRouter()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fadmin_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.AdminToRouter)
}
AdminToRouter::AdminToRouter(const AdminToRouter& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_session_list_request()) {
    session_list_request_ = new ::proto::SessionListRequest(*from.session_list_request_);
  } else {
    session_list_request_ = NULL;
  }
  if (from.has_session_request()) {
    session_request_ = new ::proto::SessionRequest(*from.session_request_);
  } else {
    session_request_ = NULL;
  }
  if (from.has_user_list_request()) {
    user_list_request_ = new ::proto::UserListRequest(*from.user_list_request_);
  } else {
    user_list_request_ = NULL;
  }
  if (from.has_user_request()) {
    user_request_ = new ::proto::UserRequest(*from.user_request_);
  } else {
    user_request_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.AdminToRouter)
}

void AdminToRouter::SharedCtor() {
  ::memset(&session_list_request_, 0, reinterpret_cast<char*>(&user_request_) -
    reinterpret_cast<char*>(&session_list_request_) + sizeof(user_request_));
  _cached_size_ = 0;
}

AdminToRouter::~AdminToRouter() {
  // @@protoc_insertion_point(destructor:proto.AdminToRouter)
  SharedDtor();
}

void AdminToRouter::SharedDtor() {
  if (this != internal_default_instance()) {
    delete session_list_request_;
  }
  if (this != internal_default_instance()) {
    delete session_request_;
  }
  if (this != internal_default_instance()) {
    delete user_list_request_;
  }
  if (this != internal_default_instance()) {
    delete user_request_;
  }
}

void AdminToRouter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const AdminToRouter& AdminToRouter::default_instance() {
  protobuf_router_5fadmin_2eproto::InitDefaults();
  return *internal_default_instance();
}

AdminToRouter* AdminToRouter::New(::google::protobuf::Arena* arena) const {
  AdminToRouter* n = new AdminToRouter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void AdminToRouter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.AdminToRouter)
  if (GetArenaNoVirtual() == NULL && session_list_request_ != NULL) {
    delete session_list_request_;
  }
  session_list_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && session_request_ != NULL) {
    delete session_request_;
  }
  session_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_list_request_ != NULL) {
    delete user_list_request_;
  }
  user_list_request_ = NULL;
  if (GetArenaNoVirtual() == NULL && user_request_ != NULL) {
    delete user_request_;
  }
  user_request_ = NULL;
}

bool AdminToRouter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.AdminToRouter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.SessionListRequest session_list_request = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_list_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.SessionRequest session_request = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_session_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UserListRequest user_list_request = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_list_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.UserRequest user_request = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_user_request()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.AdminToRouter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.AdminToRouter)
  return false;
#undef DO_
}

void AdminToRouter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.AdminToRouter)
  // .proto.SessionListRequest session_list_request = 1;
  if (this->has_session_list_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->session_list_request_, output);
  }

  // .proto.SessionRequest session_request = 2;
  if (this->has_session_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->session_request_, output);
  }

  // .proto.UserListRequest user_list_request = 3;
  if (this->has_user_list_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->user_list_request_, output);
  }

  // .proto.UserRequest user_request = 4;
  if (this->has_user_request()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->user_request_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.AdminToRouter)
}

size_t AdminToRouter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.AdminToRouter)
  size_t total_size = 0;

  // .proto.SessionListRequest session_list_request = 1;
  if (this->has_session_list_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_list_request_);
  }

  // .proto.SessionRequest session_request = 2;
  if (this->has_session_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->session_request_);
  }

  // .proto.UserListRequest user_list_request = 3;
  if (this->has_user_list_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_list_request_);
  }

  // .proto.UserRequest user_request = 4;
  if (this->has_user_request()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->user_request_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminToRouter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AdminToRouter*>(&from));
}

void AdminToRouter::MergeFrom(const AdminToRouter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.AdminToRouter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_session_list_request()) {
    mutable_session_list_request()->::proto::SessionListRequest::MergeFrom(from.session_list_request());
  }
  if (from.has_session_request()) {
    mutable_session_request()->::proto::SessionRequest::MergeFrom(from.session_request());
  }
  if (from.has_user_list_request()) {
    mutable_user_list_request()->::proto::UserListRequest::MergeFrom(from.user_list_request());
  }
  if (from.has_user_request()) {
    mutable_user_request()->::proto::UserRequest::MergeFrom(from.user_request());
  }
}

void AdminToRouter::CopyFrom(const AdminToRouter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.AdminToRouter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminToRouter::IsInitialized() const {
  return true;
}

void AdminToRouter::Swap(AdminToRouter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AdminToRouter::InternalSwap(AdminToRouter* other) {
  std::swap(session_list_request_, other->session_list_request_);
  std::swap(session_request_, other->session_request_);
  std::swap(user_list_request_, other->user_list_request_);
  std::swap(user_request_, other->user_request_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string AdminToRouter::GetTypeName() const {
  return "proto.AdminToRouter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// AdminToRouter

// .proto.SessionListRequest session_list_request = 1;
bool AdminToRouter::has_session_list_request() const {
  return this != internal_default_instance() && session_list_request_ != NULL;
}
void AdminToRouter::clear_session_list_request() {
  if (GetArenaNoVirtual() == NULL && session_list_request_ != NULL) delete session_list_request_;
  session_list_request_ = NULL;
}
const ::proto::SessionListRequest& AdminToRouter::session_list_request() const {
  // @@protoc_insertion_point(field_get:proto.AdminToRouter.session_list_request)
  return session_list_request_ != NULL ? *session_list_request_
                         : *::proto::SessionListRequest::internal_default_instance();
}
::proto::SessionListRequest* AdminToRouter::mutable_session_list_request() {
  
  if (session_list_request_ == NULL) {
    session_list_request_ = new ::proto::SessionListRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.AdminToRouter.session_list_request)
  return session_list_request_;
}
::proto::SessionListRequest* AdminToRouter::release_session_list_request() {
  // @@protoc_insertion_point(field_release:proto.AdminToRouter.session_list_request)
  
  ::proto::SessionListRequest* temp = session_list_request_;
  session_list_request_ = NULL;
  return temp;
}
void AdminToRouter::set_allocated_session_list_request(::proto::SessionListRequest* session_list_request) {
  delete session_list_request_;
  session_list_request_ = session_list_request;
  if (session_list_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AdminToRouter.session_list_request)
}

// .proto.SessionRequest session_request = 2;
bool AdminToRouter::has_session_request() const {
  return this != internal_default_instance() && session_request_ != NULL;
}
void AdminToRouter::clear_session_request() {
  if (GetArenaNoVirtual() == NULL && session_request_ != NULL) delete session_request_;
  session_request_ = NULL;
}
const ::proto::SessionRequest& AdminToRouter::session_request() const {
  // @@protoc_insertion_point(field_get:proto.AdminToRouter.session_request)
  return session_request_ != NULL ? *session_request_
                         : *::proto::SessionRequest::internal_default_instance();
}
::proto::SessionRequest* AdminToRouter::mutable_session_request() {
  
  if (session_request_ == NULL) {
    session_request_ = new ::proto::SessionRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.AdminToRouter.session_request)
  return session_request_;
}
::proto::SessionRequest* AdminToRouter::release_session_request() {
  // @@protoc_insertion_point(field_release:proto.AdminToRouter.session_request)
  
  ::proto::SessionRequest* temp = session_request_;
  session_request_ = NULL;
  return temp;
}
void AdminToRouter::set_allocated_session_request(::proto::SessionRequest* session_request) {
  delete session_request_;
  session_request_ = session_request;
  if (session_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AdminToRouter.session_request)
}

// .proto.UserListRequest user_list_request = 3;
bool AdminToRouter::has_user_list_request() const {
  return this != internal_default_instance() && user_list_request_ != NULL;
}
void AdminToRouter::clear_user_list_request() {
  if (GetArenaNoVirtual() == NULL && user_list_request_ != NULL) delete user_list_request_;
  user_list_request_ = NULL;
}
const ::proto::UserListRequest& AdminToRouter::user_list_request() const {
  // @@protoc_insertion_point(field_get:proto.AdminToRouter.user_list_request)
  return user_list_request_ != NULL ? *user_list_request_
                         : *::proto::UserListRequest::internal_default_instance();
}
::proto::UserListRequest* AdminToRouter::mutable_user_list_request() {
  
  if (user_list_request_ == NULL) {
    user_list_request_ = new ::proto::UserListRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.AdminToRouter.user_list_request)
  return user_list_request_;
}
::proto::UserListRequest* AdminToRouter::release_user_list_request() {
  // @@protoc_insertion_point(field_release:proto.AdminToRouter.user_list_request)
  
  ::proto::UserListRequest* temp = user_list_request_;
  user_list_request_ = NULL;
  return temp;
}
void AdminToRouter::set_allocated_user_list_request(::proto::UserListRequest* user_list_request) {
  delete user_list_request_;
  user_list_request_ = user_list_request;
  if (user_list_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AdminToRouter.user_list_request)
}

// .proto.UserRequest user_request = 4;
bool AdminToRouter::has_user_request() const {
  return this != internal_default_instance() && user_request_ != NULL;
}
void AdminToRouter::clear_user_request() {
  if (GetArenaNoVirtual() == NULL && user_request_ != NULL) delete user_request_;
  user_request_ = NULL;
}
const ::proto::UserRequest& AdminToRouter::user_request() const {
  // @@protoc_insertion_point(field_get:proto.AdminToRouter.user_request)
  return user_request_ != NULL ? *user_request_
                         : *::proto::UserRequest::internal_default_instance();
}
::proto::UserRequest* AdminToRouter::mutable_user_request() {
  
  if (user_request_ == NULL) {
    user_request_ = new ::proto::UserRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.AdminToRouter.user_request)
  return user_request_;
}
::proto::UserRequest* AdminToRouter::release_user_request() {
  // @@protoc_insertion_point(field_release:proto.AdminToRouter.user_request)
  
  ::proto::UserRequest* temp = user_request_;
  user_request_ = NULL;
  return temp;
}
void AdminToRouter::set_allocated_user_request(::proto::UserRequest* user_request) {
  delete user_request_;
  user_request_ = user_request;
  if (user_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.AdminToRouter.user_request)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
