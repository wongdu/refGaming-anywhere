// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desktop.proto

#ifndef PROTOBUF_desktop_2eproto__INCLUDED
#define PROTOBUF_desktop_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
namespace proto {
class AudioPacket;
class AudioPacketDefaultTypeInternal;
extern AudioPacketDefaultTypeInternal _AudioPacket_default_instance_;
class ClientToHost;
class ClientToHostDefaultTypeInternal;
extern ClientToHostDefaultTypeInternal _ClientToHost_default_instance_;
class ClipboardEvent;
class ClipboardEventDefaultTypeInternal;
extern ClipboardEventDefaultTypeInternal _ClipboardEvent_default_instance_;
class CursorShape;
class CursorShapeDefaultTypeInternal;
extern CursorShapeDefaultTypeInternal _CursorShape_default_instance_;
class DesktopConfig;
class DesktopConfigDefaultTypeInternal;
extern DesktopConfigDefaultTypeInternal _DesktopConfig_default_instance_;
class DesktopConfigRequest;
class DesktopConfigRequestDefaultTypeInternal;
extern DesktopConfigRequestDefaultTypeInternal _DesktopConfigRequest_default_instance_;
class DesktopExtension;
class DesktopExtensionDefaultTypeInternal;
extern DesktopExtensionDefaultTypeInternal _DesktopExtension_default_instance_;
class HostToClient;
class HostToClientDefaultTypeInternal;
extern HostToClientDefaultTypeInternal _HostToClient_default_instance_;
class KeyEvent;
class KeyEventDefaultTypeInternal;
extern KeyEventDefaultTypeInternal _KeyEvent_default_instance_;
class MouseEvent;
class MouseEventDefaultTypeInternal;
extern MouseEventDefaultTypeInternal _MouseEvent_default_instance_;
class Rect;
class RectDefaultTypeInternal;
extern RectDefaultTypeInternal _Rect_default_instance_;
class Size;
class SizeDefaultTypeInternal;
extern SizeDefaultTypeInternal _Size_default_instance_;
class VideoPacket;
class VideoPacketDefaultTypeInternal;
extern VideoPacketDefaultTypeInternal _VideoPacket_default_instance_;
class VideoPacketFormat;
class VideoPacketFormatDefaultTypeInternal;
extern VideoPacketFormatDefaultTypeInternal _VideoPacketFormat_default_instance_;
}  // namespace proto

namespace proto {

namespace protobuf_desktop_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_desktop_2eproto

enum KeyEvent_Flags {
  KeyEvent_Flags_UNKNOWN = 0,
  KeyEvent_Flags_CAPSLOCK = 1,
  KeyEvent_Flags_NUMLOCK = 2,
  KeyEvent_Flags_PRESSED = 4,
  KeyEvent_Flags_KeyEvent_Flags_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  KeyEvent_Flags_KeyEvent_Flags_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool KeyEvent_Flags_IsValid(int value);
const KeyEvent_Flags KeyEvent_Flags_Flags_MIN = KeyEvent_Flags_UNKNOWN;
const KeyEvent_Flags KeyEvent_Flags_Flags_MAX = KeyEvent_Flags_PRESSED;
const int KeyEvent_Flags_Flags_ARRAYSIZE = KeyEvent_Flags_Flags_MAX + 1;

enum MouseEvent_ButtonMask {
  MouseEvent_ButtonMask_EMPTY = 0,
  MouseEvent_ButtonMask_LEFT_BUTTON = 1,
  MouseEvent_ButtonMask_MIDDLE_BUTTON = 2,
  MouseEvent_ButtonMask_RIGHT_BUTTON = 4,
  MouseEvent_ButtonMask_WHEEL_UP = 8,
  MouseEvent_ButtonMask_WHEEL_DOWN = 16,
  MouseEvent_ButtonMask_MouseEvent_ButtonMask_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  MouseEvent_ButtonMask_MouseEvent_ButtonMask_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool MouseEvent_ButtonMask_IsValid(int value);
const MouseEvent_ButtonMask MouseEvent_ButtonMask_ButtonMask_MIN = MouseEvent_ButtonMask_EMPTY;
const MouseEvent_ButtonMask MouseEvent_ButtonMask_ButtonMask_MAX = MouseEvent_ButtonMask_WHEEL_DOWN;
const int MouseEvent_ButtonMask_ButtonMask_ARRAYSIZE = MouseEvent_ButtonMask_ButtonMask_MAX + 1;

enum CursorShape_Flags {
  CursorShape_Flags_UNKNOWN = 0,
  CursorShape_Flags_RESET_CACHE = 64,
  CursorShape_Flags_CACHE = 128,
  CursorShape_Flags_CursorShape_Flags_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  CursorShape_Flags_CursorShape_Flags_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool CursorShape_Flags_IsValid(int value);
const CursorShape_Flags CursorShape_Flags_Flags_MIN = CursorShape_Flags_UNKNOWN;
const CursorShape_Flags CursorShape_Flags_Flags_MAX = CursorShape_Flags_CACHE;
const int CursorShape_Flags_Flags_ARRAYSIZE = CursorShape_Flags_Flags_MAX + 1;

enum AudioPacket_SamplingRate {
  AudioPacket_SamplingRate_SAMPLING_RATE_INVALID = 0,
  AudioPacket_SamplingRate_SAMPLING_RATE_44100 = 44100,
  AudioPacket_SamplingRate_SAMPLING_RATE_48000 = 48000,
  AudioPacket_SamplingRate_SAMPLING_RATE_96000 = 96000,
  AudioPacket_SamplingRate_SAMPLING_RATE_192000 = 192000,
  AudioPacket_SamplingRate_AudioPacket_SamplingRate_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AudioPacket_SamplingRate_AudioPacket_SamplingRate_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AudioPacket_SamplingRate_IsValid(int value);
const AudioPacket_SamplingRate AudioPacket_SamplingRate_SamplingRate_MIN = AudioPacket_SamplingRate_SAMPLING_RATE_INVALID;
const AudioPacket_SamplingRate AudioPacket_SamplingRate_SamplingRate_MAX = AudioPacket_SamplingRate_SAMPLING_RATE_192000;
const int AudioPacket_SamplingRate_SamplingRate_ARRAYSIZE = AudioPacket_SamplingRate_SamplingRate_MAX + 1;

enum AudioPacket_BytesPerSample {
  AudioPacket_BytesPerSample_BYTES_PER_SAMPLE_INVALID = 0,
  AudioPacket_BytesPerSample_BYTES_PER_SAMPLE_2 = 2,
  AudioPacket_BytesPerSample_AudioPacket_BytesPerSample_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AudioPacket_BytesPerSample_AudioPacket_BytesPerSample_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AudioPacket_BytesPerSample_IsValid(int value);
const AudioPacket_BytesPerSample AudioPacket_BytesPerSample_BytesPerSample_MIN = AudioPacket_BytesPerSample_BYTES_PER_SAMPLE_INVALID;
const AudioPacket_BytesPerSample AudioPacket_BytesPerSample_BytesPerSample_MAX = AudioPacket_BytesPerSample_BYTES_PER_SAMPLE_2;
const int AudioPacket_BytesPerSample_BytesPerSample_ARRAYSIZE = AudioPacket_BytesPerSample_BytesPerSample_MAX + 1;

enum AudioPacket_Channels {
  AudioPacket_Channels_CHANNELS_INVALID = 0,
  AudioPacket_Channels_CHANNELS_MONO = 1,
  AudioPacket_Channels_CHANNELS_STEREO = 2,
  AudioPacket_Channels_CHANNELS_SURROUND = 3,
  AudioPacket_Channels_CHANNELS_4_0 = 4,
  AudioPacket_Channels_CHANNELS_4_1 = 5,
  AudioPacket_Channels_CHANNELS_5_1 = 6,
  AudioPacket_Channels_CHANNELS_6_1 = 7,
  AudioPacket_Channels_CHANNELS_7_1 = 8,
  AudioPacket_Channels_AudioPacket_Channels_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AudioPacket_Channels_AudioPacket_Channels_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AudioPacket_Channels_IsValid(int value);
const AudioPacket_Channels AudioPacket_Channels_Channels_MIN = AudioPacket_Channels_CHANNELS_INVALID;
const AudioPacket_Channels AudioPacket_Channels_Channels_MAX = AudioPacket_Channels_CHANNELS_7_1;
const int AudioPacket_Channels_Channels_ARRAYSIZE = AudioPacket_Channels_Channels_MAX + 1;

enum VideoEncoding {
  VIDEO_ENCODING_UNKNOWN = 0,
  VIDEO_ENCODING_DEFAULT = 1,
  VIDEO_ENCODING_VP8 = 2,
  VIDEO_ENCODING_VP9 = 4,
  VideoEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  VideoEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool VideoEncoding_IsValid(int value);
const VideoEncoding VideoEncoding_MIN = VIDEO_ENCODING_UNKNOWN;
const VideoEncoding VideoEncoding_MAX = VIDEO_ENCODING_VP9;
const int VideoEncoding_ARRAYSIZE = VideoEncoding_MAX + 1;

enum AudioEncoding {
  AUDIO_ENCODING_UNKNOWN = 0,
  AUDIO_ENCODING_DEFAULT = 1,
  AUDIO_ENCODING_RAW = 2,
  AUDIO_ENCODING_OPUS = 3,
  AudioEncoding_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  AudioEncoding_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool AudioEncoding_IsValid(int value);
const AudioEncoding AudioEncoding_MIN = AUDIO_ENCODING_UNKNOWN;
const AudioEncoding AudioEncoding_MAX = AUDIO_ENCODING_OPUS;
const int AudioEncoding_ARRAYSIZE = AudioEncoding_MAX + 1;

enum DesktopFlags {
  NO_FLAGS = 0,
  ENABLE_CURSOR_SHAPE = 1,
  ENABLE_CLIPBOARD = 2,
  DISABLE_DESKTOP_EFFECTS = 4,
  DISABLE_DESKTOP_WALLPAPER = 8,
  DISABLE_FONT_SMOOTHING = 16,
  BLOCK_REMOTE_INPUT = 32,
  LOCK_AT_DISCONNECT = 64,
  DesktopFlags_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  DesktopFlags_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool DesktopFlags_IsValid(int value);
const DesktopFlags DesktopFlags_MIN = NO_FLAGS;
const DesktopFlags DesktopFlags_MAX = LOCK_AT_DISCONNECT;
const int DesktopFlags_ARRAYSIZE = DesktopFlags_MAX + 1;

// ===================================================================

class KeyEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.KeyEvent) */ {
 public:
  KeyEvent();
  virtual ~KeyEvent();

  KeyEvent(const KeyEvent& from);

  inline KeyEvent& operator=(const KeyEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const KeyEvent& default_instance();

  static inline const KeyEvent* internal_default_instance() {
    return reinterpret_cast<const KeyEvent*>(
               &_KeyEvent_default_instance_);
  }

  void Swap(KeyEvent* other);

  // implements Message ----------------------------------------------

  inline KeyEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  KeyEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const KeyEvent& from);
  void MergeFrom(const KeyEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(KeyEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef KeyEvent_Flags Flags;
  static const Flags UNKNOWN =
    KeyEvent_Flags_UNKNOWN;
  static const Flags CAPSLOCK =
    KeyEvent_Flags_CAPSLOCK;
  static const Flags NUMLOCK =
    KeyEvent_Flags_NUMLOCK;
  static const Flags PRESSED =
    KeyEvent_Flags_PRESSED;
  static inline bool Flags_IsValid(int value) {
    return KeyEvent_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    KeyEvent_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    KeyEvent_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    KeyEvent_Flags_Flags_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // uint32 usb_keycode = 1;
  void clear_usb_keycode();
  static const int kUsbKeycodeFieldNumber = 1;
  ::google::protobuf::uint32 usb_keycode() const;
  void set_usb_keycode(::google::protobuf::uint32 value);

  // uint32 flags = 2;
  void clear_flags();
  static const int kFlagsFieldNumber = 2;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.KeyEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 usb_keycode_;
  ::google::protobuf::uint32 flags_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class MouseEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.MouseEvent) */ {
 public:
  MouseEvent();
  virtual ~MouseEvent();

  MouseEvent(const MouseEvent& from);

  inline MouseEvent& operator=(const MouseEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const MouseEvent& default_instance();

  static inline const MouseEvent* internal_default_instance() {
    return reinterpret_cast<const MouseEvent*>(
               &_MouseEvent_default_instance_);
  }

  void Swap(MouseEvent* other);

  // implements Message ----------------------------------------------

  inline MouseEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  MouseEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const MouseEvent& from);
  void MergeFrom(const MouseEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(MouseEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef MouseEvent_ButtonMask ButtonMask;
  static const ButtonMask EMPTY =
    MouseEvent_ButtonMask_EMPTY;
  static const ButtonMask LEFT_BUTTON =
    MouseEvent_ButtonMask_LEFT_BUTTON;
  static const ButtonMask MIDDLE_BUTTON =
    MouseEvent_ButtonMask_MIDDLE_BUTTON;
  static const ButtonMask RIGHT_BUTTON =
    MouseEvent_ButtonMask_RIGHT_BUTTON;
  static const ButtonMask WHEEL_UP =
    MouseEvent_ButtonMask_WHEEL_UP;
  static const ButtonMask WHEEL_DOWN =
    MouseEvent_ButtonMask_WHEEL_DOWN;
  static inline bool ButtonMask_IsValid(int value) {
    return MouseEvent_ButtonMask_IsValid(value);
  }
  static const ButtonMask ButtonMask_MIN =
    MouseEvent_ButtonMask_ButtonMask_MIN;
  static const ButtonMask ButtonMask_MAX =
    MouseEvent_ButtonMask_ButtonMask_MAX;
  static const int ButtonMask_ARRAYSIZE =
    MouseEvent_ButtonMask_ButtonMask_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // uint32 mask = 1;
  void clear_mask();
  static const int kMaskFieldNumber = 1;
  ::google::protobuf::uint32 mask() const;
  void set_mask(::google::protobuf::uint32 value);

  // int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.MouseEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 mask_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClipboardEvent : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.ClipboardEvent) */ {
 public:
  ClipboardEvent();
  virtual ~ClipboardEvent();

  ClipboardEvent(const ClipboardEvent& from);

  inline ClipboardEvent& operator=(const ClipboardEvent& from) {
    CopyFrom(from);
    return *this;
  }

  static const ClipboardEvent& default_instance();

  static inline const ClipboardEvent* internal_default_instance() {
    return reinterpret_cast<const ClipboardEvent*>(
               &_ClipboardEvent_default_instance_);
  }

  void Swap(ClipboardEvent* other);

  // implements Message ----------------------------------------------

  inline ClipboardEvent* New() const PROTOBUF_FINAL { return New(NULL); }

  ClipboardEvent* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ClipboardEvent& from);
  void MergeFrom(const ClipboardEvent& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClipboardEvent* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string mime_type = 1;
  void clear_mime_type();
  static const int kMimeTypeFieldNumber = 1;
  const ::std::string& mime_type() const;
  void set_mime_type(const ::std::string& value);
  #if LANG_CXX11
  void set_mime_type(::std::string&& value);
  #endif
  void set_mime_type(const char* value);
  void set_mime_type(const char* value, size_t size);
  ::std::string* mutable_mime_type();
  ::std::string* release_mime_type();
  void set_allocated_mime_type(::std::string* mime_type);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:proto.ClipboardEvent)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mime_type_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class CursorShape : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.CursorShape) */ {
 public:
  CursorShape();
  virtual ~CursorShape();

  CursorShape(const CursorShape& from);

  inline CursorShape& operator=(const CursorShape& from) {
    CopyFrom(from);
    return *this;
  }

  static const CursorShape& default_instance();

  static inline const CursorShape* internal_default_instance() {
    return reinterpret_cast<const CursorShape*>(
               &_CursorShape_default_instance_);
  }

  void Swap(CursorShape* other);

  // implements Message ----------------------------------------------

  inline CursorShape* New() const PROTOBUF_FINAL { return New(NULL); }

  CursorShape* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const CursorShape& from);
  void MergeFrom(const CursorShape& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CursorShape* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef CursorShape_Flags Flags;
  static const Flags UNKNOWN =
    CursorShape_Flags_UNKNOWN;
  static const Flags RESET_CACHE =
    CursorShape_Flags_RESET_CACHE;
  static const Flags CACHE =
    CursorShape_Flags_CACHE;
  static inline bool Flags_IsValid(int value) {
    return CursorShape_Flags_IsValid(value);
  }
  static const Flags Flags_MIN =
    CursorShape_Flags_Flags_MIN;
  static const Flags Flags_MAX =
    CursorShape_Flags_Flags_MAX;
  static const int Flags_ARRAYSIZE =
    CursorShape_Flags_Flags_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // bytes data = 6;
  void clear_data();
  static const int kDataFieldNumber = 6;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // uint32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // int32 width = 2;
  void clear_width();
  static const int kWidthFieldNumber = 2;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 3;
  void clear_height();
  static const int kHeightFieldNumber = 3;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // int32 hotspot_x = 4;
  void clear_hotspot_x();
  static const int kHotspotXFieldNumber = 4;
  ::google::protobuf::int32 hotspot_x() const;
  void set_hotspot_x(::google::protobuf::int32 value);

  // int32 hotspot_y = 5;
  void clear_hotspot_y();
  static const int kHotspotYFieldNumber = 5;
  ::google::protobuf::int32 hotspot_y() const;
  void set_hotspot_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.CursorShape)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::uint32 flags_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  ::google::protobuf::int32 hotspot_x_;
  ::google::protobuf::int32 hotspot_y_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Size : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.Size) */ {
 public:
  Size();
  virtual ~Size();

  Size(const Size& from);

  inline Size& operator=(const Size& from) {
    CopyFrom(from);
    return *this;
  }

  static const Size& default_instance();

  static inline const Size* internal_default_instance() {
    return reinterpret_cast<const Size*>(
               &_Size_default_instance_);
  }

  void Swap(Size* other);

  // implements Message ----------------------------------------------

  inline Size* New() const PROTOBUF_FINAL { return New(NULL); }

  Size* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Size& from);
  void MergeFrom(const Size& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Size* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 width = 1;
  void clear_width();
  static const int kWidthFieldNumber = 1;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 2;
  void clear_height();
  static const int kHeightFieldNumber = 2;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.Size)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Rect : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.Rect) */ {
 public:
  Rect();
  virtual ~Rect();

  Rect(const Rect& from);

  inline Rect& operator=(const Rect& from) {
    CopyFrom(from);
    return *this;
  }

  static const Rect& default_instance();

  static inline const Rect* internal_default_instance() {
    return reinterpret_cast<const Rect*>(
               &_Rect_default_instance_);
  }

  void Swap(Rect* other);

  // implements Message ----------------------------------------------

  inline Rect* New() const PROTOBUF_FINAL { return New(NULL); }

  Rect* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Rect& from);
  void MergeFrom(const Rect& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Rect* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 width = 3;
  void clear_width();
  static const int kWidthFieldNumber = 3;
  ::google::protobuf::int32 width() const;
  void set_width(::google::protobuf::int32 value);

  // int32 height = 4;
  void clear_height();
  static const int kHeightFieldNumber = 4;
  ::google::protobuf::int32 height() const;
  void set_height(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:proto.Rect)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 width_;
  ::google::protobuf::int32 height_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoPacketFormat : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.VideoPacketFormat) */ {
 public:
  VideoPacketFormat();
  virtual ~VideoPacketFormat();

  VideoPacketFormat(const VideoPacketFormat& from);

  inline VideoPacketFormat& operator=(const VideoPacketFormat& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoPacketFormat& default_instance();

  static inline const VideoPacketFormat* internal_default_instance() {
    return reinterpret_cast<const VideoPacketFormat*>(
               &_VideoPacketFormat_default_instance_);
  }

  void Swap(VideoPacketFormat* other);

  // implements Message ----------------------------------------------

  inline VideoPacketFormat* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoPacketFormat* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const VideoPacketFormat& from);
  void MergeFrom(const VideoPacketFormat& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoPacketFormat* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.Rect video_rect = 1;
  bool has_video_rect() const;
  void clear_video_rect();
  static const int kVideoRectFieldNumber = 1;
  const ::proto::Rect& video_rect() const;
  ::proto::Rect* mutable_video_rect();
  ::proto::Rect* release_video_rect();
  void set_allocated_video_rect(::proto::Rect* video_rect);

  // .proto.Size screen_size = 3;
  bool has_screen_size() const;
  void clear_screen_size();
  static const int kScreenSizeFieldNumber = 3;
  const ::proto::Size& screen_size() const;
  ::proto::Size* mutable_screen_size();
  ::proto::Size* release_screen_size();
  void set_allocated_screen_size(::proto::Size* screen_size);

  // uint32 capturer_type = 4;
  void clear_capturer_type();
  static const int kCapturerTypeFieldNumber = 4;
  ::google::protobuf::uint32 capturer_type() const;
  void set_capturer_type(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.VideoPacketFormat)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::proto::Rect* video_rect_;
  ::proto::Size* screen_size_;
  ::google::protobuf::uint32 capturer_type_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VideoPacket : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.VideoPacket) */ {
 public:
  VideoPacket();
  virtual ~VideoPacket();

  VideoPacket(const VideoPacket& from);

  inline VideoPacket& operator=(const VideoPacket& from) {
    CopyFrom(from);
    return *this;
  }

  static const VideoPacket& default_instance();

  static inline const VideoPacket* internal_default_instance() {
    return reinterpret_cast<const VideoPacket*>(
               &_VideoPacket_default_instance_);
  }

  void Swap(VideoPacket* other);

  // implements Message ----------------------------------------------

  inline VideoPacket* New() const PROTOBUF_FINAL { return New(NULL); }

  VideoPacket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const VideoPacket& from);
  void MergeFrom(const VideoPacket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(VideoPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .proto.Rect dirty_rect = 3;
  int dirty_rect_size() const;
  void clear_dirty_rect();
  static const int kDirtyRectFieldNumber = 3;
  const ::proto::Rect& dirty_rect(int index) const;
  ::proto::Rect* mutable_dirty_rect(int index);
  ::proto::Rect* add_dirty_rect();
  ::google::protobuf::RepeatedPtrField< ::proto::Rect >*
      mutable_dirty_rect();
  const ::google::protobuf::RepeatedPtrField< ::proto::Rect >&
      dirty_rect() const;

  // bytes data = 4;
  void clear_data();
  static const int kDataFieldNumber = 4;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .proto.VideoPacketFormat format = 2;
  bool has_format() const;
  void clear_format();
  static const int kFormatFieldNumber = 2;
  const ::proto::VideoPacketFormat& format() const;
  ::proto::VideoPacketFormat* mutable_format();
  ::proto::VideoPacketFormat* release_format();
  void set_allocated_format(::proto::VideoPacketFormat* format);

  // .proto.VideoEncoding encoding = 1;
  void clear_encoding();
  static const int kEncodingFieldNumber = 1;
  ::proto::VideoEncoding encoding() const;
  void set_encoding(::proto::VideoEncoding value);

  // @@protoc_insertion_point(class_scope:proto.VideoPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::Rect > dirty_rect_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::proto::VideoPacketFormat* format_;
  int encoding_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AudioPacket : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.AudioPacket) */ {
 public:
  AudioPacket();
  virtual ~AudioPacket();

  AudioPacket(const AudioPacket& from);

  inline AudioPacket& operator=(const AudioPacket& from) {
    CopyFrom(from);
    return *this;
  }

  static const AudioPacket& default_instance();

  static inline const AudioPacket* internal_default_instance() {
    return reinterpret_cast<const AudioPacket*>(
               &_AudioPacket_default_instance_);
  }

  void Swap(AudioPacket* other);

  // implements Message ----------------------------------------------

  inline AudioPacket* New() const PROTOBUF_FINAL { return New(NULL); }

  AudioPacket* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const AudioPacket& from);
  void MergeFrom(const AudioPacket& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AudioPacket* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef AudioPacket_SamplingRate SamplingRate;
  static const SamplingRate SAMPLING_RATE_INVALID =
    AudioPacket_SamplingRate_SAMPLING_RATE_INVALID;
  static const SamplingRate SAMPLING_RATE_44100 =
    AudioPacket_SamplingRate_SAMPLING_RATE_44100;
  static const SamplingRate SAMPLING_RATE_48000 =
    AudioPacket_SamplingRate_SAMPLING_RATE_48000;
  static const SamplingRate SAMPLING_RATE_96000 =
    AudioPacket_SamplingRate_SAMPLING_RATE_96000;
  static const SamplingRate SAMPLING_RATE_192000 =
    AudioPacket_SamplingRate_SAMPLING_RATE_192000;
  static inline bool SamplingRate_IsValid(int value) {
    return AudioPacket_SamplingRate_IsValid(value);
  }
  static const SamplingRate SamplingRate_MIN =
    AudioPacket_SamplingRate_SamplingRate_MIN;
  static const SamplingRate SamplingRate_MAX =
    AudioPacket_SamplingRate_SamplingRate_MAX;
  static const int SamplingRate_ARRAYSIZE =
    AudioPacket_SamplingRate_SamplingRate_ARRAYSIZE;

  typedef AudioPacket_BytesPerSample BytesPerSample;
  static const BytesPerSample BYTES_PER_SAMPLE_INVALID =
    AudioPacket_BytesPerSample_BYTES_PER_SAMPLE_INVALID;
  static const BytesPerSample BYTES_PER_SAMPLE_2 =
    AudioPacket_BytesPerSample_BYTES_PER_SAMPLE_2;
  static inline bool BytesPerSample_IsValid(int value) {
    return AudioPacket_BytesPerSample_IsValid(value);
  }
  static const BytesPerSample BytesPerSample_MIN =
    AudioPacket_BytesPerSample_BytesPerSample_MIN;
  static const BytesPerSample BytesPerSample_MAX =
    AudioPacket_BytesPerSample_BytesPerSample_MAX;
  static const int BytesPerSample_ARRAYSIZE =
    AudioPacket_BytesPerSample_BytesPerSample_ARRAYSIZE;

  typedef AudioPacket_Channels Channels;
  static const Channels CHANNELS_INVALID =
    AudioPacket_Channels_CHANNELS_INVALID;
  static const Channels CHANNELS_MONO =
    AudioPacket_Channels_CHANNELS_MONO;
  static const Channels CHANNELS_STEREO =
    AudioPacket_Channels_CHANNELS_STEREO;
  static const Channels CHANNELS_SURROUND =
    AudioPacket_Channels_CHANNELS_SURROUND;
  static const Channels CHANNELS_4_0 =
    AudioPacket_Channels_CHANNELS_4_0;
  static const Channels CHANNELS_4_1 =
    AudioPacket_Channels_CHANNELS_4_1;
  static const Channels CHANNELS_5_1 =
    AudioPacket_Channels_CHANNELS_5_1;
  static const Channels CHANNELS_6_1 =
    AudioPacket_Channels_CHANNELS_6_1;
  static const Channels CHANNELS_7_1 =
    AudioPacket_Channels_CHANNELS_7_1;
  static inline bool Channels_IsValid(int value) {
    return AudioPacket_Channels_IsValid(value);
  }
  static const Channels Channels_MIN =
    AudioPacket_Channels_Channels_MIN;
  static const Channels Channels_MAX =
    AudioPacket_Channels_Channels_MAX;
  static const int Channels_ARRAYSIZE =
    AudioPacket_Channels_Channels_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // repeated bytes data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data(int index) const;
  ::std::string* mutable_data(int index);
  void set_data(int index, const ::std::string& value);
  void set_data(int index, const char* value);
  void set_data(int index, const void* value, size_t size);
  ::std::string* add_data();
  void add_data(const ::std::string& value);
  void add_data(const char* value);
  void add_data(const void* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& data() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_data();

  // int32 timestamp = 1;
  void clear_timestamp();
  static const int kTimestampFieldNumber = 1;
  ::google::protobuf::int32 timestamp() const;
  void set_timestamp(::google::protobuf::int32 value);

  // .proto.AudioEncoding encoding = 3;
  void clear_encoding();
  static const int kEncodingFieldNumber = 3;
  ::proto::AudioEncoding encoding() const;
  void set_encoding(::proto::AudioEncoding value);

  // .proto.AudioPacket.SamplingRate sampling_rate = 4;
  void clear_sampling_rate();
  static const int kSamplingRateFieldNumber = 4;
  ::proto::AudioPacket_SamplingRate sampling_rate() const;
  void set_sampling_rate(::proto::AudioPacket_SamplingRate value);

  // .proto.AudioPacket.BytesPerSample bytes_per_sample = 5;
  void clear_bytes_per_sample();
  static const int kBytesPerSampleFieldNumber = 5;
  ::proto::AudioPacket_BytesPerSample bytes_per_sample() const;
  void set_bytes_per_sample(::proto::AudioPacket_BytesPerSample value);

  // .proto.AudioPacket.Channels channels = 6;
  void clear_channels();
  static const int kChannelsFieldNumber = 6;
  ::proto::AudioPacket_Channels channels() const;
  void set_channels(::proto::AudioPacket_Channels value);

  // @@protoc_insertion_point(class_scope:proto.AudioPacket)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> data_;
  ::google::protobuf::int32 timestamp_;
  int encoding_;
  int sampling_rate_;
  int bytes_per_sample_;
  int channels_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DesktopExtension : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.DesktopExtension) */ {
 public:
  DesktopExtension();
  virtual ~DesktopExtension();

  DesktopExtension(const DesktopExtension& from);

  inline DesktopExtension& operator=(const DesktopExtension& from) {
    CopyFrom(from);
    return *this;
  }

  static const DesktopExtension& default_instance();

  static inline const DesktopExtension* internal_default_instance() {
    return reinterpret_cast<const DesktopExtension*>(
               &_DesktopExtension_default_instance_);
  }

  void Swap(DesktopExtension* other);

  // implements Message ----------------------------------------------

  inline DesktopExtension* New() const PROTOBUF_FINAL { return New(NULL); }

  DesktopExtension* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DesktopExtension& from);
  void MergeFrom(const DesktopExtension& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DesktopExtension* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // bytes data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // @@protoc_insertion_point(class_scope:proto.DesktopExtension)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DesktopConfigRequest : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.DesktopConfigRequest) */ {
 public:
  DesktopConfigRequest();
  virtual ~DesktopConfigRequest();

  DesktopConfigRequest(const DesktopConfigRequest& from);

  inline DesktopConfigRequest& operator=(const DesktopConfigRequest& from) {
    CopyFrom(from);
    return *this;
  }

  static const DesktopConfigRequest& default_instance();

  static inline const DesktopConfigRequest* internal_default_instance() {
    return reinterpret_cast<const DesktopConfigRequest*>(
               &_DesktopConfigRequest_default_instance_);
  }

  void Swap(DesktopConfigRequest* other);

  // implements Message ----------------------------------------------

  inline DesktopConfigRequest* New() const PROTOBUF_FINAL { return New(NULL); }

  DesktopConfigRequest* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DesktopConfigRequest& from);
  void MergeFrom(const DesktopConfigRequest& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DesktopConfigRequest* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string extensions = 1;
  void clear_extensions();
  static const int kExtensionsFieldNumber = 1;
  const ::std::string& extensions() const;
  void set_extensions(const ::std::string& value);
  #if LANG_CXX11
  void set_extensions(::std::string&& value);
  #endif
  void set_extensions(const char* value);
  void set_extensions(const char* value, size_t size);
  ::std::string* mutable_extensions();
  ::std::string* release_extensions();
  void set_allocated_extensions(::std::string* extensions);

  // uint32 video_encodings = 2;
  void clear_video_encodings();
  static const int kVideoEncodingsFieldNumber = 2;
  ::google::protobuf::uint32 video_encodings() const;
  void set_video_encodings(::google::protobuf::uint32 value);

  // uint32 audio_encodings = 3;
  void clear_audio_encodings();
  static const int kAudioEncodingsFieldNumber = 3;
  ::google::protobuf::uint32 audio_encodings() const;
  void set_audio_encodings(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.DesktopConfigRequest)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr extensions_;
  ::google::protobuf::uint32 video_encodings_;
  ::google::protobuf::uint32 audio_encodings_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DesktopConfig : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.DesktopConfig) */ {
 public:
  DesktopConfig();
  virtual ~DesktopConfig();

  DesktopConfig(const DesktopConfig& from);

  inline DesktopConfig& operator=(const DesktopConfig& from) {
    CopyFrom(from);
    return *this;
  }

  static const DesktopConfig& default_instance();

  static inline const DesktopConfig* internal_default_instance() {
    return reinterpret_cast<const DesktopConfig*>(
               &_DesktopConfig_default_instance_);
  }

  void Swap(DesktopConfig* other);

  // implements Message ----------------------------------------------

  inline DesktopConfig* New() const PROTOBUF_FINAL { return New(NULL); }

  DesktopConfig* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const DesktopConfig& from);
  void MergeFrom(const DesktopConfig& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DesktopConfig* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 flags = 1;
  void clear_flags();
  static const int kFlagsFieldNumber = 1;
  ::google::protobuf::uint32 flags() const;
  void set_flags(::google::protobuf::uint32 value);

  // .proto.VideoEncoding video_encoding = 2;
  void clear_video_encoding();
  static const int kVideoEncodingFieldNumber = 2;
  ::proto::VideoEncoding video_encoding() const;
  void set_video_encoding(::proto::VideoEncoding value);

  // uint32 update_interval = 4;
  void clear_update_interval();
  static const int kUpdateIntervalFieldNumber = 4;
  ::google::protobuf::uint32 update_interval() const;
  void set_update_interval(::google::protobuf::uint32 value);

  // uint32 scale_factor = 6;
  void clear_scale_factor();
  static const int kScaleFactorFieldNumber = 6;
  ::google::protobuf::uint32 scale_factor() const;
  void set_scale_factor(::google::protobuf::uint32 value);

  // .proto.AudioEncoding audio_encoding = 7;
  void clear_audio_encoding();
  static const int kAudioEncodingFieldNumber = 7;
  ::proto::AudioEncoding audio_encoding() const;
  void set_audio_encoding(::proto::AudioEncoding value);

  // @@protoc_insertion_point(class_scope:proto.DesktopConfig)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::uint32 flags_;
  int video_encoding_;
  ::google::protobuf::uint32 update_interval_;
  ::google::protobuf::uint32 scale_factor_;
  int audio_encoding_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class HostToClient : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.HostToClient) */ {
 public:
  HostToClient();
  virtual ~HostToClient();

  HostToClient(const HostToClient& from);

  inline HostToClient& operator=(const HostToClient& from) {
    CopyFrom(from);
    return *this;
  }

  static const HostToClient& default_instance();

  static inline const HostToClient* internal_default_instance() {
    return reinterpret_cast<const HostToClient*>(
               &_HostToClient_default_instance_);
  }

  void Swap(HostToClient* other);

  // implements Message ----------------------------------------------

  inline HostToClient* New() const PROTOBUF_FINAL { return New(NULL); }

  HostToClient* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const HostToClient& from);
  void MergeFrom(const HostToClient& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(HostToClient* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.VideoPacket video_packet = 1;
  bool has_video_packet() const;
  void clear_video_packet();
  static const int kVideoPacketFieldNumber = 1;
  const ::proto::VideoPacket& video_packet() const;
  ::proto::VideoPacket* mutable_video_packet();
  ::proto::VideoPacket* release_video_packet();
  void set_allocated_video_packet(::proto::VideoPacket* video_packet);

  // .proto.AudioPacket audio_packet = 2;
  bool has_audio_packet() const;
  void clear_audio_packet();
  static const int kAudioPacketFieldNumber = 2;
  const ::proto::AudioPacket& audio_packet() const;
  ::proto::AudioPacket* mutable_audio_packet();
  ::proto::AudioPacket* release_audio_packet();
  void set_allocated_audio_packet(::proto::AudioPacket* audio_packet);

  // .proto.CursorShape cursor_shape = 3;
  bool has_cursor_shape() const;
  void clear_cursor_shape();
  static const int kCursorShapeFieldNumber = 3;
  const ::proto::CursorShape& cursor_shape() const;
  ::proto::CursorShape* mutable_cursor_shape();
  ::proto::CursorShape* release_cursor_shape();
  void set_allocated_cursor_shape(::proto::CursorShape* cursor_shape);

  // .proto.ClipboardEvent clipboard_event = 4;
  bool has_clipboard_event() const;
  void clear_clipboard_event();
  static const int kClipboardEventFieldNumber = 4;
  const ::proto::ClipboardEvent& clipboard_event() const;
  ::proto::ClipboardEvent* mutable_clipboard_event();
  ::proto::ClipboardEvent* release_clipboard_event();
  void set_allocated_clipboard_event(::proto::ClipboardEvent* clipboard_event);

  // .proto.DesktopExtension extension = 5;
  bool has_extension() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 5;
  const ::proto::DesktopExtension& extension() const;
  ::proto::DesktopExtension* mutable_extension();
  ::proto::DesktopExtension* release_extension();
  void set_allocated_extension(::proto::DesktopExtension* extension);

  // .proto.DesktopConfigRequest config_request = 6;
  bool has_config_request() const;
  void clear_config_request();
  static const int kConfigRequestFieldNumber = 6;
  const ::proto::DesktopConfigRequest& config_request() const;
  ::proto::DesktopConfigRequest* mutable_config_request();
  ::proto::DesktopConfigRequest* release_config_request();
  void set_allocated_config_request(::proto::DesktopConfigRequest* config_request);

  // @@protoc_insertion_point(class_scope:proto.HostToClient)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::proto::VideoPacket* video_packet_;
  ::proto::AudioPacket* audio_packet_;
  ::proto::CursorShape* cursor_shape_;
  ::proto::ClipboardEvent* clipboard_event_;
  ::proto::DesktopExtension* extension_;
  ::proto::DesktopConfigRequest* config_request_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class ClientToHost : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.ClientToHost) */ {
 public:
  ClientToHost();
  virtual ~ClientToHost();

  ClientToHost(const ClientToHost& from);

  inline ClientToHost& operator=(const ClientToHost& from) {
    CopyFrom(from);
    return *this;
  }

  static const ClientToHost& default_instance();

  static inline const ClientToHost* internal_default_instance() {
    return reinterpret_cast<const ClientToHost*>(
               &_ClientToHost_default_instance_);
  }

  void Swap(ClientToHost* other);

  // implements Message ----------------------------------------------

  inline ClientToHost* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientToHost* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const ClientToHost& from);
  void MergeFrom(const ClientToHost& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(ClientToHost* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .proto.MouseEvent mouse_event = 1;
  bool has_mouse_event() const;
  void clear_mouse_event();
  static const int kMouseEventFieldNumber = 1;
  const ::proto::MouseEvent& mouse_event() const;
  ::proto::MouseEvent* mutable_mouse_event();
  ::proto::MouseEvent* release_mouse_event();
  void set_allocated_mouse_event(::proto::MouseEvent* mouse_event);

  // .proto.KeyEvent key_event = 2;
  bool has_key_event() const;
  void clear_key_event();
  static const int kKeyEventFieldNumber = 2;
  const ::proto::KeyEvent& key_event() const;
  ::proto::KeyEvent* mutable_key_event();
  ::proto::KeyEvent* release_key_event();
  void set_allocated_key_event(::proto::KeyEvent* key_event);

  // .proto.ClipboardEvent clipboard_event = 5;
  bool has_clipboard_event() const;
  void clear_clipboard_event();
  static const int kClipboardEventFieldNumber = 5;
  const ::proto::ClipboardEvent& clipboard_event() const;
  ::proto::ClipboardEvent* mutable_clipboard_event();
  ::proto::ClipboardEvent* release_clipboard_event();
  void set_allocated_clipboard_event(::proto::ClipboardEvent* clipboard_event);

  // .proto.DesktopExtension extension = 6;
  bool has_extension() const;
  void clear_extension();
  static const int kExtensionFieldNumber = 6;
  const ::proto::DesktopExtension& extension() const;
  ::proto::DesktopExtension* mutable_extension();
  ::proto::DesktopExtension* release_extension();
  void set_allocated_extension(::proto::DesktopExtension* extension);

  // .proto.DesktopConfig config = 7;
  bool has_config() const;
  void clear_config();
  static const int kConfigFieldNumber = 7;
  const ::proto::DesktopConfig& config() const;
  ::proto::DesktopConfig* mutable_config();
  ::proto::DesktopConfig* release_config();
  void set_allocated_config(::proto::DesktopConfig* config);

  // @@protoc_insertion_point(class_scope:proto.ClientToHost)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::proto::MouseEvent* mouse_event_;
  ::proto::KeyEvent* key_event_;
  ::proto::ClipboardEvent* clipboard_event_;
  ::proto::DesktopExtension* extension_;
  ::proto::DesktopConfig* config_;
  mutable int _cached_size_;
  friend struct  protobuf_desktop_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// KeyEvent

// uint32 usb_keycode = 1;
inline void KeyEvent::clear_usb_keycode() {
  usb_keycode_ = 0u;
}
inline ::google::protobuf::uint32 KeyEvent::usb_keycode() const {
  // @@protoc_insertion_point(field_get:proto.KeyEvent.usb_keycode)
  return usb_keycode_;
}
inline void KeyEvent::set_usb_keycode(::google::protobuf::uint32 value) {
  
  usb_keycode_ = value;
  // @@protoc_insertion_point(field_set:proto.KeyEvent.usb_keycode)
}

// uint32 flags = 2;
inline void KeyEvent::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 KeyEvent::flags() const {
  // @@protoc_insertion_point(field_get:proto.KeyEvent.flags)
  return flags_;
}
inline void KeyEvent::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.KeyEvent.flags)
}

// -------------------------------------------------------------------

// MouseEvent

// uint32 mask = 1;
inline void MouseEvent::clear_mask() {
  mask_ = 0u;
}
inline ::google::protobuf::uint32 MouseEvent::mask() const {
  // @@protoc_insertion_point(field_get:proto.MouseEvent.mask)
  return mask_;
}
inline void MouseEvent::set_mask(::google::protobuf::uint32 value) {
  
  mask_ = value;
  // @@protoc_insertion_point(field_set:proto.MouseEvent.mask)
}

// int32 x = 2;
inline void MouseEvent::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 MouseEvent::x() const {
  // @@protoc_insertion_point(field_get:proto.MouseEvent.x)
  return x_;
}
inline void MouseEvent::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.MouseEvent.x)
}

// int32 y = 3;
inline void MouseEvent::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 MouseEvent::y() const {
  // @@protoc_insertion_point(field_get:proto.MouseEvent.y)
  return y_;
}
inline void MouseEvent::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.MouseEvent.y)
}

// -------------------------------------------------------------------

// ClipboardEvent

// string mime_type = 1;
inline void ClipboardEvent::clear_mime_type() {
  mime_type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClipboardEvent::mime_type() const {
  // @@protoc_insertion_point(field_get:proto.ClipboardEvent.mime_type)
  return mime_type_.GetNoArena();
}
inline void ClipboardEvent::set_mime_type(const ::std::string& value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ClipboardEvent.mime_type)
}
#if LANG_CXX11
inline void ClipboardEvent::set_mime_type(::std::string&& value) {
  
  mime_type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ClipboardEvent.mime_type)
}
#endif
inline void ClipboardEvent::set_mime_type(const char* value) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ClipboardEvent.mime_type)
}
inline void ClipboardEvent::set_mime_type(const char* value, size_t size) {
  
  mime_type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ClipboardEvent.mime_type)
}
inline ::std::string* ClipboardEvent::mutable_mime_type() {
  
  // @@protoc_insertion_point(field_mutable:proto.ClipboardEvent.mime_type)
  return mime_type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClipboardEvent::release_mime_type() {
  // @@protoc_insertion_point(field_release:proto.ClipboardEvent.mime_type)
  
  return mime_type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClipboardEvent::set_allocated_mime_type(::std::string* mime_type) {
  if (mime_type != NULL) {
    
  } else {
    
  }
  mime_type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mime_type);
  // @@protoc_insertion_point(field_set_allocated:proto.ClipboardEvent.mime_type)
}

// bytes data = 2;
inline void ClipboardEvent::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ClipboardEvent::data() const {
  // @@protoc_insertion_point(field_get:proto.ClipboardEvent.data)
  return data_.GetNoArena();
}
inline void ClipboardEvent::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.ClipboardEvent.data)
}
#if LANG_CXX11
inline void ClipboardEvent::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.ClipboardEvent.data)
}
#endif
inline void ClipboardEvent::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.ClipboardEvent.data)
}
inline void ClipboardEvent::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.ClipboardEvent.data)
}
inline ::std::string* ClipboardEvent::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.ClipboardEvent.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ClipboardEvent::release_data() {
  // @@protoc_insertion_point(field_release:proto.ClipboardEvent.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ClipboardEvent::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.ClipboardEvent.data)
}

// -------------------------------------------------------------------

// CursorShape

// uint32 flags = 1;
inline void CursorShape::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 CursorShape::flags() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.flags)
  return flags_;
}
inline void CursorShape::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.flags)
}

// int32 width = 2;
inline void CursorShape::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 CursorShape::width() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.width)
  return width_;
}
inline void CursorShape::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.width)
}

// int32 height = 3;
inline void CursorShape::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 CursorShape::height() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.height)
  return height_;
}
inline void CursorShape::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.height)
}

// int32 hotspot_x = 4;
inline void CursorShape::clear_hotspot_x() {
  hotspot_x_ = 0;
}
inline ::google::protobuf::int32 CursorShape::hotspot_x() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.hotspot_x)
  return hotspot_x_;
}
inline void CursorShape::set_hotspot_x(::google::protobuf::int32 value) {
  
  hotspot_x_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.hotspot_x)
}

// int32 hotspot_y = 5;
inline void CursorShape::clear_hotspot_y() {
  hotspot_y_ = 0;
}
inline ::google::protobuf::int32 CursorShape::hotspot_y() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.hotspot_y)
  return hotspot_y_;
}
inline void CursorShape::set_hotspot_y(::google::protobuf::int32 value) {
  
  hotspot_y_ = value;
  // @@protoc_insertion_point(field_set:proto.CursorShape.hotspot_y)
}

// bytes data = 6;
inline void CursorShape::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& CursorShape::data() const {
  // @@protoc_insertion_point(field_get:proto.CursorShape.data)
  return data_.GetNoArena();
}
inline void CursorShape::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.CursorShape.data)
}
#if LANG_CXX11
inline void CursorShape::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.CursorShape.data)
}
#endif
inline void CursorShape::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.CursorShape.data)
}
inline void CursorShape::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.CursorShape.data)
}
inline ::std::string* CursorShape::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.CursorShape.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CursorShape::release_data() {
  // @@protoc_insertion_point(field_release:proto.CursorShape.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CursorShape::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.CursorShape.data)
}

// -------------------------------------------------------------------

// Size

// int32 width = 1;
inline void Size::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Size::width() const {
  // @@protoc_insertion_point(field_get:proto.Size.width)
  return width_;
}
inline void Size::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.Size.width)
}

// int32 height = 2;
inline void Size::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Size::height() const {
  // @@protoc_insertion_point(field_get:proto.Size.height)
  return height_;
}
inline void Size::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.Size.height)
}

// -------------------------------------------------------------------

// Rect

// int32 x = 1;
inline void Rect::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 Rect::x() const {
  // @@protoc_insertion_point(field_get:proto.Rect.x)
  return x_;
}
inline void Rect::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:proto.Rect.x)
}

// int32 y = 2;
inline void Rect::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 Rect::y() const {
  // @@protoc_insertion_point(field_get:proto.Rect.y)
  return y_;
}
inline void Rect::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:proto.Rect.y)
}

// int32 width = 3;
inline void Rect::clear_width() {
  width_ = 0;
}
inline ::google::protobuf::int32 Rect::width() const {
  // @@protoc_insertion_point(field_get:proto.Rect.width)
  return width_;
}
inline void Rect::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.Rect.width)
}

// int32 height = 4;
inline void Rect::clear_height() {
  height_ = 0;
}
inline ::google::protobuf::int32 Rect::height() const {
  // @@protoc_insertion_point(field_get:proto.Rect.height)
  return height_;
}
inline void Rect::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.Rect.height)
}

// -------------------------------------------------------------------

// VideoPacketFormat

// .proto.Rect video_rect = 1;
inline bool VideoPacketFormat::has_video_rect() const {
  return this != internal_default_instance() && video_rect_ != NULL;
}
inline void VideoPacketFormat::clear_video_rect() {
  if (GetArenaNoVirtual() == NULL && video_rect_ != NULL) delete video_rect_;
  video_rect_ = NULL;
}
inline const ::proto::Rect& VideoPacketFormat::video_rect() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacketFormat.video_rect)
  return video_rect_ != NULL ? *video_rect_
                         : *::proto::Rect::internal_default_instance();
}
inline ::proto::Rect* VideoPacketFormat::mutable_video_rect() {
  
  if (video_rect_ == NULL) {
    video_rect_ = new ::proto::Rect;
  }
  // @@protoc_insertion_point(field_mutable:proto.VideoPacketFormat.video_rect)
  return video_rect_;
}
inline ::proto::Rect* VideoPacketFormat::release_video_rect() {
  // @@protoc_insertion_point(field_release:proto.VideoPacketFormat.video_rect)
  
  ::proto::Rect* temp = video_rect_;
  video_rect_ = NULL;
  return temp;
}
inline void VideoPacketFormat::set_allocated_video_rect(::proto::Rect* video_rect) {
  delete video_rect_;
  video_rect_ = video_rect;
  if (video_rect) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.VideoPacketFormat.video_rect)
}

// .proto.Size screen_size = 3;
inline bool VideoPacketFormat::has_screen_size() const {
  return this != internal_default_instance() && screen_size_ != NULL;
}
inline void VideoPacketFormat::clear_screen_size() {
  if (GetArenaNoVirtual() == NULL && screen_size_ != NULL) delete screen_size_;
  screen_size_ = NULL;
}
inline const ::proto::Size& VideoPacketFormat::screen_size() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacketFormat.screen_size)
  return screen_size_ != NULL ? *screen_size_
                         : *::proto::Size::internal_default_instance();
}
inline ::proto::Size* VideoPacketFormat::mutable_screen_size() {
  
  if (screen_size_ == NULL) {
    screen_size_ = new ::proto::Size;
  }
  // @@protoc_insertion_point(field_mutable:proto.VideoPacketFormat.screen_size)
  return screen_size_;
}
inline ::proto::Size* VideoPacketFormat::release_screen_size() {
  // @@protoc_insertion_point(field_release:proto.VideoPacketFormat.screen_size)
  
  ::proto::Size* temp = screen_size_;
  screen_size_ = NULL;
  return temp;
}
inline void VideoPacketFormat::set_allocated_screen_size(::proto::Size* screen_size) {
  delete screen_size_;
  screen_size_ = screen_size;
  if (screen_size) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.VideoPacketFormat.screen_size)
}

// uint32 capturer_type = 4;
inline void VideoPacketFormat::clear_capturer_type() {
  capturer_type_ = 0u;
}
inline ::google::protobuf::uint32 VideoPacketFormat::capturer_type() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacketFormat.capturer_type)
  return capturer_type_;
}
inline void VideoPacketFormat::set_capturer_type(::google::protobuf::uint32 value) {
  
  capturer_type_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPacketFormat.capturer_type)
}

// -------------------------------------------------------------------

// VideoPacket

// .proto.VideoEncoding encoding = 1;
inline void VideoPacket::clear_encoding() {
  encoding_ = 0;
}
inline ::proto::VideoEncoding VideoPacket::encoding() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.encoding)
  return static_cast< ::proto::VideoEncoding >(encoding_);
}
inline void VideoPacket::set_encoding(::proto::VideoEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:proto.VideoPacket.encoding)
}

// .proto.VideoPacketFormat format = 2;
inline bool VideoPacket::has_format() const {
  return this != internal_default_instance() && format_ != NULL;
}
inline void VideoPacket::clear_format() {
  if (GetArenaNoVirtual() == NULL && format_ != NULL) delete format_;
  format_ = NULL;
}
inline const ::proto::VideoPacketFormat& VideoPacket::format() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.format)
  return format_ != NULL ? *format_
                         : *::proto::VideoPacketFormat::internal_default_instance();
}
inline ::proto::VideoPacketFormat* VideoPacket::mutable_format() {
  
  if (format_ == NULL) {
    format_ = new ::proto::VideoPacketFormat;
  }
  // @@protoc_insertion_point(field_mutable:proto.VideoPacket.format)
  return format_;
}
inline ::proto::VideoPacketFormat* VideoPacket::release_format() {
  // @@protoc_insertion_point(field_release:proto.VideoPacket.format)
  
  ::proto::VideoPacketFormat* temp = format_;
  format_ = NULL;
  return temp;
}
inline void VideoPacket::set_allocated_format(::proto::VideoPacketFormat* format) {
  delete format_;
  format_ = format;
  if (format) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.VideoPacket.format)
}

// repeated .proto.Rect dirty_rect = 3;
inline int VideoPacket::dirty_rect_size() const {
  return dirty_rect_.size();
}
inline void VideoPacket::clear_dirty_rect() {
  dirty_rect_.Clear();
}
inline const ::proto::Rect& VideoPacket::dirty_rect(int index) const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.dirty_rect)
  return dirty_rect_.Get(index);
}
inline ::proto::Rect* VideoPacket::mutable_dirty_rect(int index) {
  // @@protoc_insertion_point(field_mutable:proto.VideoPacket.dirty_rect)
  return dirty_rect_.Mutable(index);
}
inline ::proto::Rect* VideoPacket::add_dirty_rect() {
  // @@protoc_insertion_point(field_add:proto.VideoPacket.dirty_rect)
  return dirty_rect_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::Rect >*
VideoPacket::mutable_dirty_rect() {
  // @@protoc_insertion_point(field_mutable_list:proto.VideoPacket.dirty_rect)
  return &dirty_rect_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::Rect >&
VideoPacket::dirty_rect() const {
  // @@protoc_insertion_point(field_list:proto.VideoPacket.dirty_rect)
  return dirty_rect_;
}

// bytes data = 4;
inline void VideoPacket::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& VideoPacket::data() const {
  // @@protoc_insertion_point(field_get:proto.VideoPacket.data)
  return data_.GetNoArena();
}
inline void VideoPacket::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.VideoPacket.data)
}
#if LANG_CXX11
inline void VideoPacket::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.VideoPacket.data)
}
#endif
inline void VideoPacket::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.VideoPacket.data)
}
inline void VideoPacket::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.VideoPacket.data)
}
inline ::std::string* VideoPacket::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.VideoPacket.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* VideoPacket::release_data() {
  // @@protoc_insertion_point(field_release:proto.VideoPacket.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void VideoPacket::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.VideoPacket.data)
}

// -------------------------------------------------------------------

// AudioPacket

// int32 timestamp = 1;
inline void AudioPacket::clear_timestamp() {
  timestamp_ = 0;
}
inline ::google::protobuf::int32 AudioPacket::timestamp() const {
  // @@protoc_insertion_point(field_get:proto.AudioPacket.timestamp)
  return timestamp_;
}
inline void AudioPacket::set_timestamp(::google::protobuf::int32 value) {
  
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:proto.AudioPacket.timestamp)
}

// repeated bytes data = 2;
inline int AudioPacket::data_size() const {
  return data_.size();
}
inline void AudioPacket::clear_data() {
  data_.Clear();
}
inline const ::std::string& AudioPacket::data(int index) const {
  // @@protoc_insertion_point(field_get:proto.AudioPacket.data)
  return data_.Get(index);
}
inline ::std::string* AudioPacket::mutable_data(int index) {
  // @@protoc_insertion_point(field_mutable:proto.AudioPacket.data)
  return data_.Mutable(index);
}
inline void AudioPacket::set_data(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.AudioPacket.data)
  data_.Mutable(index)->assign(value);
}
inline void AudioPacket::set_data(int index, const char* value) {
  data_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.AudioPacket.data)
}
inline void AudioPacket::set_data(int index, const void* value, size_t size) {
  data_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.AudioPacket.data)
}
inline ::std::string* AudioPacket::add_data() {
  // @@protoc_insertion_point(field_add_mutable:proto.AudioPacket.data)
  return data_.Add();
}
inline void AudioPacket::add_data(const ::std::string& value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.AudioPacket.data)
}
inline void AudioPacket::add_data(const char* value) {
  data_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.AudioPacket.data)
}
inline void AudioPacket::add_data(const void* value, size_t size) {
  data_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.AudioPacket.data)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
AudioPacket::data() const {
  // @@protoc_insertion_point(field_list:proto.AudioPacket.data)
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
AudioPacket::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:proto.AudioPacket.data)
  return &data_;
}

// .proto.AudioEncoding encoding = 3;
inline void AudioPacket::clear_encoding() {
  encoding_ = 0;
}
inline ::proto::AudioEncoding AudioPacket::encoding() const {
  // @@protoc_insertion_point(field_get:proto.AudioPacket.encoding)
  return static_cast< ::proto::AudioEncoding >(encoding_);
}
inline void AudioPacket::set_encoding(::proto::AudioEncoding value) {
  
  encoding_ = value;
  // @@protoc_insertion_point(field_set:proto.AudioPacket.encoding)
}

// .proto.AudioPacket.SamplingRate sampling_rate = 4;
inline void AudioPacket::clear_sampling_rate() {
  sampling_rate_ = 0;
}
inline ::proto::AudioPacket_SamplingRate AudioPacket::sampling_rate() const {
  // @@protoc_insertion_point(field_get:proto.AudioPacket.sampling_rate)
  return static_cast< ::proto::AudioPacket_SamplingRate >(sampling_rate_);
}
inline void AudioPacket::set_sampling_rate(::proto::AudioPacket_SamplingRate value) {
  
  sampling_rate_ = value;
  // @@protoc_insertion_point(field_set:proto.AudioPacket.sampling_rate)
}

// .proto.AudioPacket.BytesPerSample bytes_per_sample = 5;
inline void AudioPacket::clear_bytes_per_sample() {
  bytes_per_sample_ = 0;
}
inline ::proto::AudioPacket_BytesPerSample AudioPacket::bytes_per_sample() const {
  // @@protoc_insertion_point(field_get:proto.AudioPacket.bytes_per_sample)
  return static_cast< ::proto::AudioPacket_BytesPerSample >(bytes_per_sample_);
}
inline void AudioPacket::set_bytes_per_sample(::proto::AudioPacket_BytesPerSample value) {
  
  bytes_per_sample_ = value;
  // @@protoc_insertion_point(field_set:proto.AudioPacket.bytes_per_sample)
}

// .proto.AudioPacket.Channels channels = 6;
inline void AudioPacket::clear_channels() {
  channels_ = 0;
}
inline ::proto::AudioPacket_Channels AudioPacket::channels() const {
  // @@protoc_insertion_point(field_get:proto.AudioPacket.channels)
  return static_cast< ::proto::AudioPacket_Channels >(channels_);
}
inline void AudioPacket::set_channels(::proto::AudioPacket_Channels value) {
  
  channels_ = value;
  // @@protoc_insertion_point(field_set:proto.AudioPacket.channels)
}

// -------------------------------------------------------------------

// DesktopExtension

// string name = 1;
inline void DesktopExtension::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DesktopExtension::name() const {
  // @@protoc_insertion_point(field_get:proto.DesktopExtension.name)
  return name_.GetNoArena();
}
inline void DesktopExtension::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DesktopExtension.name)
}
#if LANG_CXX11
inline void DesktopExtension::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DesktopExtension.name)
}
#endif
inline void DesktopExtension::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DesktopExtension.name)
}
inline void DesktopExtension::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DesktopExtension.name)
}
inline ::std::string* DesktopExtension::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.DesktopExtension.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DesktopExtension::release_name() {
  // @@protoc_insertion_point(field_release:proto.DesktopExtension.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DesktopExtension::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.DesktopExtension.name)
}

// bytes data = 2;
inline void DesktopExtension::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DesktopExtension::data() const {
  // @@protoc_insertion_point(field_get:proto.DesktopExtension.data)
  return data_.GetNoArena();
}
inline void DesktopExtension::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DesktopExtension.data)
}
#if LANG_CXX11
inline void DesktopExtension::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DesktopExtension.data)
}
#endif
inline void DesktopExtension::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DesktopExtension.data)
}
inline void DesktopExtension::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DesktopExtension.data)
}
inline ::std::string* DesktopExtension::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.DesktopExtension.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DesktopExtension::release_data() {
  // @@protoc_insertion_point(field_release:proto.DesktopExtension.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DesktopExtension::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.DesktopExtension.data)
}

// -------------------------------------------------------------------

// DesktopConfigRequest

// string extensions = 1;
inline void DesktopConfigRequest::clear_extensions() {
  extensions_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& DesktopConfigRequest::extensions() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfigRequest.extensions)
  return extensions_.GetNoArena();
}
inline void DesktopConfigRequest::set_extensions(const ::std::string& value) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.DesktopConfigRequest.extensions)
}
#if LANG_CXX11
inline void DesktopConfigRequest::set_extensions(::std::string&& value) {
  
  extensions_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.DesktopConfigRequest.extensions)
}
#endif
inline void DesktopConfigRequest::set_extensions(const char* value) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.DesktopConfigRequest.extensions)
}
inline void DesktopConfigRequest::set_extensions(const char* value, size_t size) {
  
  extensions_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.DesktopConfigRequest.extensions)
}
inline ::std::string* DesktopConfigRequest::mutable_extensions() {
  
  // @@protoc_insertion_point(field_mutable:proto.DesktopConfigRequest.extensions)
  return extensions_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* DesktopConfigRequest::release_extensions() {
  // @@protoc_insertion_point(field_release:proto.DesktopConfigRequest.extensions)
  
  return extensions_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void DesktopConfigRequest::set_allocated_extensions(::std::string* extensions) {
  if (extensions != NULL) {
    
  } else {
    
  }
  extensions_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), extensions);
  // @@protoc_insertion_point(field_set_allocated:proto.DesktopConfigRequest.extensions)
}

// uint32 video_encodings = 2;
inline void DesktopConfigRequest::clear_video_encodings() {
  video_encodings_ = 0u;
}
inline ::google::protobuf::uint32 DesktopConfigRequest::video_encodings() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfigRequest.video_encodings)
  return video_encodings_;
}
inline void DesktopConfigRequest::set_video_encodings(::google::protobuf::uint32 value) {
  
  video_encodings_ = value;
  // @@protoc_insertion_point(field_set:proto.DesktopConfigRequest.video_encodings)
}

// uint32 audio_encodings = 3;
inline void DesktopConfigRequest::clear_audio_encodings() {
  audio_encodings_ = 0u;
}
inline ::google::protobuf::uint32 DesktopConfigRequest::audio_encodings() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfigRequest.audio_encodings)
  return audio_encodings_;
}
inline void DesktopConfigRequest::set_audio_encodings(::google::protobuf::uint32 value) {
  
  audio_encodings_ = value;
  // @@protoc_insertion_point(field_set:proto.DesktopConfigRequest.audio_encodings)
}

// -------------------------------------------------------------------

// DesktopConfig

// uint32 flags = 1;
inline void DesktopConfig::clear_flags() {
  flags_ = 0u;
}
inline ::google::protobuf::uint32 DesktopConfig::flags() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfig.flags)
  return flags_;
}
inline void DesktopConfig::set_flags(::google::protobuf::uint32 value) {
  
  flags_ = value;
  // @@protoc_insertion_point(field_set:proto.DesktopConfig.flags)
}

// .proto.VideoEncoding video_encoding = 2;
inline void DesktopConfig::clear_video_encoding() {
  video_encoding_ = 0;
}
inline ::proto::VideoEncoding DesktopConfig::video_encoding() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfig.video_encoding)
  return static_cast< ::proto::VideoEncoding >(video_encoding_);
}
inline void DesktopConfig::set_video_encoding(::proto::VideoEncoding value) {
  
  video_encoding_ = value;
  // @@protoc_insertion_point(field_set:proto.DesktopConfig.video_encoding)
}

// uint32 update_interval = 4;
inline void DesktopConfig::clear_update_interval() {
  update_interval_ = 0u;
}
inline ::google::protobuf::uint32 DesktopConfig::update_interval() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfig.update_interval)
  return update_interval_;
}
inline void DesktopConfig::set_update_interval(::google::protobuf::uint32 value) {
  
  update_interval_ = value;
  // @@protoc_insertion_point(field_set:proto.DesktopConfig.update_interval)
}

// uint32 scale_factor = 6;
inline void DesktopConfig::clear_scale_factor() {
  scale_factor_ = 0u;
}
inline ::google::protobuf::uint32 DesktopConfig::scale_factor() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfig.scale_factor)
  return scale_factor_;
}
inline void DesktopConfig::set_scale_factor(::google::protobuf::uint32 value) {
  
  scale_factor_ = value;
  // @@protoc_insertion_point(field_set:proto.DesktopConfig.scale_factor)
}

// .proto.AudioEncoding audio_encoding = 7;
inline void DesktopConfig::clear_audio_encoding() {
  audio_encoding_ = 0;
}
inline ::proto::AudioEncoding DesktopConfig::audio_encoding() const {
  // @@protoc_insertion_point(field_get:proto.DesktopConfig.audio_encoding)
  return static_cast< ::proto::AudioEncoding >(audio_encoding_);
}
inline void DesktopConfig::set_audio_encoding(::proto::AudioEncoding value) {
  
  audio_encoding_ = value;
  // @@protoc_insertion_point(field_set:proto.DesktopConfig.audio_encoding)
}

// -------------------------------------------------------------------

// HostToClient

// .proto.VideoPacket video_packet = 1;
inline bool HostToClient::has_video_packet() const {
  return this != internal_default_instance() && video_packet_ != NULL;
}
inline void HostToClient::clear_video_packet() {
  if (GetArenaNoVirtual() == NULL && video_packet_ != NULL) delete video_packet_;
  video_packet_ = NULL;
}
inline const ::proto::VideoPacket& HostToClient::video_packet() const {
  // @@protoc_insertion_point(field_get:proto.HostToClient.video_packet)
  return video_packet_ != NULL ? *video_packet_
                         : *::proto::VideoPacket::internal_default_instance();
}
inline ::proto::VideoPacket* HostToClient::mutable_video_packet() {
  
  if (video_packet_ == NULL) {
    video_packet_ = new ::proto::VideoPacket;
  }
  // @@protoc_insertion_point(field_mutable:proto.HostToClient.video_packet)
  return video_packet_;
}
inline ::proto::VideoPacket* HostToClient::release_video_packet() {
  // @@protoc_insertion_point(field_release:proto.HostToClient.video_packet)
  
  ::proto::VideoPacket* temp = video_packet_;
  video_packet_ = NULL;
  return temp;
}
inline void HostToClient::set_allocated_video_packet(::proto::VideoPacket* video_packet) {
  delete video_packet_;
  video_packet_ = video_packet;
  if (video_packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HostToClient.video_packet)
}

// .proto.AudioPacket audio_packet = 2;
inline bool HostToClient::has_audio_packet() const {
  return this != internal_default_instance() && audio_packet_ != NULL;
}
inline void HostToClient::clear_audio_packet() {
  if (GetArenaNoVirtual() == NULL && audio_packet_ != NULL) delete audio_packet_;
  audio_packet_ = NULL;
}
inline const ::proto::AudioPacket& HostToClient::audio_packet() const {
  // @@protoc_insertion_point(field_get:proto.HostToClient.audio_packet)
  return audio_packet_ != NULL ? *audio_packet_
                         : *::proto::AudioPacket::internal_default_instance();
}
inline ::proto::AudioPacket* HostToClient::mutable_audio_packet() {
  
  if (audio_packet_ == NULL) {
    audio_packet_ = new ::proto::AudioPacket;
  }
  // @@protoc_insertion_point(field_mutable:proto.HostToClient.audio_packet)
  return audio_packet_;
}
inline ::proto::AudioPacket* HostToClient::release_audio_packet() {
  // @@protoc_insertion_point(field_release:proto.HostToClient.audio_packet)
  
  ::proto::AudioPacket* temp = audio_packet_;
  audio_packet_ = NULL;
  return temp;
}
inline void HostToClient::set_allocated_audio_packet(::proto::AudioPacket* audio_packet) {
  delete audio_packet_;
  audio_packet_ = audio_packet;
  if (audio_packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HostToClient.audio_packet)
}

// .proto.CursorShape cursor_shape = 3;
inline bool HostToClient::has_cursor_shape() const {
  return this != internal_default_instance() && cursor_shape_ != NULL;
}
inline void HostToClient::clear_cursor_shape() {
  if (GetArenaNoVirtual() == NULL && cursor_shape_ != NULL) delete cursor_shape_;
  cursor_shape_ = NULL;
}
inline const ::proto::CursorShape& HostToClient::cursor_shape() const {
  // @@protoc_insertion_point(field_get:proto.HostToClient.cursor_shape)
  return cursor_shape_ != NULL ? *cursor_shape_
                         : *::proto::CursorShape::internal_default_instance();
}
inline ::proto::CursorShape* HostToClient::mutable_cursor_shape() {
  
  if (cursor_shape_ == NULL) {
    cursor_shape_ = new ::proto::CursorShape;
  }
  // @@protoc_insertion_point(field_mutable:proto.HostToClient.cursor_shape)
  return cursor_shape_;
}
inline ::proto::CursorShape* HostToClient::release_cursor_shape() {
  // @@protoc_insertion_point(field_release:proto.HostToClient.cursor_shape)
  
  ::proto::CursorShape* temp = cursor_shape_;
  cursor_shape_ = NULL;
  return temp;
}
inline void HostToClient::set_allocated_cursor_shape(::proto::CursorShape* cursor_shape) {
  delete cursor_shape_;
  cursor_shape_ = cursor_shape;
  if (cursor_shape) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HostToClient.cursor_shape)
}

// .proto.ClipboardEvent clipboard_event = 4;
inline bool HostToClient::has_clipboard_event() const {
  return this != internal_default_instance() && clipboard_event_ != NULL;
}
inline void HostToClient::clear_clipboard_event() {
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) delete clipboard_event_;
  clipboard_event_ = NULL;
}
inline const ::proto::ClipboardEvent& HostToClient::clipboard_event() const {
  // @@protoc_insertion_point(field_get:proto.HostToClient.clipboard_event)
  return clipboard_event_ != NULL ? *clipboard_event_
                         : *::proto::ClipboardEvent::internal_default_instance();
}
inline ::proto::ClipboardEvent* HostToClient::mutable_clipboard_event() {
  
  if (clipboard_event_ == NULL) {
    clipboard_event_ = new ::proto::ClipboardEvent;
  }
  // @@protoc_insertion_point(field_mutable:proto.HostToClient.clipboard_event)
  return clipboard_event_;
}
inline ::proto::ClipboardEvent* HostToClient::release_clipboard_event() {
  // @@protoc_insertion_point(field_release:proto.HostToClient.clipboard_event)
  
  ::proto::ClipboardEvent* temp = clipboard_event_;
  clipboard_event_ = NULL;
  return temp;
}
inline void HostToClient::set_allocated_clipboard_event(::proto::ClipboardEvent* clipboard_event) {
  delete clipboard_event_;
  clipboard_event_ = clipboard_event;
  if (clipboard_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HostToClient.clipboard_event)
}

// .proto.DesktopExtension extension = 5;
inline bool HostToClient::has_extension() const {
  return this != internal_default_instance() && extension_ != NULL;
}
inline void HostToClient::clear_extension() {
  if (GetArenaNoVirtual() == NULL && extension_ != NULL) delete extension_;
  extension_ = NULL;
}
inline const ::proto::DesktopExtension& HostToClient::extension() const {
  // @@protoc_insertion_point(field_get:proto.HostToClient.extension)
  return extension_ != NULL ? *extension_
                         : *::proto::DesktopExtension::internal_default_instance();
}
inline ::proto::DesktopExtension* HostToClient::mutable_extension() {
  
  if (extension_ == NULL) {
    extension_ = new ::proto::DesktopExtension;
  }
  // @@protoc_insertion_point(field_mutable:proto.HostToClient.extension)
  return extension_;
}
inline ::proto::DesktopExtension* HostToClient::release_extension() {
  // @@protoc_insertion_point(field_release:proto.HostToClient.extension)
  
  ::proto::DesktopExtension* temp = extension_;
  extension_ = NULL;
  return temp;
}
inline void HostToClient::set_allocated_extension(::proto::DesktopExtension* extension) {
  delete extension_;
  extension_ = extension;
  if (extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HostToClient.extension)
}

// .proto.DesktopConfigRequest config_request = 6;
inline bool HostToClient::has_config_request() const {
  return this != internal_default_instance() && config_request_ != NULL;
}
inline void HostToClient::clear_config_request() {
  if (GetArenaNoVirtual() == NULL && config_request_ != NULL) delete config_request_;
  config_request_ = NULL;
}
inline const ::proto::DesktopConfigRequest& HostToClient::config_request() const {
  // @@protoc_insertion_point(field_get:proto.HostToClient.config_request)
  return config_request_ != NULL ? *config_request_
                         : *::proto::DesktopConfigRequest::internal_default_instance();
}
inline ::proto::DesktopConfigRequest* HostToClient::mutable_config_request() {
  
  if (config_request_ == NULL) {
    config_request_ = new ::proto::DesktopConfigRequest;
  }
  // @@protoc_insertion_point(field_mutable:proto.HostToClient.config_request)
  return config_request_;
}
inline ::proto::DesktopConfigRequest* HostToClient::release_config_request() {
  // @@protoc_insertion_point(field_release:proto.HostToClient.config_request)
  
  ::proto::DesktopConfigRequest* temp = config_request_;
  config_request_ = NULL;
  return temp;
}
inline void HostToClient::set_allocated_config_request(::proto::DesktopConfigRequest* config_request) {
  delete config_request_;
  config_request_ = config_request;
  if (config_request) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.HostToClient.config_request)
}

// -------------------------------------------------------------------

// ClientToHost

// .proto.MouseEvent mouse_event = 1;
inline bool ClientToHost::has_mouse_event() const {
  return this != internal_default_instance() && mouse_event_ != NULL;
}
inline void ClientToHost::clear_mouse_event() {
  if (GetArenaNoVirtual() == NULL && mouse_event_ != NULL) delete mouse_event_;
  mouse_event_ = NULL;
}
inline const ::proto::MouseEvent& ClientToHost::mouse_event() const {
  // @@protoc_insertion_point(field_get:proto.ClientToHost.mouse_event)
  return mouse_event_ != NULL ? *mouse_event_
                         : *::proto::MouseEvent::internal_default_instance();
}
inline ::proto::MouseEvent* ClientToHost::mutable_mouse_event() {
  
  if (mouse_event_ == NULL) {
    mouse_event_ = new ::proto::MouseEvent;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToHost.mouse_event)
  return mouse_event_;
}
inline ::proto::MouseEvent* ClientToHost::release_mouse_event() {
  // @@protoc_insertion_point(field_release:proto.ClientToHost.mouse_event)
  
  ::proto::MouseEvent* temp = mouse_event_;
  mouse_event_ = NULL;
  return temp;
}
inline void ClientToHost::set_allocated_mouse_event(::proto::MouseEvent* mouse_event) {
  delete mouse_event_;
  mouse_event_ = mouse_event;
  if (mouse_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToHost.mouse_event)
}

// .proto.KeyEvent key_event = 2;
inline bool ClientToHost::has_key_event() const {
  return this != internal_default_instance() && key_event_ != NULL;
}
inline void ClientToHost::clear_key_event() {
  if (GetArenaNoVirtual() == NULL && key_event_ != NULL) delete key_event_;
  key_event_ = NULL;
}
inline const ::proto::KeyEvent& ClientToHost::key_event() const {
  // @@protoc_insertion_point(field_get:proto.ClientToHost.key_event)
  return key_event_ != NULL ? *key_event_
                         : *::proto::KeyEvent::internal_default_instance();
}
inline ::proto::KeyEvent* ClientToHost::mutable_key_event() {
  
  if (key_event_ == NULL) {
    key_event_ = new ::proto::KeyEvent;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToHost.key_event)
  return key_event_;
}
inline ::proto::KeyEvent* ClientToHost::release_key_event() {
  // @@protoc_insertion_point(field_release:proto.ClientToHost.key_event)
  
  ::proto::KeyEvent* temp = key_event_;
  key_event_ = NULL;
  return temp;
}
inline void ClientToHost::set_allocated_key_event(::proto::KeyEvent* key_event) {
  delete key_event_;
  key_event_ = key_event;
  if (key_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToHost.key_event)
}

// .proto.ClipboardEvent clipboard_event = 5;
inline bool ClientToHost::has_clipboard_event() const {
  return this != internal_default_instance() && clipboard_event_ != NULL;
}
inline void ClientToHost::clear_clipboard_event() {
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) delete clipboard_event_;
  clipboard_event_ = NULL;
}
inline const ::proto::ClipboardEvent& ClientToHost::clipboard_event() const {
  // @@protoc_insertion_point(field_get:proto.ClientToHost.clipboard_event)
  return clipboard_event_ != NULL ? *clipboard_event_
                         : *::proto::ClipboardEvent::internal_default_instance();
}
inline ::proto::ClipboardEvent* ClientToHost::mutable_clipboard_event() {
  
  if (clipboard_event_ == NULL) {
    clipboard_event_ = new ::proto::ClipboardEvent;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToHost.clipboard_event)
  return clipboard_event_;
}
inline ::proto::ClipboardEvent* ClientToHost::release_clipboard_event() {
  // @@protoc_insertion_point(field_release:proto.ClientToHost.clipboard_event)
  
  ::proto::ClipboardEvent* temp = clipboard_event_;
  clipboard_event_ = NULL;
  return temp;
}
inline void ClientToHost::set_allocated_clipboard_event(::proto::ClipboardEvent* clipboard_event) {
  delete clipboard_event_;
  clipboard_event_ = clipboard_event;
  if (clipboard_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToHost.clipboard_event)
}

// .proto.DesktopExtension extension = 6;
inline bool ClientToHost::has_extension() const {
  return this != internal_default_instance() && extension_ != NULL;
}
inline void ClientToHost::clear_extension() {
  if (GetArenaNoVirtual() == NULL && extension_ != NULL) delete extension_;
  extension_ = NULL;
}
inline const ::proto::DesktopExtension& ClientToHost::extension() const {
  // @@protoc_insertion_point(field_get:proto.ClientToHost.extension)
  return extension_ != NULL ? *extension_
                         : *::proto::DesktopExtension::internal_default_instance();
}
inline ::proto::DesktopExtension* ClientToHost::mutable_extension() {
  
  if (extension_ == NULL) {
    extension_ = new ::proto::DesktopExtension;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToHost.extension)
  return extension_;
}
inline ::proto::DesktopExtension* ClientToHost::release_extension() {
  // @@protoc_insertion_point(field_release:proto.ClientToHost.extension)
  
  ::proto::DesktopExtension* temp = extension_;
  extension_ = NULL;
  return temp;
}
inline void ClientToHost::set_allocated_extension(::proto::DesktopExtension* extension) {
  delete extension_;
  extension_ = extension;
  if (extension) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToHost.extension)
}

// .proto.DesktopConfig config = 7;
inline bool ClientToHost::has_config() const {
  return this != internal_default_instance() && config_ != NULL;
}
inline void ClientToHost::clear_config() {
  if (GetArenaNoVirtual() == NULL && config_ != NULL) delete config_;
  config_ = NULL;
}
inline const ::proto::DesktopConfig& ClientToHost::config() const {
  // @@protoc_insertion_point(field_get:proto.ClientToHost.config)
  return config_ != NULL ? *config_
                         : *::proto::DesktopConfig::internal_default_instance();
}
inline ::proto::DesktopConfig* ClientToHost::mutable_config() {
  
  if (config_ == NULL) {
    config_ = new ::proto::DesktopConfig;
  }
  // @@protoc_insertion_point(field_mutable:proto.ClientToHost.config)
  return config_;
}
inline ::proto::DesktopConfig* ClientToHost::release_config() {
  // @@protoc_insertion_point(field_release:proto.ClientToHost.config)
  
  ::proto::DesktopConfig* temp = config_;
  config_ = NULL;
  return temp;
}
inline void ClientToHost::set_allocated_config(::proto::DesktopConfig* config) {
  delete config_;
  config_ = config;
  if (config) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.ClientToHost.config)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace proto

#ifndef SWIG
namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::proto::KeyEvent_Flags> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::proto::MouseEvent_ButtonMask> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::proto::CursorShape_Flags> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::proto::AudioPacket_SamplingRate> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::proto::AudioPacket_BytesPerSample> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::proto::AudioPacket_Channels> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::proto::VideoEncoding> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::proto::AudioEncoding> : ::google::protobuf::internal::true_type {};
template <> struct is_proto_enum< ::proto::DesktopFlags> : ::google::protobuf::internal::true_type {};

}  // namespace protobuf
}  // namespace google
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_desktop_2eproto__INCLUDED
