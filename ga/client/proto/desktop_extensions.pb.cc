// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desktop_extensions.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "desktop_extensions.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace proto {
class ScreenDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Screen> {
} _Screen_default_instance_;
class ScreenListDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScreenList> {
} _ScreenList_default_instance_;
class PreferredSizeDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PreferredSize> {
} _PreferredSize_default_instance_;
class PowerControlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PowerControl> {
} _PowerControl_default_instance_;
class SystemInfoDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SystemInfo> {
} _SystemInfo_default_instance_;

namespace protobuf_desktop_5fextensions_2eproto {


void TableStruct::Shutdown() {
  _Screen_default_instance_.Shutdown();
  _ScreenList_default_instance_.Shutdown();
  _PreferredSize_default_instance_.Shutdown();
  _PowerControl_default_instance_.Shutdown();
  _SystemInfo_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::system_info::protobuf_system_5finfo_2eproto::InitDefaults();
  _Screen_default_instance_.DefaultConstruct();
  _ScreenList_default_instance_.DefaultConstruct();
  _PreferredSize_default_instance_.DefaultConstruct();
  _PowerControl_default_instance_.DefaultConstruct();
  _SystemInfo_default_instance_.DefaultConstruct();
  _SystemInfo_default_instance_.get_mutable()->computer_ = const_cast< ::proto::system_info::Computer*>(
      ::proto::system_info::Computer::internal_default_instance());
  _SystemInfo_default_instance_.get_mutable()->operating_system_ = const_cast< ::proto::system_info::OperatingSystem*>(
      ::proto::system_info::OperatingSystem::internal_default_instance());
  _SystemInfo_default_instance_.get_mutable()->motherboard_ = const_cast< ::proto::system_info::Motherboard*>(
      ::proto::system_info::Motherboard::internal_default_instance());
  _SystemInfo_default_instance_.get_mutable()->bios_ = const_cast< ::proto::system_info::Bios*>(
      ::proto::system_info::Bios::internal_default_instance());
  _SystemInfo_default_instance_.get_mutable()->processor_ = const_cast< ::proto::system_info::Processor*>(
      ::proto::system_info::Processor::internal_default_instance());
  _SystemInfo_default_instance_.get_mutable()->memory_ = const_cast< ::proto::system_info::Memory*>(
      ::proto::system_info::Memory::internal_default_instance());
  _SystemInfo_default_instance_.get_mutable()->logical_drives_ = const_cast< ::proto::system_info::LogicalDrives*>(
      ::proto::system_info::LogicalDrives::internal_default_instance());
  _SystemInfo_default_instance_.get_mutable()->printers_ = const_cast< ::proto::system_info::Printers*>(
      ::proto::system_info::Printers::internal_default_instance());
  _SystemInfo_default_instance_.get_mutable()->network_adapters_ = const_cast< ::proto::system_info::NetworkAdapters*>(
      ::proto::system_info::NetworkAdapters::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::proto::system_info::protobuf_system_5finfo_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_desktop_5fextensions_2eproto

bool PowerControl_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const PowerControl_Action PowerControl::ACTION_UNKNOWN;
const PowerControl_Action PowerControl::ACTION_SHUTDOWN;
const PowerControl_Action PowerControl::ACTION_REBOOT;
const PowerControl_Action PowerControl::ACTION_LOGOFF;
const PowerControl_Action PowerControl::ACTION_LOCK;
const PowerControl_Action PowerControl::Action_MIN;
const PowerControl_Action PowerControl::Action_MAX;
const int PowerControl::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Screen::kIdFieldNumber;
const int Screen::kTitleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Screen::Screen()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fextensions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.Screen)
}
Screen::Screen(const Screen& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.title().size() > 0) {
    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  id_ = from.id_;
  // @@protoc_insertion_point(copy_constructor:proto.Screen)
}

void Screen::SharedCtor() {
  title_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
  _cached_size_ = 0;
}

Screen::~Screen() {
  // @@protoc_insertion_point(destructor:proto.Screen)
  SharedDtor();
}

void Screen::SharedDtor() {
  title_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Screen::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Screen& Screen::default_instance() {
  protobuf_desktop_5fextensions_2eproto::InitDefaults();
  return *internal_default_instance();
}

Screen* Screen::New(::google::protobuf::Arena* arena) const {
  Screen* n = new Screen;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Screen::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.Screen)
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  id_ = GOOGLE_LONGLONG(0);
}

bool Screen::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.Screen)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int64 id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string title = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_title()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->title().data(), this->title().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.Screen.title"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.Screen)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.Screen)
  return false;
#undef DO_
}

void Screen::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.Screen)
  // int64 id = 1;
  if (this->id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // string title = 2;
  if (this->title().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->title().data(), this->title().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.Screen.title");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->title(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.Screen)
}

size_t Screen::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.Screen)
  size_t total_size = 0;

  // string title = 2;
  if (this->title().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->title());
  }

  // int64 id = 1;
  if (this->id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Screen::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Screen*>(&from));
}

void Screen::MergeFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.Screen)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.title().size() > 0) {

    title_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.title_);
  }
  if (from.id() != 0) {
    set_id(from.id());
  }
}

void Screen::CopyFrom(const Screen& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.Screen)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Screen::IsInitialized() const {
  return true;
}

void Screen::Swap(Screen* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Screen::InternalSwap(Screen* other) {
  title_.Swap(&other->title_);
  std::swap(id_, other->id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Screen::GetTypeName() const {
  return "proto.Screen";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Screen

// int64 id = 1;
void Screen::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 Screen::id() const {
  // @@protoc_insertion_point(field_get:proto.Screen.id)
  return id_;
}
void Screen::set_id(::google::protobuf::int64 value) {
  
  id_ = value;
  // @@protoc_insertion_point(field_set:proto.Screen.id)
}

// string title = 2;
void Screen::clear_title() {
  title_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Screen::title() const {
  // @@protoc_insertion_point(field_get:proto.Screen.title)
  return title_.GetNoArena();
}
void Screen::set_title(const ::std::string& value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.Screen.title)
}
#if LANG_CXX11
void Screen::set_title(::std::string&& value) {
  
  title_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.Screen.title)
}
#endif
void Screen::set_title(const char* value) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.Screen.title)
}
void Screen::set_title(const char* value, size_t size) {
  
  title_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.Screen.title)
}
::std::string* Screen::mutable_title() {
  
  // @@protoc_insertion_point(field_mutable:proto.Screen.title)
  return title_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Screen::release_title() {
  // @@protoc_insertion_point(field_release:proto.Screen.title)
  
  return title_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Screen::set_allocated_title(::std::string* title) {
  if (title != NULL) {
    
  } else {
    
  }
  title_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), title);
  // @@protoc_insertion_point(field_set_allocated:proto.Screen.title)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScreenList::kScreenFieldNumber;
const int ScreenList::kCurrentScreenFieldNumber;
const int ScreenList::kPrimaryScreenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScreenList::ScreenList()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fextensions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.ScreenList)
}
ScreenList::ScreenList(const ScreenList& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      screen_(from.screen_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&current_screen_, &from.current_screen_,
    reinterpret_cast<char*>(&primary_screen_) -
    reinterpret_cast<char*>(&current_screen_) + sizeof(primary_screen_));
  // @@protoc_insertion_point(copy_constructor:proto.ScreenList)
}

void ScreenList::SharedCtor() {
  ::memset(&current_screen_, 0, reinterpret_cast<char*>(&primary_screen_) -
    reinterpret_cast<char*>(&current_screen_) + sizeof(primary_screen_));
  _cached_size_ = 0;
}

ScreenList::~ScreenList() {
  // @@protoc_insertion_point(destructor:proto.ScreenList)
  SharedDtor();
}

void ScreenList::SharedDtor() {
}

void ScreenList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScreenList& ScreenList::default_instance() {
  protobuf_desktop_5fextensions_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScreenList* ScreenList::New(::google::protobuf::Arena* arena) const {
  ScreenList* n = new ScreenList;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScreenList::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.ScreenList)
  screen_.Clear();
  ::memset(&current_screen_, 0, reinterpret_cast<char*>(&primary_screen_) -
    reinterpret_cast<char*>(&current_screen_) + sizeof(primary_screen_));
}

bool ScreenList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.ScreenList)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.Screen screen = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_screen()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // int64 current_screen = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &current_screen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int64 primary_screen = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &primary_screen_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.ScreenList)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.ScreenList)
  return false;
#undef DO_
}

void ScreenList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.ScreenList)
  // repeated .proto.Screen screen = 1;
  for (unsigned int i = 0, n = this->screen_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->screen(i), output);
  }

  // int64 current_screen = 2;
  if (this->current_screen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->current_screen(), output);
  }

  // int64 primary_screen = 3;
  if (this->primary_screen() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->primary_screen(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.ScreenList)
}

size_t ScreenList::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.ScreenList)
  size_t total_size = 0;

  // repeated .proto.Screen screen = 1;
  {
    unsigned int count = this->screen_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->screen(i));
    }
  }

  // int64 current_screen = 2;
  if (this->current_screen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->current_screen());
  }

  // int64 primary_screen = 3;
  if (this->primary_screen() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int64Size(
        this->primary_screen());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScreenList::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScreenList*>(&from));
}

void ScreenList::MergeFrom(const ScreenList& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.ScreenList)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  screen_.MergeFrom(from.screen_);
  if (from.current_screen() != 0) {
    set_current_screen(from.current_screen());
  }
  if (from.primary_screen() != 0) {
    set_primary_screen(from.primary_screen());
  }
}

void ScreenList::CopyFrom(const ScreenList& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.ScreenList)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenList::IsInitialized() const {
  return true;
}

void ScreenList::Swap(ScreenList* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScreenList::InternalSwap(ScreenList* other) {
  screen_.UnsafeArenaSwap(&other->screen_);
  std::swap(current_screen_, other->current_screen_);
  std::swap(primary_screen_, other->primary_screen_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ScreenList::GetTypeName() const {
  return "proto.ScreenList";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScreenList

// repeated .proto.Screen screen = 1;
int ScreenList::screen_size() const {
  return screen_.size();
}
void ScreenList::clear_screen() {
  screen_.Clear();
}
const ::proto::Screen& ScreenList::screen(int index) const {
  // @@protoc_insertion_point(field_get:proto.ScreenList.screen)
  return screen_.Get(index);
}
::proto::Screen* ScreenList::mutable_screen(int index) {
  // @@protoc_insertion_point(field_mutable:proto.ScreenList.screen)
  return screen_.Mutable(index);
}
::proto::Screen* ScreenList::add_screen() {
  // @@protoc_insertion_point(field_add:proto.ScreenList.screen)
  return screen_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::Screen >*
ScreenList::mutable_screen() {
  // @@protoc_insertion_point(field_mutable_list:proto.ScreenList.screen)
  return &screen_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::Screen >&
ScreenList::screen() const {
  // @@protoc_insertion_point(field_list:proto.ScreenList.screen)
  return screen_;
}

// int64 current_screen = 2;
void ScreenList::clear_current_screen() {
  current_screen_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ScreenList::current_screen() const {
  // @@protoc_insertion_point(field_get:proto.ScreenList.current_screen)
  return current_screen_;
}
void ScreenList::set_current_screen(::google::protobuf::int64 value) {
  
  current_screen_ = value;
  // @@protoc_insertion_point(field_set:proto.ScreenList.current_screen)
}

// int64 primary_screen = 3;
void ScreenList::clear_primary_screen() {
  primary_screen_ = GOOGLE_LONGLONG(0);
}
::google::protobuf::int64 ScreenList::primary_screen() const {
  // @@protoc_insertion_point(field_get:proto.ScreenList.primary_screen)
  return primary_screen_;
}
void ScreenList::set_primary_screen(::google::protobuf::int64 value) {
  
  primary_screen_ = value;
  // @@protoc_insertion_point(field_set:proto.ScreenList.primary_screen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PreferredSize::kWidthFieldNumber;
const int PreferredSize::kHeightFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PreferredSize::PreferredSize()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fextensions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PreferredSize)
}
PreferredSize::PreferredSize(const PreferredSize& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
  // @@protoc_insertion_point(copy_constructor:proto.PreferredSize)
}

void PreferredSize::SharedCtor() {
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
  _cached_size_ = 0;
}

PreferredSize::~PreferredSize() {
  // @@protoc_insertion_point(destructor:proto.PreferredSize)
  SharedDtor();
}

void PreferredSize::SharedDtor() {
}

void PreferredSize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PreferredSize& PreferredSize::default_instance() {
  protobuf_desktop_5fextensions_2eproto::InitDefaults();
  return *internal_default_instance();
}

PreferredSize* PreferredSize::New(::google::protobuf::Arena* arena) const {
  PreferredSize* n = new PreferredSize;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PreferredSize::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PreferredSize)
  ::memset(&width_, 0, reinterpret_cast<char*>(&height_) -
    reinterpret_cast<char*>(&width_) + sizeof(height_));
}

bool PreferredSize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PreferredSize)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 width = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PreferredSize)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PreferredSize)
  return false;
#undef DO_
}

void PreferredSize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PreferredSize)
  // int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.PreferredSize)
}

size_t PreferredSize::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PreferredSize)
  size_t total_size = 0;

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PreferredSize::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PreferredSize*>(&from));
}

void PreferredSize::MergeFrom(const PreferredSize& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PreferredSize)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
}

void PreferredSize::CopyFrom(const PreferredSize& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PreferredSize)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PreferredSize::IsInitialized() const {
  return true;
}

void PreferredSize::Swap(PreferredSize* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PreferredSize::InternalSwap(PreferredSize* other) {
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PreferredSize::GetTypeName() const {
  return "proto.PreferredSize";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PreferredSize

// int32 width = 1;
void PreferredSize::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 PreferredSize::width() const {
  // @@protoc_insertion_point(field_get:proto.PreferredSize.width)
  return width_;
}
void PreferredSize::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.PreferredSize.width)
}

// int32 height = 2;
void PreferredSize::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 PreferredSize::height() const {
  // @@protoc_insertion_point(field_get:proto.PreferredSize.height)
  return height_;
}
void PreferredSize::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.PreferredSize.height)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PowerControl::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PowerControl::PowerControl()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fextensions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PowerControl)
}
PowerControl::PowerControl(const PowerControl& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:proto.PowerControl)
}

void PowerControl::SharedCtor() {
  action_ = 0;
  _cached_size_ = 0;
}

PowerControl::~PowerControl() {
  // @@protoc_insertion_point(destructor:proto.PowerControl)
  SharedDtor();
}

void PowerControl::SharedDtor() {
}

void PowerControl::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PowerControl& PowerControl::default_instance() {
  protobuf_desktop_5fextensions_2eproto::InitDefaults();
  return *internal_default_instance();
}

PowerControl* PowerControl::New(::google::protobuf::Arena* arena) const {
  PowerControl* n = new PowerControl;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PowerControl::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PowerControl)
  action_ = 0;
}

bool PowerControl::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PowerControl)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.PowerControl.Action action = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::proto::PowerControl_Action >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PowerControl)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PowerControl)
  return false;
#undef DO_
}

void PowerControl::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PowerControl)
  // .proto.PowerControl.Action action = 1;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.PowerControl)
}

size_t PowerControl::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PowerControl)
  size_t total_size = 0;

  // .proto.PowerControl.Action action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PowerControl::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PowerControl*>(&from));
}

void PowerControl::MergeFrom(const PowerControl& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PowerControl)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void PowerControl::CopyFrom(const PowerControl& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PowerControl)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PowerControl::IsInitialized() const {
  return true;
}

void PowerControl::Swap(PowerControl* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PowerControl::InternalSwap(PowerControl* other) {
  std::swap(action_, other->action_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PowerControl::GetTypeName() const {
  return "proto.PowerControl";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PowerControl

// .proto.PowerControl.Action action = 1;
void PowerControl::clear_action() {
  action_ = 0;
}
::proto::PowerControl_Action PowerControl::action() const {
  // @@protoc_insertion_point(field_get:proto.PowerControl.action)
  return static_cast< ::proto::PowerControl_Action >(action_);
}
void PowerControl::set_action(::proto::PowerControl_Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:proto.PowerControl.action)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SystemInfo::kComputerFieldNumber;
const int SystemInfo::kOperatingSystemFieldNumber;
const int SystemInfo::kMotherboardFieldNumber;
const int SystemInfo::kBiosFieldNumber;
const int SystemInfo::kProcessorFieldNumber;
const int SystemInfo::kMemoryFieldNumber;
const int SystemInfo::kLogicalDrivesFieldNumber;
const int SystemInfo::kPrintersFieldNumber;
const int SystemInfo::kNetworkAdaptersFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SystemInfo::SystemInfo()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5fextensions_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.SystemInfo)
}
SystemInfo::SystemInfo(const SystemInfo& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computer()) {
    computer_ = new ::proto::system_info::Computer(*from.computer_);
  } else {
    computer_ = NULL;
  }
  if (from.has_operating_system()) {
    operating_system_ = new ::proto::system_info::OperatingSystem(*from.operating_system_);
  } else {
    operating_system_ = NULL;
  }
  if (from.has_motherboard()) {
    motherboard_ = new ::proto::system_info::Motherboard(*from.motherboard_);
  } else {
    motherboard_ = NULL;
  }
  if (from.has_bios()) {
    bios_ = new ::proto::system_info::Bios(*from.bios_);
  } else {
    bios_ = NULL;
  }
  if (from.has_processor()) {
    processor_ = new ::proto::system_info::Processor(*from.processor_);
  } else {
    processor_ = NULL;
  }
  if (from.has_memory()) {
    memory_ = new ::proto::system_info::Memory(*from.memory_);
  } else {
    memory_ = NULL;
  }
  if (from.has_logical_drives()) {
    logical_drives_ = new ::proto::system_info::LogicalDrives(*from.logical_drives_);
  } else {
    logical_drives_ = NULL;
  }
  if (from.has_printers()) {
    printers_ = new ::proto::system_info::Printers(*from.printers_);
  } else {
    printers_ = NULL;
  }
  if (from.has_network_adapters()) {
    network_adapters_ = new ::proto::system_info::NetworkAdapters(*from.network_adapters_);
  } else {
    network_adapters_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.SystemInfo)
}

void SystemInfo::SharedCtor() {
  ::memset(&computer_, 0, reinterpret_cast<char*>(&network_adapters_) -
    reinterpret_cast<char*>(&computer_) + sizeof(network_adapters_));
  _cached_size_ = 0;
}

SystemInfo::~SystemInfo() {
  // @@protoc_insertion_point(destructor:proto.SystemInfo)
  SharedDtor();
}

void SystemInfo::SharedDtor() {
  if (this != internal_default_instance()) {
    delete computer_;
  }
  if (this != internal_default_instance()) {
    delete operating_system_;
  }
  if (this != internal_default_instance()) {
    delete motherboard_;
  }
  if (this != internal_default_instance()) {
    delete bios_;
  }
  if (this != internal_default_instance()) {
    delete processor_;
  }
  if (this != internal_default_instance()) {
    delete memory_;
  }
  if (this != internal_default_instance()) {
    delete logical_drives_;
  }
  if (this != internal_default_instance()) {
    delete printers_;
  }
  if (this != internal_default_instance()) {
    delete network_adapters_;
  }
}

void SystemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SystemInfo& SystemInfo::default_instance() {
  protobuf_desktop_5fextensions_2eproto::InitDefaults();
  return *internal_default_instance();
}

SystemInfo* SystemInfo::New(::google::protobuf::Arena* arena) const {
  SystemInfo* n = new SystemInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SystemInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.SystemInfo)
  if (GetArenaNoVirtual() == NULL && computer_ != NULL) {
    delete computer_;
  }
  computer_ = NULL;
  if (GetArenaNoVirtual() == NULL && operating_system_ != NULL) {
    delete operating_system_;
  }
  operating_system_ = NULL;
  if (GetArenaNoVirtual() == NULL && motherboard_ != NULL) {
    delete motherboard_;
  }
  motherboard_ = NULL;
  if (GetArenaNoVirtual() == NULL && bios_ != NULL) {
    delete bios_;
  }
  bios_ = NULL;
  if (GetArenaNoVirtual() == NULL && processor_ != NULL) {
    delete processor_;
  }
  processor_ = NULL;
  if (GetArenaNoVirtual() == NULL && memory_ != NULL) {
    delete memory_;
  }
  memory_ = NULL;
  if (GetArenaNoVirtual() == NULL && logical_drives_ != NULL) {
    delete logical_drives_;
  }
  logical_drives_ = NULL;
  if (GetArenaNoVirtual() == NULL && printers_ != NULL) {
    delete printers_;
  }
  printers_ = NULL;
  if (GetArenaNoVirtual() == NULL && network_adapters_ != NULL) {
    delete network_adapters_;
  }
  network_adapters_ = NULL;
}

bool SystemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.SystemInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.system_info.Computer computer = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_computer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.system_info.OperatingSystem operating_system = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_operating_system()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.system_info.Motherboard motherboard = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_motherboard()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.system_info.Bios bios = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bios()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.system_info.Processor processor = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_processor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.system_info.Memory memory = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_memory()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.system_info.LogicalDrives logical_drives = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_logical_drives()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.system_info.Printers printers = 8;
      case 8: {
        if (tag == 66u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_printers()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.system_info.NetworkAdapters network_adapters = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_network_adapters()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.SystemInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.SystemInfo)
  return false;
#undef DO_
}

void SystemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.SystemInfo)
  // .proto.system_info.Computer computer = 1;
  if (this->has_computer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->computer_, output);
  }

  // .proto.system_info.OperatingSystem operating_system = 2;
  if (this->has_operating_system()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->operating_system_, output);
  }

  // .proto.system_info.Motherboard motherboard = 3;
  if (this->has_motherboard()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->motherboard_, output);
  }

  // .proto.system_info.Bios bios = 4;
  if (this->has_bios()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->bios_, output);
  }

  // .proto.system_info.Processor processor = 5;
  if (this->has_processor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->processor_, output);
  }

  // .proto.system_info.Memory memory = 6;
  if (this->has_memory()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->memory_, output);
  }

  // .proto.system_info.LogicalDrives logical_drives = 7;
  if (this->has_logical_drives()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->logical_drives_, output);
  }

  // .proto.system_info.Printers printers = 8;
  if (this->has_printers()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, *this->printers_, output);
  }

  // .proto.system_info.NetworkAdapters network_adapters = 9;
  if (this->has_network_adapters()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      9, *this->network_adapters_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.SystemInfo)
}

size_t SystemInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.SystemInfo)
  size_t total_size = 0;

  // .proto.system_info.Computer computer = 1;
  if (this->has_computer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->computer_);
  }

  // .proto.system_info.OperatingSystem operating_system = 2;
  if (this->has_operating_system()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->operating_system_);
  }

  // .proto.system_info.Motherboard motherboard = 3;
  if (this->has_motherboard()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->motherboard_);
  }

  // .proto.system_info.Bios bios = 4;
  if (this->has_bios()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->bios_);
  }

  // .proto.system_info.Processor processor = 5;
  if (this->has_processor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->processor_);
  }

  // .proto.system_info.Memory memory = 6;
  if (this->has_memory()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->memory_);
  }

  // .proto.system_info.LogicalDrives logical_drives = 7;
  if (this->has_logical_drives()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->logical_drives_);
  }

  // .proto.system_info.Printers printers = 8;
  if (this->has_printers()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->printers_);
  }

  // .proto.system_info.NetworkAdapters network_adapters = 9;
  if (this->has_network_adapters()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->network_adapters_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SystemInfo::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SystemInfo*>(&from));
}

void SystemInfo::MergeFrom(const SystemInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.SystemInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_computer()) {
    mutable_computer()->::proto::system_info::Computer::MergeFrom(from.computer());
  }
  if (from.has_operating_system()) {
    mutable_operating_system()->::proto::system_info::OperatingSystem::MergeFrom(from.operating_system());
  }
  if (from.has_motherboard()) {
    mutable_motherboard()->::proto::system_info::Motherboard::MergeFrom(from.motherboard());
  }
  if (from.has_bios()) {
    mutable_bios()->::proto::system_info::Bios::MergeFrom(from.bios());
  }
  if (from.has_processor()) {
    mutable_processor()->::proto::system_info::Processor::MergeFrom(from.processor());
  }
  if (from.has_memory()) {
    mutable_memory()->::proto::system_info::Memory::MergeFrom(from.memory());
  }
  if (from.has_logical_drives()) {
    mutable_logical_drives()->::proto::system_info::LogicalDrives::MergeFrom(from.logical_drives());
  }
  if (from.has_printers()) {
    mutable_printers()->::proto::system_info::Printers::MergeFrom(from.printers());
  }
  if (from.has_network_adapters()) {
    mutable_network_adapters()->::proto::system_info::NetworkAdapters::MergeFrom(from.network_adapters());
  }
}

void SystemInfo::CopyFrom(const SystemInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.SystemInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SystemInfo::IsInitialized() const {
  return true;
}

void SystemInfo::Swap(SystemInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SystemInfo::InternalSwap(SystemInfo* other) {
  std::swap(computer_, other->computer_);
  std::swap(operating_system_, other->operating_system_);
  std::swap(motherboard_, other->motherboard_);
  std::swap(bios_, other->bios_);
  std::swap(processor_, other->processor_);
  std::swap(memory_, other->memory_);
  std::swap(logical_drives_, other->logical_drives_);
  std::swap(printers_, other->printers_);
  std::swap(network_adapters_, other->network_adapters_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SystemInfo::GetTypeName() const {
  return "proto.SystemInfo";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SystemInfo

// .proto.system_info.Computer computer = 1;
bool SystemInfo::has_computer() const {
  return this != internal_default_instance() && computer_ != NULL;
}
void SystemInfo::clear_computer() {
  if (GetArenaNoVirtual() == NULL && computer_ != NULL) delete computer_;
  computer_ = NULL;
}
const ::proto::system_info::Computer& SystemInfo::computer() const {
  // @@protoc_insertion_point(field_get:proto.SystemInfo.computer)
  return computer_ != NULL ? *computer_
                         : *::proto::system_info::Computer::internal_default_instance();
}
::proto::system_info::Computer* SystemInfo::mutable_computer() {
  
  if (computer_ == NULL) {
    computer_ = new ::proto::system_info::Computer;
  }
  // @@protoc_insertion_point(field_mutable:proto.SystemInfo.computer)
  return computer_;
}
::proto::system_info::Computer* SystemInfo::release_computer() {
  // @@protoc_insertion_point(field_release:proto.SystemInfo.computer)
  
  ::proto::system_info::Computer* temp = computer_;
  computer_ = NULL;
  return temp;
}
void SystemInfo::set_allocated_computer(::proto::system_info::Computer* computer) {
  delete computer_;
  computer_ = computer;
  if (computer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SystemInfo.computer)
}

// .proto.system_info.OperatingSystem operating_system = 2;
bool SystemInfo::has_operating_system() const {
  return this != internal_default_instance() && operating_system_ != NULL;
}
void SystemInfo::clear_operating_system() {
  if (GetArenaNoVirtual() == NULL && operating_system_ != NULL) delete operating_system_;
  operating_system_ = NULL;
}
const ::proto::system_info::OperatingSystem& SystemInfo::operating_system() const {
  // @@protoc_insertion_point(field_get:proto.SystemInfo.operating_system)
  return operating_system_ != NULL ? *operating_system_
                         : *::proto::system_info::OperatingSystem::internal_default_instance();
}
::proto::system_info::OperatingSystem* SystemInfo::mutable_operating_system() {
  
  if (operating_system_ == NULL) {
    operating_system_ = new ::proto::system_info::OperatingSystem;
  }
  // @@protoc_insertion_point(field_mutable:proto.SystemInfo.operating_system)
  return operating_system_;
}
::proto::system_info::OperatingSystem* SystemInfo::release_operating_system() {
  // @@protoc_insertion_point(field_release:proto.SystemInfo.operating_system)
  
  ::proto::system_info::OperatingSystem* temp = operating_system_;
  operating_system_ = NULL;
  return temp;
}
void SystemInfo::set_allocated_operating_system(::proto::system_info::OperatingSystem* operating_system) {
  delete operating_system_;
  operating_system_ = operating_system;
  if (operating_system) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SystemInfo.operating_system)
}

// .proto.system_info.Motherboard motherboard = 3;
bool SystemInfo::has_motherboard() const {
  return this != internal_default_instance() && motherboard_ != NULL;
}
void SystemInfo::clear_motherboard() {
  if (GetArenaNoVirtual() == NULL && motherboard_ != NULL) delete motherboard_;
  motherboard_ = NULL;
}
const ::proto::system_info::Motherboard& SystemInfo::motherboard() const {
  // @@protoc_insertion_point(field_get:proto.SystemInfo.motherboard)
  return motherboard_ != NULL ? *motherboard_
                         : *::proto::system_info::Motherboard::internal_default_instance();
}
::proto::system_info::Motherboard* SystemInfo::mutable_motherboard() {
  
  if (motherboard_ == NULL) {
    motherboard_ = new ::proto::system_info::Motherboard;
  }
  // @@protoc_insertion_point(field_mutable:proto.SystemInfo.motherboard)
  return motherboard_;
}
::proto::system_info::Motherboard* SystemInfo::release_motherboard() {
  // @@protoc_insertion_point(field_release:proto.SystemInfo.motherboard)
  
  ::proto::system_info::Motherboard* temp = motherboard_;
  motherboard_ = NULL;
  return temp;
}
void SystemInfo::set_allocated_motherboard(::proto::system_info::Motherboard* motherboard) {
  delete motherboard_;
  motherboard_ = motherboard;
  if (motherboard) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SystemInfo.motherboard)
}

// .proto.system_info.Bios bios = 4;
bool SystemInfo::has_bios() const {
  return this != internal_default_instance() && bios_ != NULL;
}
void SystemInfo::clear_bios() {
  if (GetArenaNoVirtual() == NULL && bios_ != NULL) delete bios_;
  bios_ = NULL;
}
const ::proto::system_info::Bios& SystemInfo::bios() const {
  // @@protoc_insertion_point(field_get:proto.SystemInfo.bios)
  return bios_ != NULL ? *bios_
                         : *::proto::system_info::Bios::internal_default_instance();
}
::proto::system_info::Bios* SystemInfo::mutable_bios() {
  
  if (bios_ == NULL) {
    bios_ = new ::proto::system_info::Bios;
  }
  // @@protoc_insertion_point(field_mutable:proto.SystemInfo.bios)
  return bios_;
}
::proto::system_info::Bios* SystemInfo::release_bios() {
  // @@protoc_insertion_point(field_release:proto.SystemInfo.bios)
  
  ::proto::system_info::Bios* temp = bios_;
  bios_ = NULL;
  return temp;
}
void SystemInfo::set_allocated_bios(::proto::system_info::Bios* bios) {
  delete bios_;
  bios_ = bios;
  if (bios) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SystemInfo.bios)
}

// .proto.system_info.Processor processor = 5;
bool SystemInfo::has_processor() const {
  return this != internal_default_instance() && processor_ != NULL;
}
void SystemInfo::clear_processor() {
  if (GetArenaNoVirtual() == NULL && processor_ != NULL) delete processor_;
  processor_ = NULL;
}
const ::proto::system_info::Processor& SystemInfo::processor() const {
  // @@protoc_insertion_point(field_get:proto.SystemInfo.processor)
  return processor_ != NULL ? *processor_
                         : *::proto::system_info::Processor::internal_default_instance();
}
::proto::system_info::Processor* SystemInfo::mutable_processor() {
  
  if (processor_ == NULL) {
    processor_ = new ::proto::system_info::Processor;
  }
  // @@protoc_insertion_point(field_mutable:proto.SystemInfo.processor)
  return processor_;
}
::proto::system_info::Processor* SystemInfo::release_processor() {
  // @@protoc_insertion_point(field_release:proto.SystemInfo.processor)
  
  ::proto::system_info::Processor* temp = processor_;
  processor_ = NULL;
  return temp;
}
void SystemInfo::set_allocated_processor(::proto::system_info::Processor* processor) {
  delete processor_;
  processor_ = processor;
  if (processor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SystemInfo.processor)
}

// .proto.system_info.Memory memory = 6;
bool SystemInfo::has_memory() const {
  return this != internal_default_instance() && memory_ != NULL;
}
void SystemInfo::clear_memory() {
  if (GetArenaNoVirtual() == NULL && memory_ != NULL) delete memory_;
  memory_ = NULL;
}
const ::proto::system_info::Memory& SystemInfo::memory() const {
  // @@protoc_insertion_point(field_get:proto.SystemInfo.memory)
  return memory_ != NULL ? *memory_
                         : *::proto::system_info::Memory::internal_default_instance();
}
::proto::system_info::Memory* SystemInfo::mutable_memory() {
  
  if (memory_ == NULL) {
    memory_ = new ::proto::system_info::Memory;
  }
  // @@protoc_insertion_point(field_mutable:proto.SystemInfo.memory)
  return memory_;
}
::proto::system_info::Memory* SystemInfo::release_memory() {
  // @@protoc_insertion_point(field_release:proto.SystemInfo.memory)
  
  ::proto::system_info::Memory* temp = memory_;
  memory_ = NULL;
  return temp;
}
void SystemInfo::set_allocated_memory(::proto::system_info::Memory* memory) {
  delete memory_;
  memory_ = memory;
  if (memory) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SystemInfo.memory)
}

// .proto.system_info.LogicalDrives logical_drives = 7;
bool SystemInfo::has_logical_drives() const {
  return this != internal_default_instance() && logical_drives_ != NULL;
}
void SystemInfo::clear_logical_drives() {
  if (GetArenaNoVirtual() == NULL && logical_drives_ != NULL) delete logical_drives_;
  logical_drives_ = NULL;
}
const ::proto::system_info::LogicalDrives& SystemInfo::logical_drives() const {
  // @@protoc_insertion_point(field_get:proto.SystemInfo.logical_drives)
  return logical_drives_ != NULL ? *logical_drives_
                         : *::proto::system_info::LogicalDrives::internal_default_instance();
}
::proto::system_info::LogicalDrives* SystemInfo::mutable_logical_drives() {
  
  if (logical_drives_ == NULL) {
    logical_drives_ = new ::proto::system_info::LogicalDrives;
  }
  // @@protoc_insertion_point(field_mutable:proto.SystemInfo.logical_drives)
  return logical_drives_;
}
::proto::system_info::LogicalDrives* SystemInfo::release_logical_drives() {
  // @@protoc_insertion_point(field_release:proto.SystemInfo.logical_drives)
  
  ::proto::system_info::LogicalDrives* temp = logical_drives_;
  logical_drives_ = NULL;
  return temp;
}
void SystemInfo::set_allocated_logical_drives(::proto::system_info::LogicalDrives* logical_drives) {
  delete logical_drives_;
  logical_drives_ = logical_drives;
  if (logical_drives) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SystemInfo.logical_drives)
}

// .proto.system_info.Printers printers = 8;
bool SystemInfo::has_printers() const {
  return this != internal_default_instance() && printers_ != NULL;
}
void SystemInfo::clear_printers() {
  if (GetArenaNoVirtual() == NULL && printers_ != NULL) delete printers_;
  printers_ = NULL;
}
const ::proto::system_info::Printers& SystemInfo::printers() const {
  // @@protoc_insertion_point(field_get:proto.SystemInfo.printers)
  return printers_ != NULL ? *printers_
                         : *::proto::system_info::Printers::internal_default_instance();
}
::proto::system_info::Printers* SystemInfo::mutable_printers() {
  
  if (printers_ == NULL) {
    printers_ = new ::proto::system_info::Printers;
  }
  // @@protoc_insertion_point(field_mutable:proto.SystemInfo.printers)
  return printers_;
}
::proto::system_info::Printers* SystemInfo::release_printers() {
  // @@protoc_insertion_point(field_release:proto.SystemInfo.printers)
  
  ::proto::system_info::Printers* temp = printers_;
  printers_ = NULL;
  return temp;
}
void SystemInfo::set_allocated_printers(::proto::system_info::Printers* printers) {
  delete printers_;
  printers_ = printers;
  if (printers) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SystemInfo.printers)
}

// .proto.system_info.NetworkAdapters network_adapters = 9;
bool SystemInfo::has_network_adapters() const {
  return this != internal_default_instance() && network_adapters_ != NULL;
}
void SystemInfo::clear_network_adapters() {
  if (GetArenaNoVirtual() == NULL && network_adapters_ != NULL) delete network_adapters_;
  network_adapters_ = NULL;
}
const ::proto::system_info::NetworkAdapters& SystemInfo::network_adapters() const {
  // @@protoc_insertion_point(field_get:proto.SystemInfo.network_adapters)
  return network_adapters_ != NULL ? *network_adapters_
                         : *::proto::system_info::NetworkAdapters::internal_default_instance();
}
::proto::system_info::NetworkAdapters* SystemInfo::mutable_network_adapters() {
  
  if (network_adapters_ == NULL) {
    network_adapters_ = new ::proto::system_info::NetworkAdapters;
  }
  // @@protoc_insertion_point(field_mutable:proto.SystemInfo.network_adapters)
  return network_adapters_;
}
::proto::system_info::NetworkAdapters* SystemInfo::release_network_adapters() {
  // @@protoc_insertion_point(field_release:proto.SystemInfo.network_adapters)
  
  ::proto::system_info::NetworkAdapters* temp = network_adapters_;
  network_adapters_ = NULL;
  return temp;
}
void SystemInfo::set_allocated_network_adapters(::proto::system_info::NetworkAdapters* network_adapters) {
  delete network_adapters_;
  network_adapters_ = network_adapters;
  if (network_adapters) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.SystemInfo.network_adapters)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
