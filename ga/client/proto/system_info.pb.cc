// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_info.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "system_info.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace system_info {
class ComputerDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Computer> {
} _Computer_default_instance_;
class OperatingSystemDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<OperatingSystem> {
} _OperatingSystem_default_instance_;
class MotherboardDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Motherboard> {
} _Motherboard_default_instance_;
class BiosDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Bios> {
} _Bios_default_instance_;
class ProcessorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Processor> {
} _Processor_default_instance_;
class Memory_ModuleDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Memory_Module> {
} _Memory_Module_default_instance_;
class MemoryDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Memory> {
} _Memory_default_instance_;
class LogicalDrives_DriveDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogicalDrives_Drive> {
} _LogicalDrives_Drive_default_instance_;
class LogicalDrivesDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<LogicalDrives> {
} _LogicalDrives_default_instance_;
class Printers_PrinterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Printers_Printer> {
} _Printers_Printer_default_instance_;
class PrintersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Printers> {
} _Printers_default_instance_;
class NetworkAdapters_Adapter_AddressDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkAdapters_Adapter_Address> {
} _NetworkAdapters_Adapter_Address_default_instance_;
class NetworkAdapters_AdapterDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkAdapters_Adapter> {
} _NetworkAdapters_Adapter_default_instance_;
class NetworkAdaptersDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NetworkAdapters> {
} _NetworkAdapters_default_instance_;

namespace protobuf_system_5finfo_2eproto {


void TableStruct::Shutdown() {
  _Computer_default_instance_.Shutdown();
  _OperatingSystem_default_instance_.Shutdown();
  _Motherboard_default_instance_.Shutdown();
  _Bios_default_instance_.Shutdown();
  _Processor_default_instance_.Shutdown();
  _Memory_Module_default_instance_.Shutdown();
  _Memory_default_instance_.Shutdown();
  _LogicalDrives_Drive_default_instance_.Shutdown();
  _LogicalDrives_default_instance_.Shutdown();
  _Printers_Printer_default_instance_.Shutdown();
  _Printers_default_instance_.Shutdown();
  _NetworkAdapters_Adapter_Address_default_instance_.Shutdown();
  _NetworkAdapters_Adapter_default_instance_.Shutdown();
  _NetworkAdapters_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _Computer_default_instance_.DefaultConstruct();
  _OperatingSystem_default_instance_.DefaultConstruct();
  _Motherboard_default_instance_.DefaultConstruct();
  _Bios_default_instance_.DefaultConstruct();
  _Processor_default_instance_.DefaultConstruct();
  _Memory_Module_default_instance_.DefaultConstruct();
  _Memory_default_instance_.DefaultConstruct();
  _LogicalDrives_Drive_default_instance_.DefaultConstruct();
  _LogicalDrives_default_instance_.DefaultConstruct();
  _Printers_Printer_default_instance_.DefaultConstruct();
  _Printers_default_instance_.DefaultConstruct();
  _NetworkAdapters_Adapter_Address_default_instance_.DefaultConstruct();
  _NetworkAdapters_Adapter_default_instance_.DefaultConstruct();
  _NetworkAdapters_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_system_5finfo_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Computer::kNameFieldNumber;
const int Computer::kDomainFieldNumber;
const int Computer::kWorkgroupFieldNumber;
const int Computer::kUptimeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Computer::Computer()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.system_info.Computer)
}
Computer::Computer(const Computer& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.domain().size() > 0) {
    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  workgroup_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.workgroup().size() > 0) {
    workgroup_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.workgroup_);
  }
  uptime_ = from.uptime_;
  // @@protoc_insertion_point(copy_constructor:proto.system_info.Computer)
}

void Computer::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workgroup_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uptime_ = GOOGLE_ULONGLONG(0);
  _cached_size_ = 0;
}

Computer::~Computer() {
  // @@protoc_insertion_point(destructor:proto.system_info.Computer)
  SharedDtor();
}

void Computer::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workgroup_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Computer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Computer& Computer::default_instance() {
  protobuf_system_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Computer* Computer::New(::google::protobuf::Arena* arena) const {
  Computer* n = new Computer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Computer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.system_info.Computer)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  workgroup_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  uptime_ = GOOGLE_ULONGLONG(0);
}

bool Computer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.system_info.Computer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Computer.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string domain = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_domain()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->domain().data(), this->domain().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Computer.domain"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string workgroup = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_workgroup()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->workgroup().data(), this->workgroup().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Computer.workgroup"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 uptime = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &uptime_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.system_info.Computer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.system_info.Computer)
  return false;
#undef DO_
}

void Computer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.system_info.Computer)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Computer.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->domain().data(), this->domain().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Computer.domain");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->domain(), output);
  }

  // string workgroup = 3;
  if (this->workgroup().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->workgroup().data(), this->workgroup().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Computer.workgroup");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->workgroup(), output);
  }

  // uint64 uptime = 4;
  if (this->uptime() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->uptime(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.system_info.Computer)
}

size_t Computer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.system_info.Computer)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string domain = 2;
  if (this->domain().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->domain());
  }

  // string workgroup = 3;
  if (this->workgroup().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->workgroup());
  }

  // uint64 uptime = 4;
  if (this->uptime() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->uptime());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Computer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Computer*>(&from));
}

void Computer::MergeFrom(const Computer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.system_info.Computer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.domain().size() > 0) {

    domain_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.domain_);
  }
  if (from.workgroup().size() > 0) {

    workgroup_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.workgroup_);
  }
  if (from.uptime() != 0) {
    set_uptime(from.uptime());
  }
}

void Computer::CopyFrom(const Computer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.system_info.Computer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Computer::IsInitialized() const {
  return true;
}

void Computer::Swap(Computer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Computer::InternalSwap(Computer* other) {
  name_.Swap(&other->name_);
  domain_.Swap(&other->domain_);
  workgroup_.Swap(&other->workgroup_);
  std::swap(uptime_, other->uptime_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Computer::GetTypeName() const {
  return "proto.system_info.Computer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Computer

// string name = 1;
void Computer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Computer::name() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Computer.name)
  return name_.GetNoArena();
}
void Computer::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Computer.name)
}
#if LANG_CXX11
void Computer::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Computer.name)
}
#endif
void Computer::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Computer.name)
}
void Computer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Computer.name)
}
::std::string* Computer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Computer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Computer::release_name() {
  // @@protoc_insertion_point(field_release:proto.system_info.Computer.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Computer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Computer.name)
}

// string domain = 2;
void Computer::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Computer::domain() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Computer.domain)
  return domain_.GetNoArena();
}
void Computer::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Computer.domain)
}
#if LANG_CXX11
void Computer::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Computer.domain)
}
#endif
void Computer::set_domain(const char* value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Computer.domain)
}
void Computer::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Computer.domain)
}
::std::string* Computer::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Computer.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Computer::release_domain() {
  // @@protoc_insertion_point(field_release:proto.system_info.Computer.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Computer::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Computer.domain)
}

// string workgroup = 3;
void Computer::clear_workgroup() {
  workgroup_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Computer::workgroup() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Computer.workgroup)
  return workgroup_.GetNoArena();
}
void Computer::set_workgroup(const ::std::string& value) {
  
  workgroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Computer.workgroup)
}
#if LANG_CXX11
void Computer::set_workgroup(::std::string&& value) {
  
  workgroup_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Computer.workgroup)
}
#endif
void Computer::set_workgroup(const char* value) {
  
  workgroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Computer.workgroup)
}
void Computer::set_workgroup(const char* value, size_t size) {
  
  workgroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Computer.workgroup)
}
::std::string* Computer::mutable_workgroup() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Computer.workgroup)
  return workgroup_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Computer::release_workgroup() {
  // @@protoc_insertion_point(field_release:proto.system_info.Computer.workgroup)
  
  return workgroup_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Computer::set_allocated_workgroup(::std::string* workgroup) {
  if (workgroup != NULL) {
    
  } else {
    
  }
  workgroup_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workgroup);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Computer.workgroup)
}

// uint64 uptime = 4;
void Computer::clear_uptime() {
  uptime_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Computer::uptime() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Computer.uptime)
  return uptime_;
}
void Computer::set_uptime(::google::protobuf::uint64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Computer.uptime)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int OperatingSystem::kNameFieldNumber;
const int OperatingSystem::kVersionFieldNumber;
const int OperatingSystem::kArchFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

OperatingSystem::OperatingSystem()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.system_info.OperatingSystem)
}
OperatingSystem::OperatingSystem(const OperatingSystem& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  arch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.arch().size() > 0) {
    arch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arch_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.system_info.OperatingSystem)
}

void OperatingSystem::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arch_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

OperatingSystem::~OperatingSystem() {
  // @@protoc_insertion_point(destructor:proto.system_info.OperatingSystem)
  SharedDtor();
}

void OperatingSystem::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arch_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void OperatingSystem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const OperatingSystem& OperatingSystem::default_instance() {
  protobuf_system_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

OperatingSystem* OperatingSystem::New(::google::protobuf::Arena* arena) const {
  OperatingSystem* n = new OperatingSystem;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void OperatingSystem::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.system_info.OperatingSystem)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  arch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool OperatingSystem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.system_info.OperatingSystem)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.OperatingSystem.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.OperatingSystem.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string arch = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_arch()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->arch().data(), this->arch().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.OperatingSystem.arch"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.system_info.OperatingSystem)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.system_info.OperatingSystem)
  return false;
#undef DO_
}

void OperatingSystem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.system_info.OperatingSystem)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.OperatingSystem.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.OperatingSystem.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string arch = 3;
  if (this->arch().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->arch().data(), this->arch().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.OperatingSystem.arch");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->arch(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.system_info.OperatingSystem)
}

size_t OperatingSystem::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.system_info.OperatingSystem)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string arch = 3;
  if (this->arch().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->arch());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperatingSystem::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const OperatingSystem*>(&from));
}

void OperatingSystem::MergeFrom(const OperatingSystem& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.system_info.OperatingSystem)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.arch().size() > 0) {

    arch_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.arch_);
  }
}

void OperatingSystem::CopyFrom(const OperatingSystem& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.system_info.OperatingSystem)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatingSystem::IsInitialized() const {
  return true;
}

void OperatingSystem::Swap(OperatingSystem* other) {
  if (other == this) return;
  InternalSwap(other);
}
void OperatingSystem::InternalSwap(OperatingSystem* other) {
  name_.Swap(&other->name_);
  version_.Swap(&other->version_);
  arch_.Swap(&other->arch_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string OperatingSystem::GetTypeName() const {
  return "proto.system_info.OperatingSystem";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// OperatingSystem

// string name = 1;
void OperatingSystem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OperatingSystem::name() const {
  // @@protoc_insertion_point(field_get:proto.system_info.OperatingSystem.name)
  return name_.GetNoArena();
}
void OperatingSystem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.OperatingSystem.name)
}
#if LANG_CXX11
void OperatingSystem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.OperatingSystem.name)
}
#endif
void OperatingSystem::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.OperatingSystem.name)
}
void OperatingSystem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.OperatingSystem.name)
}
::std::string* OperatingSystem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.OperatingSystem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperatingSystem::release_name() {
  // @@protoc_insertion_point(field_release:proto.system_info.OperatingSystem.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperatingSystem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.OperatingSystem.name)
}

// string version = 2;
void OperatingSystem::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OperatingSystem::version() const {
  // @@protoc_insertion_point(field_get:proto.system_info.OperatingSystem.version)
  return version_.GetNoArena();
}
void OperatingSystem::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.OperatingSystem.version)
}
#if LANG_CXX11
void OperatingSystem::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.OperatingSystem.version)
}
#endif
void OperatingSystem::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.OperatingSystem.version)
}
void OperatingSystem::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.OperatingSystem.version)
}
::std::string* OperatingSystem::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.OperatingSystem.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperatingSystem::release_version() {
  // @@protoc_insertion_point(field_release:proto.system_info.OperatingSystem.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperatingSystem::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.OperatingSystem.version)
}

// string arch = 3;
void OperatingSystem::clear_arch() {
  arch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& OperatingSystem::arch() const {
  // @@protoc_insertion_point(field_get:proto.system_info.OperatingSystem.arch)
  return arch_.GetNoArena();
}
void OperatingSystem::set_arch(const ::std::string& value) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.OperatingSystem.arch)
}
#if LANG_CXX11
void OperatingSystem::set_arch(::std::string&& value) {
  
  arch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.OperatingSystem.arch)
}
#endif
void OperatingSystem::set_arch(const char* value) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.OperatingSystem.arch)
}
void OperatingSystem::set_arch(const char* value, size_t size) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.OperatingSystem.arch)
}
::std::string* OperatingSystem::mutable_arch() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.OperatingSystem.arch)
  return arch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* OperatingSystem::release_arch() {
  // @@protoc_insertion_point(field_release:proto.system_info.OperatingSystem.arch)
  
  return arch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void OperatingSystem::set_allocated_arch(::std::string* arch) {
  if (arch != NULL) {
    
  } else {
    
  }
  arch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arch);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.OperatingSystem.arch)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Motherboard::kManufacturerFieldNumber;
const int Motherboard::kModelFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Motherboard::Motherboard()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.system_info.Motherboard)
}
Motherboard::Motherboard(const Motherboard& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.system_info.Motherboard)
}

void Motherboard::SharedCtor() {
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Motherboard::~Motherboard() {
  // @@protoc_insertion_point(destructor:proto.system_info.Motherboard)
  SharedDtor();
}

void Motherboard::SharedDtor() {
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Motherboard::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Motherboard& Motherboard::default_instance() {
  protobuf_system_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Motherboard* Motherboard::New(::google::protobuf::Arena* arena) const {
  Motherboard* n = new Motherboard;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Motherboard::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.system_info.Motherboard)
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Motherboard::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.system_info.Motherboard)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string manufacturer = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), this->manufacturer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Motherboard.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Motherboard.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.system_info.Motherboard)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.system_info.Motherboard)
  return false;
#undef DO_
}

void Motherboard::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.system_info.Motherboard)
  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), this->manufacturer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Motherboard.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->manufacturer(), output);
  }

  // string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Motherboard.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.system_info.Motherboard)
}

size_t Motherboard::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.system_info.Motherboard)
  size_t total_size = 0;

  // string manufacturer = 1;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string model = 2;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Motherboard::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Motherboard*>(&from));
}

void Motherboard::MergeFrom(const Motherboard& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.system_info.Motherboard)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
}

void Motherboard::CopyFrom(const Motherboard& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.system_info.Motherboard)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Motherboard::IsInitialized() const {
  return true;
}

void Motherboard::Swap(Motherboard* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Motherboard::InternalSwap(Motherboard* other) {
  manufacturer_.Swap(&other->manufacturer_);
  model_.Swap(&other->model_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Motherboard::GetTypeName() const {
  return "proto.system_info.Motherboard";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Motherboard

// string manufacturer = 1;
void Motherboard::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Motherboard::manufacturer() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Motherboard.manufacturer)
  return manufacturer_.GetNoArena();
}
void Motherboard::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Motherboard.manufacturer)
}
#if LANG_CXX11
void Motherboard::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Motherboard.manufacturer)
}
#endif
void Motherboard::set_manufacturer(const char* value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Motherboard.manufacturer)
}
void Motherboard::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Motherboard.manufacturer)
}
::std::string* Motherboard::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Motherboard.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Motherboard::release_manufacturer() {
  // @@protoc_insertion_point(field_release:proto.system_info.Motherboard.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Motherboard::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Motherboard.manufacturer)
}

// string model = 2;
void Motherboard::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Motherboard::model() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Motherboard.model)
  return model_.GetNoArena();
}
void Motherboard::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Motherboard.model)
}
#if LANG_CXX11
void Motherboard::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Motherboard.model)
}
#endif
void Motherboard::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Motherboard.model)
}
void Motherboard::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Motherboard.model)
}
::std::string* Motherboard::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Motherboard.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Motherboard::release_model() {
  // @@protoc_insertion_point(field_release:proto.system_info.Motherboard.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Motherboard::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Motherboard.model)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Bios::kVendorFieldNumber;
const int Bios::kVersionFieldNumber;
const int Bios::kDateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Bios::Bios()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.system_info.Bios)
}
Bios::Bios(const Bios& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vendor().size() > 0) {
    vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.version().size() > 0) {
    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.date().size() > 0) {
    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.system_info.Bios)
}

void Bios::SharedCtor() {
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

Bios::~Bios() {
  // @@protoc_insertion_point(destructor:proto.system_info.Bios)
  SharedDtor();
}

void Bios::SharedDtor() {
  vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Bios::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Bios& Bios::default_instance() {
  protobuf_system_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Bios* Bios::New(::google::protobuf::Arena* arena) const {
  Bios* n = new Bios;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Bios::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.system_info.Bios)
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool Bios::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.system_info.Bios)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string vendor = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vendor().data(), this->vendor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Bios.vendor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string version = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Bios.version"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string date = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_date()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->date().data(), this->date().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Bios.date"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.system_info.Bios)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.system_info.Bios)
  return false;
#undef DO_
}

void Bios::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.system_info.Bios)
  // string vendor = 1;
  if (this->vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Bios.vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vendor(), output);
  }

  // string version = 2;
  if (this->version().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Bios.version");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->version(), output);
  }

  // string date = 3;
  if (this->date().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->date().data(), this->date().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Bios.date");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->date(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.system_info.Bios)
}

size_t Bios::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.system_info.Bios)
  size_t total_size = 0;

  // string vendor = 1;
  if (this->vendor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vendor());
  }

  // string version = 2;
  if (this->version().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->version());
  }

  // string date = 3;
  if (this->date().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->date());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Bios::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Bios*>(&from));
}

void Bios::MergeFrom(const Bios& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.system_info.Bios)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.vendor().size() > 0) {

    vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  if (from.version().size() > 0) {

    version_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.version_);
  }
  if (from.date().size() > 0) {

    date_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.date_);
  }
}

void Bios::CopyFrom(const Bios& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.system_info.Bios)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Bios::IsInitialized() const {
  return true;
}

void Bios::Swap(Bios* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Bios::InternalSwap(Bios* other) {
  vendor_.Swap(&other->vendor_);
  version_.Swap(&other->version_);
  date_.Swap(&other->date_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Bios::GetTypeName() const {
  return "proto.system_info.Bios";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Bios

// string vendor = 1;
void Bios::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Bios::vendor() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Bios.vendor)
  return vendor_.GetNoArena();
}
void Bios::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Bios.vendor)
}
#if LANG_CXX11
void Bios::set_vendor(::std::string&& value) {
  
  vendor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Bios.vendor)
}
#endif
void Bios::set_vendor(const char* value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Bios.vendor)
}
void Bios::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Bios.vendor)
}
::std::string* Bios::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Bios.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Bios::release_vendor() {
  // @@protoc_insertion_point(field_release:proto.system_info.Bios.vendor)
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Bios::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Bios.vendor)
}

// string version = 2;
void Bios::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Bios::version() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Bios.version)
  return version_.GetNoArena();
}
void Bios::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Bios.version)
}
#if LANG_CXX11
void Bios::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Bios.version)
}
#endif
void Bios::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Bios.version)
}
void Bios::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Bios.version)
}
::std::string* Bios::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Bios.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Bios::release_version() {
  // @@protoc_insertion_point(field_release:proto.system_info.Bios.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Bios::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Bios.version)
}

// string date = 3;
void Bios::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Bios::date() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Bios.date)
  return date_.GetNoArena();
}
void Bios::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Bios.date)
}
#if LANG_CXX11
void Bios::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Bios.date)
}
#endif
void Bios::set_date(const char* value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Bios.date)
}
void Bios::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Bios.date)
}
::std::string* Bios::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Bios.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Bios::release_date() {
  // @@protoc_insertion_point(field_release:proto.system_info.Bios.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Bios::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Bios.date)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Processor::kVendorFieldNumber;
const int Processor::kModelFieldNumber;
const int Processor::kPackagesFieldNumber;
const int Processor::kCoresFieldNumber;
const int Processor::kThreadsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Processor::Processor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.system_info.Processor)
}
Processor::Processor(const Processor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.vendor().size() > 0) {
    vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.model().size() > 0) {
    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  ::memcpy(&packages_, &from.packages_,
    reinterpret_cast<char*>(&threads_) -
    reinterpret_cast<char*>(&packages_) + sizeof(threads_));
  // @@protoc_insertion_point(copy_constructor:proto.system_info.Processor)
}

void Processor::SharedCtor() {
  vendor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&packages_, 0, reinterpret_cast<char*>(&threads_) -
    reinterpret_cast<char*>(&packages_) + sizeof(threads_));
  _cached_size_ = 0;
}

Processor::~Processor() {
  // @@protoc_insertion_point(destructor:proto.system_info.Processor)
  SharedDtor();
}

void Processor::SharedDtor() {
  vendor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Processor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Processor& Processor::default_instance() {
  protobuf_system_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Processor* Processor::New(::google::protobuf::Arena* arena) const {
  Processor* n = new Processor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Processor::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.system_info.Processor)
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&packages_, 0, reinterpret_cast<char*>(&threads_) -
    reinterpret_cast<char*>(&packages_) + sizeof(threads_));
}

bool Processor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.system_info.Processor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string vendor = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_vendor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->vendor().data(), this->vendor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Processor.vendor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string model = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_model()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->model().data(), this->model().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Processor.model"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 packages = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &packages_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 cores = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &cores_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 threads = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &threads_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.system_info.Processor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.system_info.Processor)
  return false;
#undef DO_
}

void Processor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.system_info.Processor)
  // string vendor = 1;
  if (this->vendor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->vendor().data(), this->vendor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Processor.vendor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->vendor(), output);
  }

  // string model = 2;
  if (this->model().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->model().data(), this->model().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Processor.model");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->model(), output);
  }

  // uint32 packages = 3;
  if (this->packages() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->packages(), output);
  }

  // uint32 cores = 4;
  if (this->cores() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->cores(), output);
  }

  // uint32 threads = 5;
  if (this->threads() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->threads(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.system_info.Processor)
}

size_t Processor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.system_info.Processor)
  size_t total_size = 0;

  // string vendor = 1;
  if (this->vendor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->vendor());
  }

  // string model = 2;
  if (this->model().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->model());
  }

  // uint32 packages = 3;
  if (this->packages() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->packages());
  }

  // uint32 cores = 4;
  if (this->cores() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->cores());
  }

  // uint32 threads = 5;
  if (this->threads() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->threads());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Processor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Processor*>(&from));
}

void Processor::MergeFrom(const Processor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.system_info.Processor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.vendor().size() > 0) {

    vendor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.vendor_);
  }
  if (from.model().size() > 0) {

    model_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.model_);
  }
  if (from.packages() != 0) {
    set_packages(from.packages());
  }
  if (from.cores() != 0) {
    set_cores(from.cores());
  }
  if (from.threads() != 0) {
    set_threads(from.threads());
  }
}

void Processor::CopyFrom(const Processor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.system_info.Processor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Processor::IsInitialized() const {
  return true;
}

void Processor::Swap(Processor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Processor::InternalSwap(Processor* other) {
  vendor_.Swap(&other->vendor_);
  model_.Swap(&other->model_);
  std::swap(packages_, other->packages_);
  std::swap(cores_, other->cores_);
  std::swap(threads_, other->threads_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Processor::GetTypeName() const {
  return "proto.system_info.Processor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Processor

// string vendor = 1;
void Processor::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Processor::vendor() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Processor.vendor)
  return vendor_.GetNoArena();
}
void Processor::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Processor.vendor)
}
#if LANG_CXX11
void Processor::set_vendor(::std::string&& value) {
  
  vendor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Processor.vendor)
}
#endif
void Processor::set_vendor(const char* value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Processor.vendor)
}
void Processor::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Processor.vendor)
}
::std::string* Processor::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Processor.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Processor::release_vendor() {
  // @@protoc_insertion_point(field_release:proto.system_info.Processor.vendor)
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Processor::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Processor.vendor)
}

// string model = 2;
void Processor::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Processor::model() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Processor.model)
  return model_.GetNoArena();
}
void Processor::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Processor.model)
}
#if LANG_CXX11
void Processor::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Processor.model)
}
#endif
void Processor::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Processor.model)
}
void Processor::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Processor.model)
}
::std::string* Processor::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Processor.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Processor::release_model() {
  // @@protoc_insertion_point(field_release:proto.system_info.Processor.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Processor::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Processor.model)
}

// uint32 packages = 3;
void Processor::clear_packages() {
  packages_ = 0u;
}
::google::protobuf::uint32 Processor::packages() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Processor.packages)
  return packages_;
}
void Processor::set_packages(::google::protobuf::uint32 value) {
  
  packages_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Processor.packages)
}

// uint32 cores = 4;
void Processor::clear_cores() {
  cores_ = 0u;
}
::google::protobuf::uint32 Processor::cores() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Processor.cores)
  return cores_;
}
void Processor::set_cores(::google::protobuf::uint32 value) {
  
  cores_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Processor.cores)
}

// uint32 threads = 5;
void Processor::clear_threads() {
  threads_ = 0u;
}
::google::protobuf::uint32 Processor::threads() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Processor.threads)
  return threads_;
}
void Processor::set_threads(::google::protobuf::uint32 value) {
  
  threads_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Processor.threads)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Memory_Module::kPresentFieldNumber;
const int Memory_Module::kLocationFieldNumber;
const int Memory_Module::kManufacturerFieldNumber;
const int Memory_Module::kSizeFieldNumber;
const int Memory_Module::kTypeFieldNumber;
const int Memory_Module::kFormFactorFieldNumber;
const int Memory_Module::kPartNumberFieldNumber;
const int Memory_Module::kSpeedFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Memory_Module::Memory_Module()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.system_info.Memory.Module)
}
Memory_Module::Memory_Module(const Memory_Module& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.location().size() > 0) {
    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.manufacturer().size() > 0) {
    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.type().size() > 0) {
    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  form_factor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.form_factor().size() > 0) {
    form_factor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.form_factor_);
  }
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.part_number().size() > 0) {
    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  ::memcpy(&size_, &from.size_,
    reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&size_) + sizeof(speed_));
  // @@protoc_insertion_point(copy_constructor:proto.system_info.Memory.Module)
}

void Memory_Module::SharedCtor() {
  location_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  form_factor_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&size_) + sizeof(speed_));
  _cached_size_ = 0;
}

Memory_Module::~Memory_Module() {
  // @@protoc_insertion_point(destructor:proto.system_info.Memory.Module)
  SharedDtor();
}

void Memory_Module::SharedDtor() {
  location_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  form_factor_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Memory_Module::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Memory_Module& Memory_Module::default_instance() {
  protobuf_system_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Memory_Module* Memory_Module::New(::google::protobuf::Arena* arena) const {
  Memory_Module* n = new Memory_Module;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Memory_Module::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.system_info.Memory.Module)
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  form_factor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  part_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&size_, 0, reinterpret_cast<char*>(&speed_) -
    reinterpret_cast<char*>(&size_) + sizeof(speed_));
}

bool Memory_Module::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.system_info.Memory.Module)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool present = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &present_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string location = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_location()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->location().data(), this->location().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Memory.Module.location"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string manufacturer = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_manufacturer()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->manufacturer().data(), this->manufacturer().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Memory.Module.manufacturer"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 size = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string type = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Memory.Module.type"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string form_factor = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_form_factor()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->form_factor().data(), this->form_factor().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Memory.Module.form_factor"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string part_number = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_part_number()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->part_number().data(), this->part_number().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Memory.Module.part_number"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 speed = 8;
      case 8: {
        if (tag == 64u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.system_info.Memory.Module)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.system_info.Memory.Module)
  return false;
#undef DO_
}

void Memory_Module::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.system_info.Memory.Module)
  // bool present = 1;
  if (this->present() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->present(), output);
  }

  // string location = 2;
  if (this->location().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->location().data(), this->location().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Memory.Module.location");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->location(), output);
  }

  // string manufacturer = 3;
  if (this->manufacturer().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->manufacturer().data(), this->manufacturer().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Memory.Module.manufacturer");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->manufacturer(), output);
  }

  // uint64 size = 4;
  if (this->size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->size(), output);
  }

  // string type = 5;
  if (this->type().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Memory.Module.type");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->type(), output);
  }

  // string form_factor = 6;
  if (this->form_factor().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->form_factor().data(), this->form_factor().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Memory.Module.form_factor");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->form_factor(), output);
  }

  // string part_number = 7;
  if (this->part_number().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->part_number().data(), this->part_number().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Memory.Module.part_number");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->part_number(), output);
  }

  // uint32 speed = 8;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(8, this->speed(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.system_info.Memory.Module)
}

size_t Memory_Module::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.system_info.Memory.Module)
  size_t total_size = 0;

  // string location = 2;
  if (this->location().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->location());
  }

  // string manufacturer = 3;
  if (this->manufacturer().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->manufacturer());
  }

  // string type = 5;
  if (this->type().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->type());
  }

  // string form_factor = 6;
  if (this->form_factor().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->form_factor());
  }

  // string part_number = 7;
  if (this->part_number().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->part_number());
  }

  // uint64 size = 4;
  if (this->size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->size());
  }

  // bool present = 1;
  if (this->present() != 0) {
    total_size += 1 + 1;
  }

  // uint32 speed = 8;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->speed());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Memory_Module::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Memory_Module*>(&from));
}

void Memory_Module::MergeFrom(const Memory_Module& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.system_info.Memory.Module)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.location().size() > 0) {

    location_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.location_);
  }
  if (from.manufacturer().size() > 0) {

    manufacturer_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.manufacturer_);
  }
  if (from.type().size() > 0) {

    type_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.type_);
  }
  if (from.form_factor().size() > 0) {

    form_factor_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.form_factor_);
  }
  if (from.part_number().size() > 0) {

    part_number_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.part_number_);
  }
  if (from.size() != 0) {
    set_size(from.size());
  }
  if (from.present() != 0) {
    set_present(from.present());
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
}

void Memory_Module::CopyFrom(const Memory_Module& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.system_info.Memory.Module)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memory_Module::IsInitialized() const {
  return true;
}

void Memory_Module::Swap(Memory_Module* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Memory_Module::InternalSwap(Memory_Module* other) {
  location_.Swap(&other->location_);
  manufacturer_.Swap(&other->manufacturer_);
  type_.Swap(&other->type_);
  form_factor_.Swap(&other->form_factor_);
  part_number_.Swap(&other->part_number_);
  std::swap(size_, other->size_);
  std::swap(present_, other->present_);
  std::swap(speed_, other->speed_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Memory_Module::GetTypeName() const {
  return "proto.system_info.Memory.Module";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Memory_Module

// bool present = 1;
void Memory_Module::clear_present() {
  present_ = false;
}
bool Memory_Module::present() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.present)
  return present_;
}
void Memory_Module::set_present(bool value) {
  
  present_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.present)
}

// string location = 2;
void Memory_Module::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Memory_Module::location() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.location)
  return location_.GetNoArena();
}
void Memory_Module::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.location)
}
#if LANG_CXX11
void Memory_Module::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Memory.Module.location)
}
#endif
void Memory_Module::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Memory.Module.location)
}
void Memory_Module::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Memory.Module.location)
}
::std::string* Memory_Module::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Memory.Module.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Memory_Module::release_location() {
  // @@protoc_insertion_point(field_release:proto.system_info.Memory.Module.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Memory_Module::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Memory.Module.location)
}

// string manufacturer = 3;
void Memory_Module::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Memory_Module::manufacturer() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.manufacturer)
  return manufacturer_.GetNoArena();
}
void Memory_Module::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.manufacturer)
}
#if LANG_CXX11
void Memory_Module::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Memory.Module.manufacturer)
}
#endif
void Memory_Module::set_manufacturer(const char* value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Memory.Module.manufacturer)
}
void Memory_Module::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Memory.Module.manufacturer)
}
::std::string* Memory_Module::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Memory.Module.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Memory_Module::release_manufacturer() {
  // @@protoc_insertion_point(field_release:proto.system_info.Memory.Module.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Memory_Module::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Memory.Module.manufacturer)
}

// uint64 size = 4;
void Memory_Module::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 Memory_Module::size() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.size)
  return size_;
}
void Memory_Module::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.size)
}

// string type = 5;
void Memory_Module::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Memory_Module::type() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.type)
  return type_.GetNoArena();
}
void Memory_Module::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.type)
}
#if LANG_CXX11
void Memory_Module::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Memory.Module.type)
}
#endif
void Memory_Module::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Memory.Module.type)
}
void Memory_Module::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Memory.Module.type)
}
::std::string* Memory_Module::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Memory.Module.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Memory_Module::release_type() {
  // @@protoc_insertion_point(field_release:proto.system_info.Memory.Module.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Memory_Module::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Memory.Module.type)
}

// string form_factor = 6;
void Memory_Module::clear_form_factor() {
  form_factor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Memory_Module::form_factor() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.form_factor)
  return form_factor_.GetNoArena();
}
void Memory_Module::set_form_factor(const ::std::string& value) {
  
  form_factor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.form_factor)
}
#if LANG_CXX11
void Memory_Module::set_form_factor(::std::string&& value) {
  
  form_factor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Memory.Module.form_factor)
}
#endif
void Memory_Module::set_form_factor(const char* value) {
  
  form_factor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Memory.Module.form_factor)
}
void Memory_Module::set_form_factor(const char* value, size_t size) {
  
  form_factor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Memory.Module.form_factor)
}
::std::string* Memory_Module::mutable_form_factor() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Memory.Module.form_factor)
  return form_factor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Memory_Module::release_form_factor() {
  // @@protoc_insertion_point(field_release:proto.system_info.Memory.Module.form_factor)
  
  return form_factor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Memory_Module::set_allocated_form_factor(::std::string* form_factor) {
  if (form_factor != NULL) {
    
  } else {
    
  }
  form_factor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), form_factor);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Memory.Module.form_factor)
}

// string part_number = 7;
void Memory_Module::clear_part_number() {
  part_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Memory_Module::part_number() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.part_number)
  return part_number_.GetNoArena();
}
void Memory_Module::set_part_number(const ::std::string& value) {
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.part_number)
}
#if LANG_CXX11
void Memory_Module::set_part_number(::std::string&& value) {
  
  part_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Memory.Module.part_number)
}
#endif
void Memory_Module::set_part_number(const char* value) {
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Memory.Module.part_number)
}
void Memory_Module::set_part_number(const char* value, size_t size) {
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Memory.Module.part_number)
}
::std::string* Memory_Module::mutable_part_number() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Memory.Module.part_number)
  return part_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Memory_Module::release_part_number() {
  // @@protoc_insertion_point(field_release:proto.system_info.Memory.Module.part_number)
  
  return part_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Memory_Module::set_allocated_part_number(::std::string* part_number) {
  if (part_number != NULL) {
    
  } else {
    
  }
  part_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), part_number);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Memory.Module.part_number)
}

// uint32 speed = 8;
void Memory_Module::clear_speed() {
  speed_ = 0u;
}
::google::protobuf::uint32 Memory_Module::speed() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.speed)
  return speed_;
}
void Memory_Module::set_speed(::google::protobuf::uint32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.speed)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Memory::kModuleFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Memory::Memory()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.system_info.Memory)
}
Memory::Memory(const Memory& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      module_(from.module_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.system_info.Memory)
}

void Memory::SharedCtor() {
  _cached_size_ = 0;
}

Memory::~Memory() {
  // @@protoc_insertion_point(destructor:proto.system_info.Memory)
  SharedDtor();
}

void Memory::SharedDtor() {
}

void Memory::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Memory& Memory::default_instance() {
  protobuf_system_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Memory* Memory::New(::google::protobuf::Arena* arena) const {
  Memory* n = new Memory;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Memory::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.system_info.Memory)
  module_.Clear();
}

bool Memory::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.system_info.Memory)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.system_info.Memory.Module module = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_module()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.system_info.Memory)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.system_info.Memory)
  return false;
#undef DO_
}

void Memory::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.system_info.Memory)
  // repeated .proto.system_info.Memory.Module module = 1;
  for (unsigned int i = 0, n = this->module_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->module(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.system_info.Memory)
}

size_t Memory::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.system_info.Memory)
  size_t total_size = 0;

  // repeated .proto.system_info.Memory.Module module = 1;
  {
    unsigned int count = this->module_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->module(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Memory::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Memory*>(&from));
}

void Memory::MergeFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.system_info.Memory)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  module_.MergeFrom(from.module_);
}

void Memory::CopyFrom(const Memory& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.system_info.Memory)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Memory::IsInitialized() const {
  return true;
}

void Memory::Swap(Memory* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Memory::InternalSwap(Memory* other) {
  module_.UnsafeArenaSwap(&other->module_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Memory::GetTypeName() const {
  return "proto.system_info.Memory";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Memory

// repeated .proto.system_info.Memory.Module module = 1;
int Memory::module_size() const {
  return module_.size();
}
void Memory::clear_module() {
  module_.Clear();
}
const ::proto::system_info::Memory_Module& Memory::module(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.module)
  return module_.Get(index);
}
::proto::system_info::Memory_Module* Memory::mutable_module(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.Memory.module)
  return module_.Mutable(index);
}
::proto::system_info::Memory_Module* Memory::add_module() {
  // @@protoc_insertion_point(field_add:proto.system_info.Memory.module)
  return module_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::system_info::Memory_Module >*
Memory::mutable_module() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.Memory.module)
  return &module_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::system_info::Memory_Module >&
Memory::module() const {
  // @@protoc_insertion_point(field_list:proto.system_info.Memory.module)
  return module_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicalDrives_Drive::kPathFieldNumber;
const int LogicalDrives_Drive::kFileSystemFieldNumber;
const int LogicalDrives_Drive::kTotalSizeFieldNumber;
const int LogicalDrives_Drive::kFreeSizeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicalDrives_Drive::LogicalDrives_Drive()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.system_info.LogicalDrives.Drive)
}
LogicalDrives_Drive::LogicalDrives_Drive(const LogicalDrives_Drive& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.path().size() > 0) {
    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  file_system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.file_system().size() > 0) {
    file_system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_system_);
  }
  ::memcpy(&total_size_, &from.total_size_,
    reinterpret_cast<char*>(&free_size_) -
    reinterpret_cast<char*>(&total_size_) + sizeof(free_size_));
  // @@protoc_insertion_point(copy_constructor:proto.system_info.LogicalDrives.Drive)
}

void LogicalDrives_Drive::SharedCtor() {
  path_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_system_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_size_, 0, reinterpret_cast<char*>(&free_size_) -
    reinterpret_cast<char*>(&total_size_) + sizeof(free_size_));
  _cached_size_ = 0;
}

LogicalDrives_Drive::~LogicalDrives_Drive() {
  // @@protoc_insertion_point(destructor:proto.system_info.LogicalDrives.Drive)
  SharedDtor();
}

void LogicalDrives_Drive::SharedDtor() {
  path_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_system_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void LogicalDrives_Drive::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogicalDrives_Drive& LogicalDrives_Drive::default_instance() {
  protobuf_system_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogicalDrives_Drive* LogicalDrives_Drive::New(::google::protobuf::Arena* arena) const {
  LogicalDrives_Drive* n = new LogicalDrives_Drive;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogicalDrives_Drive::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.system_info.LogicalDrives.Drive)
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  file_system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&total_size_, 0, reinterpret_cast<char*>(&free_size_) -
    reinterpret_cast<char*>(&total_size_) + sizeof(free_size_));
}

bool LogicalDrives_Drive::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.system_info.LogicalDrives.Drive)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string path = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_path()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->path().data(), this->path().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.LogicalDrives.Drive.path"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string file_system = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_file_system()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->file_system().data(), this->file_system().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.LogicalDrives.Drive.file_system"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 total_size = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &total_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 free_size = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &free_size_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.system_info.LogicalDrives.Drive)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.system_info.LogicalDrives.Drive)
  return false;
#undef DO_
}

void LogicalDrives_Drive::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.system_info.LogicalDrives.Drive)
  // string path = 1;
  if (this->path().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->path().data(), this->path().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.LogicalDrives.Drive.path");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->path(), output);
  }

  // string file_system = 2;
  if (this->file_system().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->file_system().data(), this->file_system().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.LogicalDrives.Drive.file_system");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->file_system(), output);
  }

  // uint64 total_size = 3;
  if (this->total_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(3, this->total_size(), output);
  }

  // uint64 free_size = 4;
  if (this->free_size() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->free_size(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.system_info.LogicalDrives.Drive)
}

size_t LogicalDrives_Drive::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.system_info.LogicalDrives.Drive)
  size_t total_size = 0;

  // string path = 1;
  if (this->path().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->path());
  }

  // string file_system = 2;
  if (this->file_system().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->file_system());
  }

  // uint64 total_size = 3;
  if (this->total_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->total_size());
  }

  // uint64 free_size = 4;
  if (this->free_size() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->free_size());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicalDrives_Drive::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogicalDrives_Drive*>(&from));
}

void LogicalDrives_Drive::MergeFrom(const LogicalDrives_Drive& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.system_info.LogicalDrives.Drive)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.path().size() > 0) {

    path_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.path_);
  }
  if (from.file_system().size() > 0) {

    file_system_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.file_system_);
  }
  if (from.total_size() != 0) {
    set_total_size(from.total_size());
  }
  if (from.free_size() != 0) {
    set_free_size(from.free_size());
  }
}

void LogicalDrives_Drive::CopyFrom(const LogicalDrives_Drive& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.system_info.LogicalDrives.Drive)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalDrives_Drive::IsInitialized() const {
  return true;
}

void LogicalDrives_Drive::Swap(LogicalDrives_Drive* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicalDrives_Drive::InternalSwap(LogicalDrives_Drive* other) {
  path_.Swap(&other->path_);
  file_system_.Swap(&other->file_system_);
  std::swap(total_size_, other->total_size_);
  std::swap(free_size_, other->free_size_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LogicalDrives_Drive::GetTypeName() const {
  return "proto.system_info.LogicalDrives.Drive";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogicalDrives_Drive

// string path = 1;
void LogicalDrives_Drive::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogicalDrives_Drive::path() const {
  // @@protoc_insertion_point(field_get:proto.system_info.LogicalDrives.Drive.path)
  return path_.GetNoArena();
}
void LogicalDrives_Drive::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.LogicalDrives.Drive.path)
}
#if LANG_CXX11
void LogicalDrives_Drive::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.LogicalDrives.Drive.path)
}
#endif
void LogicalDrives_Drive::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.LogicalDrives.Drive.path)
}
void LogicalDrives_Drive::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.LogicalDrives.Drive.path)
}
::std::string* LogicalDrives_Drive::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.LogicalDrives.Drive.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogicalDrives_Drive::release_path() {
  // @@protoc_insertion_point(field_release:proto.system_info.LogicalDrives.Drive.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogicalDrives_Drive::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.LogicalDrives.Drive.path)
}

// string file_system = 2;
void LogicalDrives_Drive::clear_file_system() {
  file_system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& LogicalDrives_Drive::file_system() const {
  // @@protoc_insertion_point(field_get:proto.system_info.LogicalDrives.Drive.file_system)
  return file_system_.GetNoArena();
}
void LogicalDrives_Drive::set_file_system(const ::std::string& value) {
  
  file_system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.LogicalDrives.Drive.file_system)
}
#if LANG_CXX11
void LogicalDrives_Drive::set_file_system(::std::string&& value) {
  
  file_system_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.LogicalDrives.Drive.file_system)
}
#endif
void LogicalDrives_Drive::set_file_system(const char* value) {
  
  file_system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.LogicalDrives.Drive.file_system)
}
void LogicalDrives_Drive::set_file_system(const char* value, size_t size) {
  
  file_system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.LogicalDrives.Drive.file_system)
}
::std::string* LogicalDrives_Drive::mutable_file_system() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.LogicalDrives.Drive.file_system)
  return file_system_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* LogicalDrives_Drive::release_file_system() {
  // @@protoc_insertion_point(field_release:proto.system_info.LogicalDrives.Drive.file_system)
  
  return file_system_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void LogicalDrives_Drive::set_allocated_file_system(::std::string* file_system) {
  if (file_system != NULL) {
    
  } else {
    
  }
  file_system_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_system);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.LogicalDrives.Drive.file_system)
}

// uint64 total_size = 3;
void LogicalDrives_Drive::clear_total_size() {
  total_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogicalDrives_Drive::total_size() const {
  // @@protoc_insertion_point(field_get:proto.system_info.LogicalDrives.Drive.total_size)
  return total_size_;
}
void LogicalDrives_Drive::set_total_size(::google::protobuf::uint64 value) {
  
  total_size_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.LogicalDrives.Drive.total_size)
}

// uint64 free_size = 4;
void LogicalDrives_Drive::clear_free_size() {
  free_size_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 LogicalDrives_Drive::free_size() const {
  // @@protoc_insertion_point(field_get:proto.system_info.LogicalDrives.Drive.free_size)
  return free_size_;
}
void LogicalDrives_Drive::set_free_size(::google::protobuf::uint64 value) {
  
  free_size_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.LogicalDrives.Drive.free_size)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int LogicalDrives::kDriveFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

LogicalDrives::LogicalDrives()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.system_info.LogicalDrives)
}
LogicalDrives::LogicalDrives(const LogicalDrives& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      drive_(from.drive_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.system_info.LogicalDrives)
}

void LogicalDrives::SharedCtor() {
  _cached_size_ = 0;
}

LogicalDrives::~LogicalDrives() {
  // @@protoc_insertion_point(destructor:proto.system_info.LogicalDrives)
  SharedDtor();
}

void LogicalDrives::SharedDtor() {
}

void LogicalDrives::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const LogicalDrives& LogicalDrives::default_instance() {
  protobuf_system_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

LogicalDrives* LogicalDrives::New(::google::protobuf::Arena* arena) const {
  LogicalDrives* n = new LogicalDrives;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void LogicalDrives::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.system_info.LogicalDrives)
  drive_.Clear();
}

bool LogicalDrives::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.system_info.LogicalDrives)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.system_info.LogicalDrives.Drive drive = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_drive()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.system_info.LogicalDrives)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.system_info.LogicalDrives)
  return false;
#undef DO_
}

void LogicalDrives::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.system_info.LogicalDrives)
  // repeated .proto.system_info.LogicalDrives.Drive drive = 1;
  for (unsigned int i = 0, n = this->drive_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->drive(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.system_info.LogicalDrives)
}

size_t LogicalDrives::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.system_info.LogicalDrives)
  size_t total_size = 0;

  // repeated .proto.system_info.LogicalDrives.Drive drive = 1;
  {
    unsigned int count = this->drive_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->drive(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LogicalDrives::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const LogicalDrives*>(&from));
}

void LogicalDrives::MergeFrom(const LogicalDrives& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.system_info.LogicalDrives)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  drive_.MergeFrom(from.drive_);
}

void LogicalDrives::CopyFrom(const LogicalDrives& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.system_info.LogicalDrives)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LogicalDrives::IsInitialized() const {
  return true;
}

void LogicalDrives::Swap(LogicalDrives* other) {
  if (other == this) return;
  InternalSwap(other);
}
void LogicalDrives::InternalSwap(LogicalDrives* other) {
  drive_.UnsafeArenaSwap(&other->drive_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string LogicalDrives::GetTypeName() const {
  return "proto.system_info.LogicalDrives";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// LogicalDrives

// repeated .proto.system_info.LogicalDrives.Drive drive = 1;
int LogicalDrives::drive_size() const {
  return drive_.size();
}
void LogicalDrives::clear_drive() {
  drive_.Clear();
}
const ::proto::system_info::LogicalDrives_Drive& LogicalDrives::drive(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.LogicalDrives.drive)
  return drive_.Get(index);
}
::proto::system_info::LogicalDrives_Drive* LogicalDrives::mutable_drive(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.LogicalDrives.drive)
  return drive_.Mutable(index);
}
::proto::system_info::LogicalDrives_Drive* LogicalDrives::add_drive() {
  // @@protoc_insertion_point(field_add:proto.system_info.LogicalDrives.drive)
  return drive_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::system_info::LogicalDrives_Drive >*
LogicalDrives::mutable_drive() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.LogicalDrives.drive)
  return &drive_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::system_info::LogicalDrives_Drive >&
LogicalDrives::drive() const {
  // @@protoc_insertion_point(field_list:proto.system_info.LogicalDrives.drive)
  return drive_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Printers_Printer::kNameFieldNumber;
const int Printers_Printer::kDefaultFieldNumber;
const int Printers_Printer::kSharedFieldNumber;
const int Printers_Printer::kPortFieldNumber;
const int Printers_Printer::kDriverFieldNumber;
const int Printers_Printer::kJobsCountFieldNumber;
const int Printers_Printer::kShareNameFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Printers_Printer::Printers_Printer()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.system_info.Printers.Printer)
}
Printers_Printer::Printers_Printer(const Printers_Printer& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.port().size() > 0) {
    port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  driver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.driver().size() > 0) {
    driver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_);
  }
  share_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.share_name().size() > 0) {
    share_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_name_);
  }
  ::memcpy(&default__, &from.default__,
    reinterpret_cast<char*>(&jobs_count_) -
    reinterpret_cast<char*>(&default__) + sizeof(jobs_count_));
  // @@protoc_insertion_point(copy_constructor:proto.system_info.Printers.Printer)
}

void Printers_Printer::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&default__, 0, reinterpret_cast<char*>(&jobs_count_) -
    reinterpret_cast<char*>(&default__) + sizeof(jobs_count_));
  _cached_size_ = 0;
}

Printers_Printer::~Printers_Printer() {
  // @@protoc_insertion_point(destructor:proto.system_info.Printers.Printer)
  SharedDtor();
}

void Printers_Printer::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void Printers_Printer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Printers_Printer& Printers_Printer::default_instance() {
  protobuf_system_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Printers_Printer* Printers_Printer::New(::google::protobuf::Arena* arena) const {
  Printers_Printer* n = new Printers_Printer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Printers_Printer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.system_info.Printers.Printer)
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  share_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&default__, 0, reinterpret_cast<char*>(&jobs_count_) -
    reinterpret_cast<char*>(&default__) + sizeof(jobs_count_));
}

bool Printers_Printer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.system_info.Printers.Printer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Printers.Printer.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool default = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &default__)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool shared = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &shared_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string port = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_port()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->port().data(), this->port().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Printers.Printer.port"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string driver = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_driver()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->driver().data(), this->driver().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Printers.Printer.driver"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 jobs_count = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &jobs_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string share_name = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_share_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->share_name().data(), this->share_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.Printers.Printer.share_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.system_info.Printers.Printer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.system_info.Printers.Printer)
  return false;
#undef DO_
}

void Printers_Printer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.system_info.Printers.Printer)
  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Printers.Printer.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // bool default = 2;
  if (this->default_() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->default_(), output);
  }

  // bool shared = 3;
  if (this->shared() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->shared(), output);
  }

  // string port = 4;
  if (this->port().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->port().data(), this->port().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Printers.Printer.port");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->port(), output);
  }

  // string driver = 5;
  if (this->driver().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->driver().data(), this->driver().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Printers.Printer.driver");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->driver(), output);
  }

  // uint32 jobs_count = 6;
  if (this->jobs_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->jobs_count(), output);
  }

  // string share_name = 7;
  if (this->share_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->share_name().data(), this->share_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.Printers.Printer.share_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      7, this->share_name(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.system_info.Printers.Printer)
}

size_t Printers_Printer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.system_info.Printers.Printer)
  size_t total_size = 0;

  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // string port = 4;
  if (this->port().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->port());
  }

  // string driver = 5;
  if (this->driver().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->driver());
  }

  // string share_name = 7;
  if (this->share_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->share_name());
  }

  // bool default = 2;
  if (this->default_() != 0) {
    total_size += 1 + 1;
  }

  // bool shared = 3;
  if (this->shared() != 0) {
    total_size += 1 + 1;
  }

  // uint32 jobs_count = 6;
  if (this->jobs_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->jobs_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Printers_Printer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Printers_Printer*>(&from));
}

void Printers_Printer::MergeFrom(const Printers_Printer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.system_info.Printers.Printer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.port().size() > 0) {

    port_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.port_);
  }
  if (from.driver().size() > 0) {

    driver_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.driver_);
  }
  if (from.share_name().size() > 0) {

    share_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.share_name_);
  }
  if (from.default_() != 0) {
    set_default_(from.default_());
  }
  if (from.shared() != 0) {
    set_shared(from.shared());
  }
  if (from.jobs_count() != 0) {
    set_jobs_count(from.jobs_count());
  }
}

void Printers_Printer::CopyFrom(const Printers_Printer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.system_info.Printers.Printer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Printers_Printer::IsInitialized() const {
  return true;
}

void Printers_Printer::Swap(Printers_Printer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Printers_Printer::InternalSwap(Printers_Printer* other) {
  name_.Swap(&other->name_);
  port_.Swap(&other->port_);
  driver_.Swap(&other->driver_);
  share_name_.Swap(&other->share_name_);
  std::swap(default__, other->default__);
  std::swap(shared_, other->shared_);
  std::swap(jobs_count_, other->jobs_count_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Printers_Printer::GetTypeName() const {
  return "proto.system_info.Printers.Printer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Printers_Printer

// string name = 1;
void Printers_Printer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Printer::name() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.Printer.name)
  return name_.GetNoArena();
}
void Printers_Printer::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Printers.Printer.name)
}
#if LANG_CXX11
void Printers_Printer::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Printers.Printer.name)
}
#endif
void Printers_Printer::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Printers.Printer.name)
}
void Printers_Printer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Printers.Printer.name)
}
::std::string* Printers_Printer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Printers.Printer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Printer::release_name() {
  // @@protoc_insertion_point(field_release:proto.system_info.Printers.Printer.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Printer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Printers.Printer.name)
}

// bool default = 2;
void Printers_Printer::clear_default_() {
  default__ = false;
}
bool Printers_Printer::default_() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.Printer.default)
  return default__;
}
void Printers_Printer::set_default_(bool value) {
  
  default__ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Printers.Printer.default)
}

// bool shared = 3;
void Printers_Printer::clear_shared() {
  shared_ = false;
}
bool Printers_Printer::shared() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.Printer.shared)
  return shared_;
}
void Printers_Printer::set_shared(bool value) {
  
  shared_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Printers.Printer.shared)
}

// string port = 4;
void Printers_Printer::clear_port() {
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Printer::port() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.Printer.port)
  return port_.GetNoArena();
}
void Printers_Printer::set_port(const ::std::string& value) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Printers.Printer.port)
}
#if LANG_CXX11
void Printers_Printer::set_port(::std::string&& value) {
  
  port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Printers.Printer.port)
}
#endif
void Printers_Printer::set_port(const char* value) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Printers.Printer.port)
}
void Printers_Printer::set_port(const char* value, size_t size) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Printers.Printer.port)
}
::std::string* Printers_Printer::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Printers.Printer.port)
  return port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Printer::release_port() {
  // @@protoc_insertion_point(field_release:proto.system_info.Printers.Printer.port)
  
  return port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Printer::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Printers.Printer.port)
}

// string driver = 5;
void Printers_Printer::clear_driver() {
  driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Printer::driver() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.Printer.driver)
  return driver_.GetNoArena();
}
void Printers_Printer::set_driver(const ::std::string& value) {
  
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Printers.Printer.driver)
}
#if LANG_CXX11
void Printers_Printer::set_driver(::std::string&& value) {
  
  driver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Printers.Printer.driver)
}
#endif
void Printers_Printer::set_driver(const char* value) {
  
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Printers.Printer.driver)
}
void Printers_Printer::set_driver(const char* value, size_t size) {
  
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Printers.Printer.driver)
}
::std::string* Printers_Printer::mutable_driver() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Printers.Printer.driver)
  return driver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Printer::release_driver() {
  // @@protoc_insertion_point(field_release:proto.system_info.Printers.Printer.driver)
  
  return driver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Printer::set_allocated_driver(::std::string* driver) {
  if (driver != NULL) {
    
  } else {
    
  }
  driver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Printers.Printer.driver)
}

// uint32 jobs_count = 6;
void Printers_Printer::clear_jobs_count() {
  jobs_count_ = 0u;
}
::google::protobuf::uint32 Printers_Printer::jobs_count() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.Printer.jobs_count)
  return jobs_count_;
}
void Printers_Printer::set_jobs_count(::google::protobuf::uint32 value) {
  
  jobs_count_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Printers.Printer.jobs_count)
}

// string share_name = 7;
void Printers_Printer::clear_share_name() {
  share_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& Printers_Printer::share_name() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.Printer.share_name)
  return share_name_.GetNoArena();
}
void Printers_Printer::set_share_name(const ::std::string& value) {
  
  share_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Printers.Printer.share_name)
}
#if LANG_CXX11
void Printers_Printer::set_share_name(::std::string&& value) {
  
  share_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Printers.Printer.share_name)
}
#endif
void Printers_Printer::set_share_name(const char* value) {
  
  share_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Printers.Printer.share_name)
}
void Printers_Printer::set_share_name(const char* value, size_t size) {
  
  share_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Printers.Printer.share_name)
}
::std::string* Printers_Printer::mutable_share_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Printers.Printer.share_name)
  return share_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* Printers_Printer::release_share_name() {
  // @@protoc_insertion_point(field_release:proto.system_info.Printers.Printer.share_name)
  
  return share_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void Printers_Printer::set_allocated_share_name(::std::string* share_name) {
  if (share_name != NULL) {
    
  } else {
    
  }
  share_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), share_name);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Printers.Printer.share_name)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Printers::kPrinterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Printers::Printers()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.system_info.Printers)
}
Printers::Printers(const Printers& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      printer_(from.printer_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.system_info.Printers)
}

void Printers::SharedCtor() {
  _cached_size_ = 0;
}

Printers::~Printers() {
  // @@protoc_insertion_point(destructor:proto.system_info.Printers)
  SharedDtor();
}

void Printers::SharedDtor() {
}

void Printers::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Printers& Printers::default_instance() {
  protobuf_system_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

Printers* Printers::New(::google::protobuf::Arena* arena) const {
  Printers* n = new Printers;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Printers::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.system_info.Printers)
  printer_.Clear();
}

bool Printers::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.system_info.Printers)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.system_info.Printers.Printer printer = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_printer()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.system_info.Printers)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.system_info.Printers)
  return false;
#undef DO_
}

void Printers::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.system_info.Printers)
  // repeated .proto.system_info.Printers.Printer printer = 1;
  for (unsigned int i = 0, n = this->printer_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->printer(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.system_info.Printers)
}

size_t Printers::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.system_info.Printers)
  size_t total_size = 0;

  // repeated .proto.system_info.Printers.Printer printer = 1;
  {
    unsigned int count = this->printer_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->printer(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Printers::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Printers*>(&from));
}

void Printers::MergeFrom(const Printers& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.system_info.Printers)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  printer_.MergeFrom(from.printer_);
}

void Printers::CopyFrom(const Printers& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.system_info.Printers)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Printers::IsInitialized() const {
  return true;
}

void Printers::Swap(Printers* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Printers::InternalSwap(Printers* other) {
  printer_.UnsafeArenaSwap(&other->printer_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Printers::GetTypeName() const {
  return "proto.system_info.Printers";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Printers

// repeated .proto.system_info.Printers.Printer printer = 1;
int Printers::printer_size() const {
  return printer_.size();
}
void Printers::clear_printer() {
  printer_.Clear();
}
const ::proto::system_info::Printers_Printer& Printers::printer(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.printer)
  return printer_.Get(index);
}
::proto::system_info::Printers_Printer* Printers::mutable_printer(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.Printers.printer)
  return printer_.Mutable(index);
}
::proto::system_info::Printers_Printer* Printers::add_printer() {
  // @@protoc_insertion_point(field_add:proto.system_info.Printers.printer)
  return printer_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::system_info::Printers_Printer >*
Printers::mutable_printer() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.Printers.printer)
  return &printer_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::system_info::Printers_Printer >&
Printers::printer() const {
  // @@protoc_insertion_point(field_list:proto.system_info.Printers.printer)
  return printer_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkAdapters_Adapter_Address::kIpFieldNumber;
const int NetworkAdapters_Adapter_Address::kMaskFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkAdapters_Adapter_Address::NetworkAdapters_Adapter_Address()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.system_info.NetworkAdapters.Adapter.Address)
}
NetworkAdapters_Adapter_Address::NetworkAdapters_Adapter_Address(const NetworkAdapters_Adapter_Address& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.ip().size() > 0) {
    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mask().size() > 0) {
    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
  // @@protoc_insertion_point(copy_constructor:proto.system_info.NetworkAdapters.Adapter.Address)
}

void NetworkAdapters_Adapter_Address::SharedCtor() {
  ip_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  _cached_size_ = 0;
}

NetworkAdapters_Adapter_Address::~NetworkAdapters_Adapter_Address() {
  // @@protoc_insertion_point(destructor:proto.system_info.NetworkAdapters.Adapter.Address)
  SharedDtor();
}

void NetworkAdapters_Adapter_Address::SharedDtor() {
  ip_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkAdapters_Adapter_Address::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkAdapters_Adapter_Address& NetworkAdapters_Adapter_Address::default_instance() {
  protobuf_system_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkAdapters_Adapter_Address* NetworkAdapters_Adapter_Address::New(::google::protobuf::Arena* arena) const {
  NetworkAdapters_Adapter_Address* n = new NetworkAdapters_Adapter_Address;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkAdapters_Adapter_Address::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.system_info.NetworkAdapters.Adapter.Address)
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

bool NetworkAdapters_Adapter_Address::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.system_info.NetworkAdapters.Adapter.Address)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string ip = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.NetworkAdapters.Adapter.Address.ip"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mask = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mask()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mask().data(), this->mask().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.NetworkAdapters.Adapter.Address.mask"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.system_info.NetworkAdapters.Adapter.Address)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.system_info.NetworkAdapters.Adapter.Address)
  return false;
#undef DO_
}

void NetworkAdapters_Adapter_Address::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.system_info.NetworkAdapters.Adapter.Address)
  // string ip = 1;
  if (this->ip().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.NetworkAdapters.Adapter.Address.ip");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->ip(), output);
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mask().data(), this->mask().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.NetworkAdapters.Adapter.Address.mask");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->mask(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.system_info.NetworkAdapters.Adapter.Address)
}

size_t NetworkAdapters_Adapter_Address::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.system_info.NetworkAdapters.Adapter.Address)
  size_t total_size = 0;

  // string ip = 1;
  if (this->ip().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->ip());
  }

  // string mask = 2;
  if (this->mask().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mask());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkAdapters_Adapter_Address::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkAdapters_Adapter_Address*>(&from));
}

void NetworkAdapters_Adapter_Address::MergeFrom(const NetworkAdapters_Adapter_Address& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.system_info.NetworkAdapters.Adapter.Address)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.ip().size() > 0) {

    ip_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.ip_);
  }
  if (from.mask().size() > 0) {

    mask_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mask_);
  }
}

void NetworkAdapters_Adapter_Address::CopyFrom(const NetworkAdapters_Adapter_Address& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.system_info.NetworkAdapters.Adapter.Address)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkAdapters_Adapter_Address::IsInitialized() const {
  return true;
}

void NetworkAdapters_Adapter_Address::Swap(NetworkAdapters_Adapter_Address* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkAdapters_Adapter_Address::InternalSwap(NetworkAdapters_Adapter_Address* other) {
  ip_.Swap(&other->ip_);
  mask_.Swap(&other->mask_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkAdapters_Adapter_Address::GetTypeName() const {
  return "proto.system_info.NetworkAdapters.Adapter.Address";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkAdapters_Adapter_Address

// string ip = 1;
void NetworkAdapters_Adapter_Address::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkAdapters_Adapter_Address::ip() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.Address.ip)
  return ip_.GetNoArena();
}
void NetworkAdapters_Adapter_Address::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.Address.ip)
}
#if LANG_CXX11
void NetworkAdapters_Adapter_Address::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.NetworkAdapters.Adapter.Address.ip)
}
#endif
void NetworkAdapters_Adapter_Address::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.Address.ip)
}
void NetworkAdapters_Adapter_Address::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.Address.ip)
}
::std::string* NetworkAdapters_Adapter_Address::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.Address.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkAdapters_Adapter_Address::release_ip() {
  // @@protoc_insertion_point(field_release:proto.system_info.NetworkAdapters.Adapter.Address.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkAdapters_Adapter_Address::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.NetworkAdapters.Adapter.Address.ip)
}

// string mask = 2;
void NetworkAdapters_Adapter_Address::clear_mask() {
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkAdapters_Adapter_Address::mask() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.Address.mask)
  return mask_.GetNoArena();
}
void NetworkAdapters_Adapter_Address::set_mask(const ::std::string& value) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.Address.mask)
}
#if LANG_CXX11
void NetworkAdapters_Adapter_Address::set_mask(::std::string&& value) {
  
  mask_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.NetworkAdapters.Adapter.Address.mask)
}
#endif
void NetworkAdapters_Adapter_Address::set_mask(const char* value) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.Address.mask)
}
void NetworkAdapters_Adapter_Address::set_mask(const char* value, size_t size) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.Address.mask)
}
::std::string* NetworkAdapters_Adapter_Address::mutable_mask() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.Address.mask)
  return mask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkAdapters_Adapter_Address::release_mask() {
  // @@protoc_insertion_point(field_release:proto.system_info.NetworkAdapters.Adapter.Address.mask)
  
  return mask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkAdapters_Adapter_Address::set_allocated_mask(::std::string* mask) {
  if (mask != NULL) {
    
  } else {
    
  }
  mask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mask);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.NetworkAdapters.Adapter.Address.mask)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkAdapters_Adapter::kAdapterNameFieldNumber;
const int NetworkAdapters_Adapter::kConnectionNameFieldNumber;
const int NetworkAdapters_Adapter::kIfaceFieldNumber;
const int NetworkAdapters_Adapter::kSpeedFieldNumber;
const int NetworkAdapters_Adapter::kMacFieldNumber;
const int NetworkAdapters_Adapter::kDhcpEnabledFieldNumber;
const int NetworkAdapters_Adapter::kGatewayFieldNumber;
const int NetworkAdapters_Adapter::kAddressFieldNumber;
const int NetworkAdapters_Adapter::kDnsFieldNumber;
const int NetworkAdapters_Adapter::kDhcpFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkAdapters_Adapter::NetworkAdapters_Adapter()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.system_info.NetworkAdapters.Adapter)
}
NetworkAdapters_Adapter::NetworkAdapters_Adapter(const NetworkAdapters_Adapter& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      gateway_(from.gateway_),
      address_(from.address_),
      dns_(from.dns_),
      dhcp_(from.dhcp_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  adapter_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.adapter_name().size() > 0) {
    adapter_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adapter_name_);
  }
  connection_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.connection_name().size() > 0) {
    connection_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_name_);
  }
  iface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.iface().size() > 0) {
    iface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iface_);
  }
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.mac().size() > 0) {
    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  ::memcpy(&speed_, &from.speed_,
    reinterpret_cast<char*>(&dhcp_enabled_) -
    reinterpret_cast<char*>(&speed_) + sizeof(dhcp_enabled_));
  // @@protoc_insertion_point(copy_constructor:proto.system_info.NetworkAdapters.Adapter)
}

void NetworkAdapters_Adapter::SharedCtor() {
  adapter_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iface_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&speed_, 0, reinterpret_cast<char*>(&dhcp_enabled_) -
    reinterpret_cast<char*>(&speed_) + sizeof(dhcp_enabled_));
  _cached_size_ = 0;
}

NetworkAdapters_Adapter::~NetworkAdapters_Adapter() {
  // @@protoc_insertion_point(destructor:proto.system_info.NetworkAdapters.Adapter)
  SharedDtor();
}

void NetworkAdapters_Adapter::SharedDtor() {
  adapter_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iface_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void NetworkAdapters_Adapter::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkAdapters_Adapter& NetworkAdapters_Adapter::default_instance() {
  protobuf_system_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkAdapters_Adapter* NetworkAdapters_Adapter::New(::google::protobuf::Arena* arena) const {
  NetworkAdapters_Adapter* n = new NetworkAdapters_Adapter;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkAdapters_Adapter::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.system_info.NetworkAdapters.Adapter)
  gateway_.Clear();
  address_.Clear();
  dns_.Clear();
  dhcp_.Clear();
  adapter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  connection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&speed_, 0, reinterpret_cast<char*>(&dhcp_enabled_) -
    reinterpret_cast<char*>(&speed_) + sizeof(dhcp_enabled_));
}

bool NetworkAdapters_Adapter::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.system_info.NetworkAdapters.Adapter)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string adapter_name = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_adapter_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->adapter_name().data(), this->adapter_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.NetworkAdapters.Adapter.adapter_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string connection_name = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_connection_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->connection_name().data(), this->connection_name().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.NetworkAdapters.Adapter.connection_name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string iface = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_iface()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->iface().data(), this->iface().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.NetworkAdapters.Adapter.iface"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint64 speed = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &speed_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string mac = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_mac()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->mac().data(), this->mac().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.NetworkAdapters.Adapter.mac"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool dhcp_enabled = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &dhcp_enabled_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string gateway = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_gateway()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->gateway(this->gateway_size() - 1).data(),
            this->gateway(this->gateway_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.NetworkAdapters.Adapter.gateway"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.system_info.NetworkAdapters.Adapter.Address address = 8;
      case 8: {
        if (tag == 66u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_address()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      // repeated string dns = 9;
      case 9: {
        if (tag == 74u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dns()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dns(this->dns_size() - 1).data(),
            this->dns(this->dns_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.NetworkAdapters.Adapter.dns"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated string dhcp = 10;
      case 10: {
        if (tag == 82u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_dhcp()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->dhcp(this->dhcp_size() - 1).data(),
            this->dhcp(this->dhcp_size() - 1).length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.system_info.NetworkAdapters.Adapter.dhcp"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.system_info.NetworkAdapters.Adapter)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.system_info.NetworkAdapters.Adapter)
  return false;
#undef DO_
}

void NetworkAdapters_Adapter::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.system_info.NetworkAdapters.Adapter)
  // string adapter_name = 1;
  if (this->adapter_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->adapter_name().data(), this->adapter_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.NetworkAdapters.Adapter.adapter_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->adapter_name(), output);
  }

  // string connection_name = 2;
  if (this->connection_name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->connection_name().data(), this->connection_name().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.NetworkAdapters.Adapter.connection_name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->connection_name(), output);
  }

  // string iface = 3;
  if (this->iface().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->iface().data(), this->iface().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.NetworkAdapters.Adapter.iface");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->iface(), output);
  }

  // uint64 speed = 4;
  if (this->speed() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(4, this->speed(), output);
  }

  // string mac = 5;
  if (this->mac().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->mac().data(), this->mac().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.NetworkAdapters.Adapter.mac");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->mac(), output);
  }

  // bool dhcp_enabled = 6;
  if (this->dhcp_enabled() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->dhcp_enabled(), output);
  }

  // repeated string gateway = 7;
  for (int i = 0; i < this->gateway_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->gateway(i).data(), this->gateway(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.NetworkAdapters.Adapter.gateway");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->gateway(i), output);
  }

  // repeated .proto.system_info.NetworkAdapters.Adapter.Address address = 8;
  for (unsigned int i = 0, n = this->address_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      8, this->address(i), output);
  }

  // repeated string dns = 9;
  for (int i = 0; i < this->dns_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dns(i).data(), this->dns(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.NetworkAdapters.Adapter.dns");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->dns(i), output);
  }

  // repeated string dhcp = 10;
  for (int i = 0; i < this->dhcp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->dhcp(i).data(), this->dhcp(i).length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.system_info.NetworkAdapters.Adapter.dhcp");
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->dhcp(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.system_info.NetworkAdapters.Adapter)
}

size_t NetworkAdapters_Adapter::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.system_info.NetworkAdapters.Adapter)
  size_t total_size = 0;

  // repeated string gateway = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->gateway_size());
  for (int i = 0; i < this->gateway_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->gateway(i));
  }

  // repeated .proto.system_info.NetworkAdapters.Adapter.Address address = 8;
  {
    unsigned int count = this->address_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->address(i));
    }
  }

  // repeated string dns = 9;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dns_size());
  for (int i = 0; i < this->dns_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dns(i));
  }

  // repeated string dhcp = 10;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->dhcp_size());
  for (int i = 0; i < this->dhcp_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->dhcp(i));
  }

  // string adapter_name = 1;
  if (this->adapter_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->adapter_name());
  }

  // string connection_name = 2;
  if (this->connection_name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->connection_name());
  }

  // string iface = 3;
  if (this->iface().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->iface());
  }

  // string mac = 5;
  if (this->mac().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->mac());
  }

  // uint64 speed = 4;
  if (this->speed() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt64Size(
        this->speed());
  }

  // bool dhcp_enabled = 6;
  if (this->dhcp_enabled() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkAdapters_Adapter::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkAdapters_Adapter*>(&from));
}

void NetworkAdapters_Adapter::MergeFrom(const NetworkAdapters_Adapter& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.system_info.NetworkAdapters.Adapter)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  gateway_.MergeFrom(from.gateway_);
  address_.MergeFrom(from.address_);
  dns_.MergeFrom(from.dns_);
  dhcp_.MergeFrom(from.dhcp_);
  if (from.adapter_name().size() > 0) {

    adapter_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.adapter_name_);
  }
  if (from.connection_name().size() > 0) {

    connection_name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.connection_name_);
  }
  if (from.iface().size() > 0) {

    iface_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iface_);
  }
  if (from.mac().size() > 0) {

    mac_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.mac_);
  }
  if (from.speed() != 0) {
    set_speed(from.speed());
  }
  if (from.dhcp_enabled() != 0) {
    set_dhcp_enabled(from.dhcp_enabled());
  }
}

void NetworkAdapters_Adapter::CopyFrom(const NetworkAdapters_Adapter& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.system_info.NetworkAdapters.Adapter)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkAdapters_Adapter::IsInitialized() const {
  return true;
}

void NetworkAdapters_Adapter::Swap(NetworkAdapters_Adapter* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkAdapters_Adapter::InternalSwap(NetworkAdapters_Adapter* other) {
  gateway_.UnsafeArenaSwap(&other->gateway_);
  address_.UnsafeArenaSwap(&other->address_);
  dns_.UnsafeArenaSwap(&other->dns_);
  dhcp_.UnsafeArenaSwap(&other->dhcp_);
  adapter_name_.Swap(&other->adapter_name_);
  connection_name_.Swap(&other->connection_name_);
  iface_.Swap(&other->iface_);
  mac_.Swap(&other->mac_);
  std::swap(speed_, other->speed_);
  std::swap(dhcp_enabled_, other->dhcp_enabled_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkAdapters_Adapter::GetTypeName() const {
  return "proto.system_info.NetworkAdapters.Adapter";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkAdapters_Adapter

// string adapter_name = 1;
void NetworkAdapters_Adapter::clear_adapter_name() {
  adapter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkAdapters_Adapter::adapter_name() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.adapter_name)
  return adapter_name_.GetNoArena();
}
void NetworkAdapters_Adapter::set_adapter_name(const ::std::string& value) {
  
  adapter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.adapter_name)
}
#if LANG_CXX11
void NetworkAdapters_Adapter::set_adapter_name(::std::string&& value) {
  
  adapter_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.NetworkAdapters.Adapter.adapter_name)
}
#endif
void NetworkAdapters_Adapter::set_adapter_name(const char* value) {
  
  adapter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.adapter_name)
}
void NetworkAdapters_Adapter::set_adapter_name(const char* value, size_t size) {
  
  adapter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.adapter_name)
}
::std::string* NetworkAdapters_Adapter::mutable_adapter_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.adapter_name)
  return adapter_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkAdapters_Adapter::release_adapter_name() {
  // @@protoc_insertion_point(field_release:proto.system_info.NetworkAdapters.Adapter.adapter_name)
  
  return adapter_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkAdapters_Adapter::set_allocated_adapter_name(::std::string* adapter_name) {
  if (adapter_name != NULL) {
    
  } else {
    
  }
  adapter_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adapter_name);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.NetworkAdapters.Adapter.adapter_name)
}

// string connection_name = 2;
void NetworkAdapters_Adapter::clear_connection_name() {
  connection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkAdapters_Adapter::connection_name() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.connection_name)
  return connection_name_.GetNoArena();
}
void NetworkAdapters_Adapter::set_connection_name(const ::std::string& value) {
  
  connection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.connection_name)
}
#if LANG_CXX11
void NetworkAdapters_Adapter::set_connection_name(::std::string&& value) {
  
  connection_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.NetworkAdapters.Adapter.connection_name)
}
#endif
void NetworkAdapters_Adapter::set_connection_name(const char* value) {
  
  connection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.connection_name)
}
void NetworkAdapters_Adapter::set_connection_name(const char* value, size_t size) {
  
  connection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.connection_name)
}
::std::string* NetworkAdapters_Adapter::mutable_connection_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.connection_name)
  return connection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkAdapters_Adapter::release_connection_name() {
  // @@protoc_insertion_point(field_release:proto.system_info.NetworkAdapters.Adapter.connection_name)
  
  return connection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkAdapters_Adapter::set_allocated_connection_name(::std::string* connection_name) {
  if (connection_name != NULL) {
    
  } else {
    
  }
  connection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_name);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.NetworkAdapters.Adapter.connection_name)
}

// string iface = 3;
void NetworkAdapters_Adapter::clear_iface() {
  iface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkAdapters_Adapter::iface() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.iface)
  return iface_.GetNoArena();
}
void NetworkAdapters_Adapter::set_iface(const ::std::string& value) {
  
  iface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.iface)
}
#if LANG_CXX11
void NetworkAdapters_Adapter::set_iface(::std::string&& value) {
  
  iface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.NetworkAdapters.Adapter.iface)
}
#endif
void NetworkAdapters_Adapter::set_iface(const char* value) {
  
  iface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.iface)
}
void NetworkAdapters_Adapter::set_iface(const char* value, size_t size) {
  
  iface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.iface)
}
::std::string* NetworkAdapters_Adapter::mutable_iface() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.iface)
  return iface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkAdapters_Adapter::release_iface() {
  // @@protoc_insertion_point(field_release:proto.system_info.NetworkAdapters.Adapter.iface)
  
  return iface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkAdapters_Adapter::set_allocated_iface(::std::string* iface) {
  if (iface != NULL) {
    
  } else {
    
  }
  iface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iface);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.NetworkAdapters.Adapter.iface)
}

// uint64 speed = 4;
void NetworkAdapters_Adapter::clear_speed() {
  speed_ = GOOGLE_ULONGLONG(0);
}
::google::protobuf::uint64 NetworkAdapters_Adapter::speed() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.speed)
  return speed_;
}
void NetworkAdapters_Adapter::set_speed(::google::protobuf::uint64 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.speed)
}

// string mac = 5;
void NetworkAdapters_Adapter::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& NetworkAdapters_Adapter::mac() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.mac)
  return mac_.GetNoArena();
}
void NetworkAdapters_Adapter::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.mac)
}
#if LANG_CXX11
void NetworkAdapters_Adapter::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.NetworkAdapters.Adapter.mac)
}
#endif
void NetworkAdapters_Adapter::set_mac(const char* value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.mac)
}
void NetworkAdapters_Adapter::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.mac)
}
::std::string* NetworkAdapters_Adapter::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* NetworkAdapters_Adapter::release_mac() {
  // @@protoc_insertion_point(field_release:proto.system_info.NetworkAdapters.Adapter.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void NetworkAdapters_Adapter::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.NetworkAdapters.Adapter.mac)
}

// bool dhcp_enabled = 6;
void NetworkAdapters_Adapter::clear_dhcp_enabled() {
  dhcp_enabled_ = false;
}
bool NetworkAdapters_Adapter::dhcp_enabled() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.dhcp_enabled)
  return dhcp_enabled_;
}
void NetworkAdapters_Adapter::set_dhcp_enabled(bool value) {
  
  dhcp_enabled_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.dhcp_enabled)
}

// repeated string gateway = 7;
int NetworkAdapters_Adapter::gateway_size() const {
  return gateway_.size();
}
void NetworkAdapters_Adapter::clear_gateway() {
  gateway_.Clear();
}
const ::std::string& NetworkAdapters_Adapter::gateway(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.gateway)
  return gateway_.Get(index);
}
::std::string* NetworkAdapters_Adapter::mutable_gateway(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.gateway)
  return gateway_.Mutable(index);
}
void NetworkAdapters_Adapter::set_gateway(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.gateway)
  gateway_.Mutable(index)->assign(value);
}
void NetworkAdapters_Adapter::set_gateway(int index, const char* value) {
  gateway_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.gateway)
}
void NetworkAdapters_Adapter::set_gateway(int index, const char* value, size_t size) {
  gateway_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.gateway)
}
::std::string* NetworkAdapters_Adapter::add_gateway() {
  // @@protoc_insertion_point(field_add_mutable:proto.system_info.NetworkAdapters.Adapter.gateway)
  return gateway_.Add();
}
void NetworkAdapters_Adapter::add_gateway(const ::std::string& value) {
  gateway_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.system_info.NetworkAdapters.Adapter.gateway)
}
void NetworkAdapters_Adapter::add_gateway(const char* value) {
  gateway_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.system_info.NetworkAdapters.Adapter.gateway)
}
void NetworkAdapters_Adapter::add_gateway(const char* value, size_t size) {
  gateway_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.system_info.NetworkAdapters.Adapter.gateway)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkAdapters_Adapter::gateway() const {
  // @@protoc_insertion_point(field_list:proto.system_info.NetworkAdapters.Adapter.gateway)
  return gateway_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkAdapters_Adapter::mutable_gateway() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.NetworkAdapters.Adapter.gateway)
  return &gateway_;
}

// repeated .proto.system_info.NetworkAdapters.Adapter.Address address = 8;
int NetworkAdapters_Adapter::address_size() const {
  return address_.size();
}
void NetworkAdapters_Adapter::clear_address() {
  address_.Clear();
}
const ::proto::system_info::NetworkAdapters_Adapter_Address& NetworkAdapters_Adapter::address(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.address)
  return address_.Get(index);
}
::proto::system_info::NetworkAdapters_Adapter_Address* NetworkAdapters_Adapter::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.address)
  return address_.Mutable(index);
}
::proto::system_info::NetworkAdapters_Adapter_Address* NetworkAdapters_Adapter::add_address() {
  // @@protoc_insertion_point(field_add:proto.system_info.NetworkAdapters.Adapter.address)
  return address_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::system_info::NetworkAdapters_Adapter_Address >*
NetworkAdapters_Adapter::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.NetworkAdapters.Adapter.address)
  return &address_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::system_info::NetworkAdapters_Adapter_Address >&
NetworkAdapters_Adapter::address() const {
  // @@protoc_insertion_point(field_list:proto.system_info.NetworkAdapters.Adapter.address)
  return address_;
}

// repeated string dns = 9;
int NetworkAdapters_Adapter::dns_size() const {
  return dns_.size();
}
void NetworkAdapters_Adapter::clear_dns() {
  dns_.Clear();
}
const ::std::string& NetworkAdapters_Adapter::dns(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.dns)
  return dns_.Get(index);
}
::std::string* NetworkAdapters_Adapter::mutable_dns(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.dns)
  return dns_.Mutable(index);
}
void NetworkAdapters_Adapter::set_dns(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.dns)
  dns_.Mutable(index)->assign(value);
}
void NetworkAdapters_Adapter::set_dns(int index, const char* value) {
  dns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.dns)
}
void NetworkAdapters_Adapter::set_dns(int index, const char* value, size_t size) {
  dns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.dns)
}
::std::string* NetworkAdapters_Adapter::add_dns() {
  // @@protoc_insertion_point(field_add_mutable:proto.system_info.NetworkAdapters.Adapter.dns)
  return dns_.Add();
}
void NetworkAdapters_Adapter::add_dns(const ::std::string& value) {
  dns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.system_info.NetworkAdapters.Adapter.dns)
}
void NetworkAdapters_Adapter::add_dns(const char* value) {
  dns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.system_info.NetworkAdapters.Adapter.dns)
}
void NetworkAdapters_Adapter::add_dns(const char* value, size_t size) {
  dns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.system_info.NetworkAdapters.Adapter.dns)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkAdapters_Adapter::dns() const {
  // @@protoc_insertion_point(field_list:proto.system_info.NetworkAdapters.Adapter.dns)
  return dns_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkAdapters_Adapter::mutable_dns() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.NetworkAdapters.Adapter.dns)
  return &dns_;
}

// repeated string dhcp = 10;
int NetworkAdapters_Adapter::dhcp_size() const {
  return dhcp_.size();
}
void NetworkAdapters_Adapter::clear_dhcp() {
  dhcp_.Clear();
}
const ::std::string& NetworkAdapters_Adapter::dhcp(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.dhcp)
  return dhcp_.Get(index);
}
::std::string* NetworkAdapters_Adapter::mutable_dhcp(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.dhcp)
  return dhcp_.Mutable(index);
}
void NetworkAdapters_Adapter::set_dhcp(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.dhcp)
  dhcp_.Mutable(index)->assign(value);
}
void NetworkAdapters_Adapter::set_dhcp(int index, const char* value) {
  dhcp_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.dhcp)
}
void NetworkAdapters_Adapter::set_dhcp(int index, const char* value, size_t size) {
  dhcp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.dhcp)
}
::std::string* NetworkAdapters_Adapter::add_dhcp() {
  // @@protoc_insertion_point(field_add_mutable:proto.system_info.NetworkAdapters.Adapter.dhcp)
  return dhcp_.Add();
}
void NetworkAdapters_Adapter::add_dhcp(const ::std::string& value) {
  dhcp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.system_info.NetworkAdapters.Adapter.dhcp)
}
void NetworkAdapters_Adapter::add_dhcp(const char* value) {
  dhcp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.system_info.NetworkAdapters.Adapter.dhcp)
}
void NetworkAdapters_Adapter::add_dhcp(const char* value, size_t size) {
  dhcp_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.system_info.NetworkAdapters.Adapter.dhcp)
}
const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkAdapters_Adapter::dhcp() const {
  // @@protoc_insertion_point(field_list:proto.system_info.NetworkAdapters.Adapter.dhcp)
  return dhcp_;
}
::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkAdapters_Adapter::mutable_dhcp() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.NetworkAdapters.Adapter.dhcp)
  return &dhcp_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NetworkAdapters::kAdapterFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NetworkAdapters::NetworkAdapters()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_system_5finfo_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.system_info.NetworkAdapters)
}
NetworkAdapters::NetworkAdapters(const NetworkAdapters& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      adapter_(from.adapter_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:proto.system_info.NetworkAdapters)
}

void NetworkAdapters::SharedCtor() {
  _cached_size_ = 0;
}

NetworkAdapters::~NetworkAdapters() {
  // @@protoc_insertion_point(destructor:proto.system_info.NetworkAdapters)
  SharedDtor();
}

void NetworkAdapters::SharedDtor() {
}

void NetworkAdapters::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NetworkAdapters& NetworkAdapters::default_instance() {
  protobuf_system_5finfo_2eproto::InitDefaults();
  return *internal_default_instance();
}

NetworkAdapters* NetworkAdapters::New(::google::protobuf::Arena* arena) const {
  NetworkAdapters* n = new NetworkAdapters;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NetworkAdapters::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.system_info.NetworkAdapters)
  adapter_.Clear();
}

bool NetworkAdapters::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.system_info.NetworkAdapters)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .proto.system_info.NetworkAdapters.Adapter adapter = 1;
      case 1: {
        if (tag == 10u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_adapter()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.system_info.NetworkAdapters)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.system_info.NetworkAdapters)
  return false;
#undef DO_
}

void NetworkAdapters::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.system_info.NetworkAdapters)
  // repeated .proto.system_info.NetworkAdapters.Adapter adapter = 1;
  for (unsigned int i = 0, n = this->adapter_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->adapter(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.system_info.NetworkAdapters)
}

size_t NetworkAdapters::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.system_info.NetworkAdapters)
  size_t total_size = 0;

  // repeated .proto.system_info.NetworkAdapters.Adapter adapter = 1;
  {
    unsigned int count = this->adapter_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->adapter(i));
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetworkAdapters::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NetworkAdapters*>(&from));
}

void NetworkAdapters::MergeFrom(const NetworkAdapters& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.system_info.NetworkAdapters)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  adapter_.MergeFrom(from.adapter_);
}

void NetworkAdapters::CopyFrom(const NetworkAdapters& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.system_info.NetworkAdapters)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetworkAdapters::IsInitialized() const {
  return true;
}

void NetworkAdapters::Swap(NetworkAdapters* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NetworkAdapters::InternalSwap(NetworkAdapters* other) {
  adapter_.UnsafeArenaSwap(&other->adapter_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NetworkAdapters::GetTypeName() const {
  return "proto.system_info.NetworkAdapters";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NetworkAdapters

// repeated .proto.system_info.NetworkAdapters.Adapter adapter = 1;
int NetworkAdapters::adapter_size() const {
  return adapter_.size();
}
void NetworkAdapters::clear_adapter() {
  adapter_.Clear();
}
const ::proto::system_info::NetworkAdapters_Adapter& NetworkAdapters::adapter(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.adapter)
  return adapter_.Get(index);
}
::proto::system_info::NetworkAdapters_Adapter* NetworkAdapters::mutable_adapter(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.adapter)
  return adapter_.Mutable(index);
}
::proto::system_info::NetworkAdapters_Adapter* NetworkAdapters::add_adapter() {
  // @@protoc_insertion_point(field_add:proto.system_info.NetworkAdapters.adapter)
  return adapter_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::system_info::NetworkAdapters_Adapter >*
NetworkAdapters::mutable_adapter() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.NetworkAdapters.adapter)
  return &adapter_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::system_info::NetworkAdapters_Adapter >&
NetworkAdapters::adapter() const {
  // @@protoc_insertion_point(field_list:proto.system_info.NetworkAdapters.adapter)
  return adapter_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace system_info
}  // namespace proto

// @@protoc_insertion_point(global_scope)
