// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: router_common.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "router_common.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace proto {
class RelayKeyDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RelayKey> {
} _RelayKey_default_instance_;
class RelayCredentialsDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<RelayCredentials> {
} _RelayCredentials_default_instance_;

namespace protobuf_router_5fcommon_2eproto {


void TableStruct::Shutdown() {
  _RelayKey_default_instance_.Shutdown();
  _RelayCredentials_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _RelayKey_default_instance_.DefaultConstruct();
  _RelayCredentials_default_instance_.DefaultConstruct();
  _RelayCredentials_default_instance_.get_mutable()->key_ = const_cast< ::proto::RelayKey*>(
      ::proto::RelayKey::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_router_5fcommon_2eproto

bool RelayKey_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RelayKey_Type RelayKey::TYPE_UNKNOWN;
const RelayKey_Type RelayKey::TYPE_X25519;
const RelayKey_Type RelayKey::Type_MIN;
const RelayKey_Type RelayKey::Type_MAX;
const int RelayKey::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool RelayKey_Encryption_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const RelayKey_Encryption RelayKey::ENCRYPTION_UNKNOWN;
const RelayKey_Encryption RelayKey::ENCRYPTION_CHACHA20_POLY1305;
const RelayKey_Encryption RelayKey::Encryption_MIN;
const RelayKey_Encryption RelayKey::Encryption_MAX;
const int RelayKey::Encryption_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool RouterSession_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 4:
    case 8:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelayKey::kKeyIdFieldNumber;
const int RelayKey::kTypeFieldNumber;
const int RelayKey::kEncryptionFieldNumber;
const int RelayKey::kPublicKeyFieldNumber;
const int RelayKey::kIvFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelayKey::RelayKey()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RelayKey)
}
RelayKey::RelayKey(const RelayKey& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.public_key().size() > 0) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.iv().size() > 0) {
    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  ::memcpy(&key_id_, &from.key_id_,
    reinterpret_cast<char*>(&encryption_) -
    reinterpret_cast<char*>(&key_id_) + sizeof(encryption_));
  // @@protoc_insertion_point(copy_constructor:proto.RelayKey)
}

void RelayKey::SharedCtor() {
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_id_, 0, reinterpret_cast<char*>(&encryption_) -
    reinterpret_cast<char*>(&key_id_) + sizeof(encryption_));
  _cached_size_ = 0;
}

RelayKey::~RelayKey() {
  // @@protoc_insertion_point(destructor:proto.RelayKey)
  SharedDtor();
}

void RelayKey::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void RelayKey::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RelayKey& RelayKey::default_instance() {
  protobuf_router_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

RelayKey* RelayKey::New(::google::protobuf::Arena* arena) const {
  RelayKey* n = new RelayKey;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelayKey::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RelayKey)
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_id_, 0, reinterpret_cast<char*>(&encryption_) -
    reinterpret_cast<char*>(&key_id_) + sizeof(encryption_));
}

bool RelayKey::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RelayKey)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 key_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.RelayKey.Type type = 2;
      case 2: {
        if (tag == 16u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto::RelayKey_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.RelayKey.Encryption encryption = 3;
      case 3: {
        if (tag == 24u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_encryption(static_cast< ::proto::RelayKey_Encryption >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes public_key = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes iv = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_iv()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RelayKey)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RelayKey)
  return false;
#undef DO_
}

void RelayKey::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RelayKey)
  // uint32 key_id = 1;
  if (this->key_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key_id(), output);
  }

  // .proto.RelayKey.Type type = 2;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->type(), output);
  }

  // .proto.RelayKey.Encryption encryption = 3;
  if (this->encryption() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->encryption(), output);
  }

  // bytes public_key = 4;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->public_key(), output);
  }

  // bytes iv = 5;
  if (this->iv().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->iv(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.RelayKey)
}

size_t RelayKey::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RelayKey)
  size_t total_size = 0;

  // bytes public_key = 4;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  // bytes iv = 5;
  if (this->iv().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->iv());
  }

  // uint32 key_id = 1;
  if (this->key_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key_id());
  }

  // .proto.RelayKey.Type type = 2;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // .proto.RelayKey.Encryption encryption = 3;
  if (this->encryption() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->encryption());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelayKey::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RelayKey*>(&from));
}

void RelayKey::MergeFrom(const RelayKey& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RelayKey)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.iv().size() > 0) {

    iv_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.iv_);
  }
  if (from.key_id() != 0) {
    set_key_id(from.key_id());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.encryption() != 0) {
    set_encryption(from.encryption());
  }
}

void RelayKey::CopyFrom(const RelayKey& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RelayKey)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayKey::IsInitialized() const {
  return true;
}

void RelayKey::Swap(RelayKey* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelayKey::InternalSwap(RelayKey* other) {
  public_key_.Swap(&other->public_key_);
  iv_.Swap(&other->iv_);
  std::swap(key_id_, other->key_id_);
  std::swap(type_, other->type_);
  std::swap(encryption_, other->encryption_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RelayKey::GetTypeName() const {
  return "proto.RelayKey";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelayKey

// uint32 key_id = 1;
void RelayKey::clear_key_id() {
  key_id_ = 0u;
}
::google::protobuf::uint32 RelayKey::key_id() const {
  // @@protoc_insertion_point(field_get:proto.RelayKey.key_id)
  return key_id_;
}
void RelayKey::set_key_id(::google::protobuf::uint32 value) {
  
  key_id_ = value;
  // @@protoc_insertion_point(field_set:proto.RelayKey.key_id)
}

// .proto.RelayKey.Type type = 2;
void RelayKey::clear_type() {
  type_ = 0;
}
::proto::RelayKey_Type RelayKey::type() const {
  // @@protoc_insertion_point(field_get:proto.RelayKey.type)
  return static_cast< ::proto::RelayKey_Type >(type_);
}
void RelayKey::set_type(::proto::RelayKey_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.RelayKey.type)
}

// .proto.RelayKey.Encryption encryption = 3;
void RelayKey::clear_encryption() {
  encryption_ = 0;
}
::proto::RelayKey_Encryption RelayKey::encryption() const {
  // @@protoc_insertion_point(field_get:proto.RelayKey.encryption)
  return static_cast< ::proto::RelayKey_Encryption >(encryption_);
}
void RelayKey::set_encryption(::proto::RelayKey_Encryption value) {
  
  encryption_ = value;
  // @@protoc_insertion_point(field_set:proto.RelayKey.encryption)
}

// bytes public_key = 4;
void RelayKey::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RelayKey::public_key() const {
  // @@protoc_insertion_point(field_get:proto.RelayKey.public_key)
  return public_key_.GetNoArena();
}
void RelayKey::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RelayKey.public_key)
}
#if LANG_CXX11
void RelayKey::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RelayKey.public_key)
}
#endif
void RelayKey::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RelayKey.public_key)
}
void RelayKey::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RelayKey.public_key)
}
::std::string* RelayKey::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:proto.RelayKey.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RelayKey::release_public_key() {
  // @@protoc_insertion_point(field_release:proto.RelayKey.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RelayKey::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:proto.RelayKey.public_key)
}

// bytes iv = 5;
void RelayKey::clear_iv() {
  iv_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RelayKey::iv() const {
  // @@protoc_insertion_point(field_get:proto.RelayKey.iv)
  return iv_.GetNoArena();
}
void RelayKey::set_iv(const ::std::string& value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RelayKey.iv)
}
#if LANG_CXX11
void RelayKey::set_iv(::std::string&& value) {
  
  iv_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RelayKey.iv)
}
#endif
void RelayKey::set_iv(const char* value) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RelayKey.iv)
}
void RelayKey::set_iv(const void* value, size_t size) {
  
  iv_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RelayKey.iv)
}
::std::string* RelayKey::mutable_iv() {
  
  // @@protoc_insertion_point(field_mutable:proto.RelayKey.iv)
  return iv_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RelayKey::release_iv() {
  // @@protoc_insertion_point(field_release:proto.RelayKey.iv)
  
  return iv_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RelayKey::set_allocated_iv(::std::string* iv) {
  if (iv != NULL) {
    
  } else {
    
  }
  iv_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iv);
  // @@protoc_insertion_point(field_set_allocated:proto.RelayKey.iv)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int RelayCredentials::kHostFieldNumber;
const int RelayCredentials::kPortFieldNumber;
const int RelayCredentials::kKeyFieldNumber;
const int RelayCredentials::kSecretFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

RelayCredentials::RelayCredentials()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_router_5fcommon_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.RelayCredentials)
}
RelayCredentials::RelayCredentials(const RelayCredentials& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.host().size() > 0) {
    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.secret().size() > 0) {
    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.has_key()) {
    key_ = new ::proto::RelayKey(*from.key_);
  } else {
    key_ = NULL;
  }
  port_ = from.port_;
  // @@protoc_insertion_point(copy_constructor:proto.RelayCredentials)
}

void RelayCredentials::SharedCtor() {
  host_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&key_, 0, reinterpret_cast<char*>(&port_) -
    reinterpret_cast<char*>(&key_) + sizeof(port_));
  _cached_size_ = 0;
}

RelayCredentials::~RelayCredentials() {
  // @@protoc_insertion_point(destructor:proto.RelayCredentials)
  SharedDtor();
}

void RelayCredentials::SharedDtor() {
  host_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) {
    delete key_;
  }
}

void RelayCredentials::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const RelayCredentials& RelayCredentials::default_instance() {
  protobuf_router_5fcommon_2eproto::InitDefaults();
  return *internal_default_instance();
}

RelayCredentials* RelayCredentials::New(::google::protobuf::Arena* arena) const {
  RelayCredentials* n = new RelayCredentials;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void RelayCredentials::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.RelayCredentials)
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && key_ != NULL) {
    delete key_;
  }
  key_ = NULL;
  port_ = 0u;
}

bool RelayCredentials::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.RelayCredentials)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string host = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_host()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->host().data(), this->host().length(),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "proto.RelayCredentials.host"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 port = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &port_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.RelayKey key = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes secret = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secret()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.RelayCredentials)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.RelayCredentials)
  return false;
#undef DO_
}

void RelayCredentials::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.RelayCredentials)
  // string host = 1;
  if (this->host().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->host().data(), this->host().length(),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "proto.RelayCredentials.host");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->host(), output);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->port(), output);
  }

  // .proto.RelayKey key = 3;
  if (this->has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->key_, output);
  }

  // bytes secret = 4;
  if (this->secret().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      4, this->secret(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.RelayCredentials)
}

size_t RelayCredentials::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.RelayCredentials)
  size_t total_size = 0;

  // string host = 1;
  if (this->host().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->host());
  }

  // bytes secret = 4;
  if (this->secret().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->secret());
  }

  // .proto.RelayKey key = 3;
  if (this->has_key()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_);
  }

  // uint32 port = 2;
  if (this->port() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->port());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelayCredentials::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const RelayCredentials*>(&from));
}

void RelayCredentials::MergeFrom(const RelayCredentials& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.RelayCredentials)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.host().size() > 0) {

    host_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.host_);
  }
  if (from.secret().size() > 0) {

    secret_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.secret_);
  }
  if (from.has_key()) {
    mutable_key()->::proto::RelayKey::MergeFrom(from.key());
  }
  if (from.port() != 0) {
    set_port(from.port());
  }
}

void RelayCredentials::CopyFrom(const RelayCredentials& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.RelayCredentials)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayCredentials::IsInitialized() const {
  return true;
}

void RelayCredentials::Swap(RelayCredentials* other) {
  if (other == this) return;
  InternalSwap(other);
}
void RelayCredentials::InternalSwap(RelayCredentials* other) {
  host_.Swap(&other->host_);
  secret_.Swap(&other->secret_);
  std::swap(key_, other->key_);
  std::swap(port_, other->port_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string RelayCredentials::GetTypeName() const {
  return "proto.RelayCredentials";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// RelayCredentials

// string host = 1;
void RelayCredentials::clear_host() {
  host_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RelayCredentials::host() const {
  // @@protoc_insertion_point(field_get:proto.RelayCredentials.host)
  return host_.GetNoArena();
}
void RelayCredentials::set_host(const ::std::string& value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RelayCredentials.host)
}
#if LANG_CXX11
void RelayCredentials::set_host(::std::string&& value) {
  
  host_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RelayCredentials.host)
}
#endif
void RelayCredentials::set_host(const char* value) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RelayCredentials.host)
}
void RelayCredentials::set_host(const char* value, size_t size) {
  
  host_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RelayCredentials.host)
}
::std::string* RelayCredentials::mutable_host() {
  
  // @@protoc_insertion_point(field_mutable:proto.RelayCredentials.host)
  return host_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RelayCredentials::release_host() {
  // @@protoc_insertion_point(field_release:proto.RelayCredentials.host)
  
  return host_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RelayCredentials::set_allocated_host(::std::string* host) {
  if (host != NULL) {
    
  } else {
    
  }
  host_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), host);
  // @@protoc_insertion_point(field_set_allocated:proto.RelayCredentials.host)
}

// uint32 port = 2;
void RelayCredentials::clear_port() {
  port_ = 0u;
}
::google::protobuf::uint32 RelayCredentials::port() const {
  // @@protoc_insertion_point(field_get:proto.RelayCredentials.port)
  return port_;
}
void RelayCredentials::set_port(::google::protobuf::uint32 value) {
  
  port_ = value;
  // @@protoc_insertion_point(field_set:proto.RelayCredentials.port)
}

// .proto.RelayKey key = 3;
bool RelayCredentials::has_key() const {
  return this != internal_default_instance() && key_ != NULL;
}
void RelayCredentials::clear_key() {
  if (GetArenaNoVirtual() == NULL && key_ != NULL) delete key_;
  key_ = NULL;
}
const ::proto::RelayKey& RelayCredentials::key() const {
  // @@protoc_insertion_point(field_get:proto.RelayCredentials.key)
  return key_ != NULL ? *key_
                         : *::proto::RelayKey::internal_default_instance();
}
::proto::RelayKey* RelayCredentials::mutable_key() {
  
  if (key_ == NULL) {
    key_ = new ::proto::RelayKey;
  }
  // @@protoc_insertion_point(field_mutable:proto.RelayCredentials.key)
  return key_;
}
::proto::RelayKey* RelayCredentials::release_key() {
  // @@protoc_insertion_point(field_release:proto.RelayCredentials.key)
  
  ::proto::RelayKey* temp = key_;
  key_ = NULL;
  return temp;
}
void RelayCredentials::set_allocated_key(::proto::RelayKey* key) {
  delete key_;
  key_ = key;
  if (key) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.RelayCredentials.key)
}

// bytes secret = 4;
void RelayCredentials::clear_secret() {
  secret_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& RelayCredentials::secret() const {
  // @@protoc_insertion_point(field_get:proto.RelayCredentials.secret)
  return secret_.GetNoArena();
}
void RelayCredentials::set_secret(const ::std::string& value) {
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.RelayCredentials.secret)
}
#if LANG_CXX11
void RelayCredentials::set_secret(::std::string&& value) {
  
  secret_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.RelayCredentials.secret)
}
#endif
void RelayCredentials::set_secret(const char* value) {
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.RelayCredentials.secret)
}
void RelayCredentials::set_secret(const void* value, size_t size) {
  
  secret_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.RelayCredentials.secret)
}
::std::string* RelayCredentials::mutable_secret() {
  
  // @@protoc_insertion_point(field_mutable:proto.RelayCredentials.secret)
  return secret_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* RelayCredentials::release_secret() {
  // @@protoc_insertion_point(field_release:proto.RelayCredentials.secret)
  
  return secret_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void RelayCredentials::set_allocated_secret(::std::string* secret) {
  if (secret != NULL) {
    
  } else {
    
  }
  secret_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), secret);
  // @@protoc_insertion_point(field_set_allocated:proto.RelayCredentials.secret)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
