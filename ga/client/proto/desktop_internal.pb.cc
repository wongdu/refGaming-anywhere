// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: desktop_internal.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "desktop_internal.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace proto {
namespace internal {
class DesktopFrameDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DesktopFrame> {
} _DesktopFrame_default_instance_;
class MouseCursorDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<MouseCursor> {
} _MouseCursor_default_instance_;
class SharedBufferDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SharedBuffer> {
} _SharedBuffer_default_instance_;
class ScreenCapturedDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ScreenCaptured> {
} _ScreenCaptured_default_instance_;
class NextScreenCaptureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<NextScreenCapture> {
} _NextScreenCapture_default_instance_;
class SelectSourceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<SelectSource> {
} _SelectSource_default_instance_;
class ConfigureDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Configure> {
} _Configure_default_instance_;
class ControlDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<Control> {
} _Control_default_instance_;
class ServiceToDesktopDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<ServiceToDesktop> {
} _ServiceToDesktop_default_instance_;
class DesktopToServiceDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<DesktopToService> {
} _DesktopToService_default_instance_;

namespace protobuf_desktop_5finternal_2eproto {


void TableStruct::Shutdown() {
  _DesktopFrame_default_instance_.Shutdown();
  _MouseCursor_default_instance_.Shutdown();
  _SharedBuffer_default_instance_.Shutdown();
  _ScreenCaptured_default_instance_.Shutdown();
  _NextScreenCapture_default_instance_.Shutdown();
  _SelectSource_default_instance_.Shutdown();
  _Configure_default_instance_.Shutdown();
  _Control_default_instance_.Shutdown();
  _ServiceToDesktop_default_instance_.Shutdown();
  _DesktopToService_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::proto::protobuf_desktop_2eproto::InitDefaults();
  ::proto::protobuf_desktop_5fextensions_2eproto::InitDefaults();
  _DesktopFrame_default_instance_.DefaultConstruct();
  _MouseCursor_default_instance_.DefaultConstruct();
  _SharedBuffer_default_instance_.DefaultConstruct();
  _ScreenCaptured_default_instance_.DefaultConstruct();
  _NextScreenCapture_default_instance_.DefaultConstruct();
  _SelectSource_default_instance_.DefaultConstruct();
  _Configure_default_instance_.DefaultConstruct();
  _Control_default_instance_.DefaultConstruct();
  _ServiceToDesktop_default_instance_.DefaultConstruct();
  _DesktopToService_default_instance_.DefaultConstruct();
  _ScreenCaptured_default_instance_.get_mutable()->frame_ = const_cast< ::proto::internal::DesktopFrame*>(
      ::proto::internal::DesktopFrame::internal_default_instance());
  _ScreenCaptured_default_instance_.get_mutable()->mouse_cursor_ = const_cast< ::proto::internal::MouseCursor*>(
      ::proto::internal::MouseCursor::internal_default_instance());
  _SelectSource_default_instance_.get_mutable()->screen_ = const_cast< ::proto::Screen*>(
      ::proto::Screen::internal_default_instance());
  _ServiceToDesktop_default_instance_.get_mutable()->control_ = const_cast< ::proto::internal::Control*>(
      ::proto::internal::Control::internal_default_instance());
  _ServiceToDesktop_default_instance_.get_mutable()->configure_ = const_cast< ::proto::internal::Configure*>(
      ::proto::internal::Configure::internal_default_instance());
  _ServiceToDesktop_default_instance_.get_mutable()->select_source_ = const_cast< ::proto::internal::SelectSource*>(
      ::proto::internal::SelectSource::internal_default_instance());
  _ServiceToDesktop_default_instance_.get_mutable()->next_screen_capture_ = const_cast< ::proto::internal::NextScreenCapture*>(
      ::proto::internal::NextScreenCapture::internal_default_instance());
  _ServiceToDesktop_default_instance_.get_mutable()->key_event_ = const_cast< ::proto::KeyEvent*>(
      ::proto::KeyEvent::internal_default_instance());
  _ServiceToDesktop_default_instance_.get_mutable()->mouse_event_ = const_cast< ::proto::MouseEvent*>(
      ::proto::MouseEvent::internal_default_instance());
  _ServiceToDesktop_default_instance_.get_mutable()->clipboard_event_ = const_cast< ::proto::ClipboardEvent*>(
      ::proto::ClipboardEvent::internal_default_instance());
  _DesktopToService_default_instance_.get_mutable()->screen_list_ = const_cast< ::proto::ScreenList*>(
      ::proto::ScreenList::internal_default_instance());
  _DesktopToService_default_instance_.get_mutable()->shared_buffer_ = const_cast< ::proto::internal::SharedBuffer*>(
      ::proto::internal::SharedBuffer::internal_default_instance());
  _DesktopToService_default_instance_.get_mutable()->screen_captured_ = const_cast< ::proto::internal::ScreenCaptured*>(
      ::proto::internal::ScreenCaptured::internal_default_instance());
  _DesktopToService_default_instance_.get_mutable()->audio_packet_ = const_cast< ::proto::AudioPacket*>(
      ::proto::AudioPacket::internal_default_instance());
  _DesktopToService_default_instance_.get_mutable()->clipboard_event_ = const_cast< ::proto::ClipboardEvent*>(
      ::proto::ClipboardEvent::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::proto::protobuf_desktop_2eproto::AddDescriptors();
  ::proto::protobuf_desktop_5fextensions_2eproto::AddDescriptors();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_desktop_5finternal_2eproto

bool SharedBuffer_Type_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const SharedBuffer_Type SharedBuffer::CREATE;
const SharedBuffer_Type SharedBuffer::RELEASE;
const SharedBuffer_Type SharedBuffer::Type_MIN;
const SharedBuffer_Type SharedBuffer::Type_MAX;
const int SharedBuffer::Type_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool Control_Action_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const Control_Action Control::UNKNOWN;
const Control_Action Control::DISABLE;
const Control_Action Control::ENABLE;
const Control_Action Control::LOGOFF;
const Control_Action Control::LOCK;
const Control_Action Control::Action_MIN;
const Control_Action Control::Action_MAX;
const int Control::Action_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DesktopFrame::kCapturerTypeFieldNumber;
const int DesktopFrame::kSharedBufferIdFieldNumber;
const int DesktopFrame::kWidthFieldNumber;
const int DesktopFrame::kHeightFieldNumber;
const int DesktopFrame::kDpiXFieldNumber;
const int DesktopFrame::kDpiYFieldNumber;
const int DesktopFrame::kDirtyRectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DesktopFrame::DesktopFrame()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.internal.DesktopFrame)
}
DesktopFrame::DesktopFrame(const DesktopFrame& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      dirty_rect_(from.dirty_rect_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&capturer_type_, &from.capturer_type_,
    reinterpret_cast<char*>(&dpi_y_) -
    reinterpret_cast<char*>(&capturer_type_) + sizeof(dpi_y_));
  // @@protoc_insertion_point(copy_constructor:proto.internal.DesktopFrame)
}

void DesktopFrame::SharedCtor() {
  ::memset(&capturer_type_, 0, reinterpret_cast<char*>(&dpi_y_) -
    reinterpret_cast<char*>(&capturer_type_) + sizeof(dpi_y_));
  _cached_size_ = 0;
}

DesktopFrame::~DesktopFrame() {
  // @@protoc_insertion_point(destructor:proto.internal.DesktopFrame)
  SharedDtor();
}

void DesktopFrame::SharedDtor() {
}

void DesktopFrame::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DesktopFrame& DesktopFrame::default_instance() {
  protobuf_desktop_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

DesktopFrame* DesktopFrame::New(::google::protobuf::Arena* arena) const {
  DesktopFrame* n = new DesktopFrame;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DesktopFrame::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.DesktopFrame)
  dirty_rect_.Clear();
  ::memset(&capturer_type_, 0, reinterpret_cast<char*>(&dpi_y_) -
    reinterpret_cast<char*>(&capturer_type_) + sizeof(dpi_y_));
}

bool DesktopFrame::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.internal.DesktopFrame)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 capturer_type = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &capturer_type_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 shared_buffer_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shared_buffer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 width = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dpi_x = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dpi_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 dpi_y = 6;
      case 6: {
        if (tag == 48u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dpi_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .proto.Rect dirty_rect = 7;
      case 7: {
        if (tag == 58u) {
          DO_(input->IncrementRecursionDepth());
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_dirty_rect()));
        } else {
          goto handle_unusual;
        }
        input->UnsafeDecrementRecursionDepth();
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.internal.DesktopFrame)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.internal.DesktopFrame)
  return false;
#undef DO_
}

void DesktopFrame::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.internal.DesktopFrame)
  // uint32 capturer_type = 1;
  if (this->capturer_type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->capturer_type(), output);
  }

  // int32 shared_buffer_id = 2;
  if (this->shared_buffer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shared_buffer_id(), output);
  }

  // int32 width = 3;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->width(), output);
  }

  // int32 height = 4;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->height(), output);
  }

  // int32 dpi_x = 5;
  if (this->dpi_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dpi_x(), output);
  }

  // int32 dpi_y = 6;
  if (this->dpi_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->dpi_y(), output);
  }

  // repeated .proto.Rect dirty_rect = 7;
  for (unsigned int i = 0, n = this->dirty_rect_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, this->dirty_rect(i), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.internal.DesktopFrame)
}

size_t DesktopFrame::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.DesktopFrame)
  size_t total_size = 0;

  // repeated .proto.Rect dirty_rect = 7;
  {
    unsigned int count = this->dirty_rect_size();
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dirty_rect(i));
    }
  }

  // uint32 capturer_type = 1;
  if (this->capturer_type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->capturer_type());
  }

  // int32 shared_buffer_id = 2;
  if (this->shared_buffer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shared_buffer_id());
  }

  // int32 width = 3;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 4;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 dpi_x = 5;
  if (this->dpi_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dpi_x());
  }

  // int32 dpi_y = 6;
  if (this->dpi_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->dpi_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DesktopFrame::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DesktopFrame*>(&from));
}

void DesktopFrame::MergeFrom(const DesktopFrame& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.DesktopFrame)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  dirty_rect_.MergeFrom(from.dirty_rect_);
  if (from.capturer_type() != 0) {
    set_capturer_type(from.capturer_type());
  }
  if (from.shared_buffer_id() != 0) {
    set_shared_buffer_id(from.shared_buffer_id());
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.dpi_x() != 0) {
    set_dpi_x(from.dpi_x());
  }
  if (from.dpi_y() != 0) {
    set_dpi_y(from.dpi_y());
  }
}

void DesktopFrame::CopyFrom(const DesktopFrame& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.DesktopFrame)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesktopFrame::IsInitialized() const {
  return true;
}

void DesktopFrame::Swap(DesktopFrame* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DesktopFrame::InternalSwap(DesktopFrame* other) {
  dirty_rect_.UnsafeArenaSwap(&other->dirty_rect_);
  std::swap(capturer_type_, other->capturer_type_);
  std::swap(shared_buffer_id_, other->shared_buffer_id_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(dpi_x_, other->dpi_x_);
  std::swap(dpi_y_, other->dpi_y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DesktopFrame::GetTypeName() const {
  return "proto.internal.DesktopFrame";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DesktopFrame

// uint32 capturer_type = 1;
void DesktopFrame::clear_capturer_type() {
  capturer_type_ = 0u;
}
::google::protobuf::uint32 DesktopFrame::capturer_type() const {
  // @@protoc_insertion_point(field_get:proto.internal.DesktopFrame.capturer_type)
  return capturer_type_;
}
void DesktopFrame::set_capturer_type(::google::protobuf::uint32 value) {
  
  capturer_type_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.DesktopFrame.capturer_type)
}

// int32 shared_buffer_id = 2;
void DesktopFrame::clear_shared_buffer_id() {
  shared_buffer_id_ = 0;
}
::google::protobuf::int32 DesktopFrame::shared_buffer_id() const {
  // @@protoc_insertion_point(field_get:proto.internal.DesktopFrame.shared_buffer_id)
  return shared_buffer_id_;
}
void DesktopFrame::set_shared_buffer_id(::google::protobuf::int32 value) {
  
  shared_buffer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.DesktopFrame.shared_buffer_id)
}

// int32 width = 3;
void DesktopFrame::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 DesktopFrame::width() const {
  // @@protoc_insertion_point(field_get:proto.internal.DesktopFrame.width)
  return width_;
}
void DesktopFrame::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.DesktopFrame.width)
}

// int32 height = 4;
void DesktopFrame::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 DesktopFrame::height() const {
  // @@protoc_insertion_point(field_get:proto.internal.DesktopFrame.height)
  return height_;
}
void DesktopFrame::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.DesktopFrame.height)
}

// int32 dpi_x = 5;
void DesktopFrame::clear_dpi_x() {
  dpi_x_ = 0;
}
::google::protobuf::int32 DesktopFrame::dpi_x() const {
  // @@protoc_insertion_point(field_get:proto.internal.DesktopFrame.dpi_x)
  return dpi_x_;
}
void DesktopFrame::set_dpi_x(::google::protobuf::int32 value) {
  
  dpi_x_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.DesktopFrame.dpi_x)
}

// int32 dpi_y = 6;
void DesktopFrame::clear_dpi_y() {
  dpi_y_ = 0;
}
::google::protobuf::int32 DesktopFrame::dpi_y() const {
  // @@protoc_insertion_point(field_get:proto.internal.DesktopFrame.dpi_y)
  return dpi_y_;
}
void DesktopFrame::set_dpi_y(::google::protobuf::int32 value) {
  
  dpi_y_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.DesktopFrame.dpi_y)
}

// repeated .proto.Rect dirty_rect = 7;
int DesktopFrame::dirty_rect_size() const {
  return dirty_rect_.size();
}
void DesktopFrame::clear_dirty_rect() {
  dirty_rect_.Clear();
}
const ::proto::Rect& DesktopFrame::dirty_rect(int index) const {
  // @@protoc_insertion_point(field_get:proto.internal.DesktopFrame.dirty_rect)
  return dirty_rect_.Get(index);
}
::proto::Rect* DesktopFrame::mutable_dirty_rect(int index) {
  // @@protoc_insertion_point(field_mutable:proto.internal.DesktopFrame.dirty_rect)
  return dirty_rect_.Mutable(index);
}
::proto::Rect* DesktopFrame::add_dirty_rect() {
  // @@protoc_insertion_point(field_add:proto.internal.DesktopFrame.dirty_rect)
  return dirty_rect_.Add();
}
::google::protobuf::RepeatedPtrField< ::proto::Rect >*
DesktopFrame::mutable_dirty_rect() {
  // @@protoc_insertion_point(field_mutable_list:proto.internal.DesktopFrame.dirty_rect)
  return &dirty_rect_;
}
const ::google::protobuf::RepeatedPtrField< ::proto::Rect >&
DesktopFrame::dirty_rect() const {
  // @@protoc_insertion_point(field_list:proto.internal.DesktopFrame.dirty_rect)
  return dirty_rect_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int MouseCursor::kWidthFieldNumber;
const int MouseCursor::kHeightFieldNumber;
const int MouseCursor::kHotspotXFieldNumber;
const int MouseCursor::kHotspotYFieldNumber;
const int MouseCursor::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

MouseCursor::MouseCursor()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.internal.MouseCursor)
}
MouseCursor::MouseCursor(const MouseCursor& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  ::memcpy(&width_, &from.width_,
    reinterpret_cast<char*>(&hotspot_y_) -
    reinterpret_cast<char*>(&width_) + sizeof(hotspot_y_));
  // @@protoc_insertion_point(copy_constructor:proto.internal.MouseCursor)
}

void MouseCursor::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, reinterpret_cast<char*>(&hotspot_y_) -
    reinterpret_cast<char*>(&width_) + sizeof(hotspot_y_));
  _cached_size_ = 0;
}

MouseCursor::~MouseCursor() {
  // @@protoc_insertion_point(destructor:proto.internal.MouseCursor)
  SharedDtor();
}

void MouseCursor::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void MouseCursor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const MouseCursor& MouseCursor::default_instance() {
  protobuf_desktop_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

MouseCursor* MouseCursor::New(::google::protobuf::Arena* arena) const {
  MouseCursor* n = new MouseCursor;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void MouseCursor::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.MouseCursor)
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&width_, 0, reinterpret_cast<char*>(&hotspot_y_) -
    reinterpret_cast<char*>(&width_) + sizeof(hotspot_y_));
}

bool MouseCursor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.internal.MouseCursor)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 width = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &width_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 height = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &height_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hotspot_x = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotspot_x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 hotspot_y = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hotspot_y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.internal.MouseCursor)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.internal.MouseCursor)
  return false;
#undef DO_
}

void MouseCursor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.internal.MouseCursor)
  // int32 width = 1;
  if (this->width() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->width(), output);
  }

  // int32 height = 2;
  if (this->height() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->height(), output);
  }

  // int32 hotspot_x = 3;
  if (this->hotspot_x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hotspot_x(), output);
  }

  // int32 hotspot_y = 4;
  if (this->hotspot_y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hotspot_y(), output);
  }

  // bytes data = 5;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      5, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.internal.MouseCursor)
}

size_t MouseCursor::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.MouseCursor)
  size_t total_size = 0;

  // bytes data = 5;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // int32 width = 1;
  if (this->width() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->width());
  }

  // int32 height = 2;
  if (this->height() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->height());
  }

  // int32 hotspot_x = 3;
  if (this->hotspot_x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hotspot_x());
  }

  // int32 hotspot_y = 4;
  if (this->hotspot_y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->hotspot_y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MouseCursor::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const MouseCursor*>(&from));
}

void MouseCursor::MergeFrom(const MouseCursor& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.MouseCursor)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.width() != 0) {
    set_width(from.width());
  }
  if (from.height() != 0) {
    set_height(from.height());
  }
  if (from.hotspot_x() != 0) {
    set_hotspot_x(from.hotspot_x());
  }
  if (from.hotspot_y() != 0) {
    set_hotspot_y(from.hotspot_y());
  }
}

void MouseCursor::CopyFrom(const MouseCursor& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.MouseCursor)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MouseCursor::IsInitialized() const {
  return true;
}

void MouseCursor::Swap(MouseCursor* other) {
  if (other == this) return;
  InternalSwap(other);
}
void MouseCursor::InternalSwap(MouseCursor* other) {
  data_.Swap(&other->data_);
  std::swap(width_, other->width_);
  std::swap(height_, other->height_);
  std::swap(hotspot_x_, other->hotspot_x_);
  std::swap(hotspot_y_, other->hotspot_y_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string MouseCursor::GetTypeName() const {
  return "proto.internal.MouseCursor";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// MouseCursor

// int32 width = 1;
void MouseCursor::clear_width() {
  width_ = 0;
}
::google::protobuf::int32 MouseCursor::width() const {
  // @@protoc_insertion_point(field_get:proto.internal.MouseCursor.width)
  return width_;
}
void MouseCursor::set_width(::google::protobuf::int32 value) {
  
  width_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.MouseCursor.width)
}

// int32 height = 2;
void MouseCursor::clear_height() {
  height_ = 0;
}
::google::protobuf::int32 MouseCursor::height() const {
  // @@protoc_insertion_point(field_get:proto.internal.MouseCursor.height)
  return height_;
}
void MouseCursor::set_height(::google::protobuf::int32 value) {
  
  height_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.MouseCursor.height)
}

// int32 hotspot_x = 3;
void MouseCursor::clear_hotspot_x() {
  hotspot_x_ = 0;
}
::google::protobuf::int32 MouseCursor::hotspot_x() const {
  // @@protoc_insertion_point(field_get:proto.internal.MouseCursor.hotspot_x)
  return hotspot_x_;
}
void MouseCursor::set_hotspot_x(::google::protobuf::int32 value) {
  
  hotspot_x_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.MouseCursor.hotspot_x)
}

// int32 hotspot_y = 4;
void MouseCursor::clear_hotspot_y() {
  hotspot_y_ = 0;
}
::google::protobuf::int32 MouseCursor::hotspot_y() const {
  // @@protoc_insertion_point(field_get:proto.internal.MouseCursor.hotspot_y)
  return hotspot_y_;
}
void MouseCursor::set_hotspot_y(::google::protobuf::int32 value) {
  
  hotspot_y_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.MouseCursor.hotspot_y)
}

// bytes data = 5;
void MouseCursor::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& MouseCursor::data() const {
  // @@protoc_insertion_point(field_get:proto.internal.MouseCursor.data)
  return data_.GetNoArena();
}
void MouseCursor::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.internal.MouseCursor.data)
}
#if LANG_CXX11
void MouseCursor::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.internal.MouseCursor.data)
}
#endif
void MouseCursor::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.internal.MouseCursor.data)
}
void MouseCursor::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.internal.MouseCursor.data)
}
::std::string* MouseCursor::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.internal.MouseCursor.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* MouseCursor::release_data() {
  // @@protoc_insertion_point(field_release:proto.internal.MouseCursor.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void MouseCursor::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.internal.MouseCursor.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SharedBuffer::kTypeFieldNumber;
const int SharedBuffer::kSharedBufferIdFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SharedBuffer::SharedBuffer()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.internal.SharedBuffer)
}
SharedBuffer::SharedBuffer(const SharedBuffer& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&type_, &from.type_,
    reinterpret_cast<char*>(&shared_buffer_id_) -
    reinterpret_cast<char*>(&type_) + sizeof(shared_buffer_id_));
  // @@protoc_insertion_point(copy_constructor:proto.internal.SharedBuffer)
}

void SharedBuffer::SharedCtor() {
  ::memset(&type_, 0, reinterpret_cast<char*>(&shared_buffer_id_) -
    reinterpret_cast<char*>(&type_) + sizeof(shared_buffer_id_));
  _cached_size_ = 0;
}

SharedBuffer::~SharedBuffer() {
  // @@protoc_insertion_point(destructor:proto.internal.SharedBuffer)
  SharedDtor();
}

void SharedBuffer::SharedDtor() {
}

void SharedBuffer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SharedBuffer& SharedBuffer::default_instance() {
  protobuf_desktop_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SharedBuffer* SharedBuffer::New(::google::protobuf::Arena* arena) const {
  SharedBuffer* n = new SharedBuffer;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SharedBuffer::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.SharedBuffer)
  ::memset(&type_, 0, reinterpret_cast<char*>(&shared_buffer_id_) -
    reinterpret_cast<char*>(&type_) + sizeof(shared_buffer_id_));
}

bool SharedBuffer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.internal.SharedBuffer)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.internal.SharedBuffer.Type type = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::proto::internal::SharedBuffer_Type >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 shared_buffer_id = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shared_buffer_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.internal.SharedBuffer)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.internal.SharedBuffer)
  return false;
#undef DO_
}

void SharedBuffer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.internal.SharedBuffer)
  // .proto.internal.SharedBuffer.Type type = 1;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->type(), output);
  }

  // int32 shared_buffer_id = 2;
  if (this->shared_buffer_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->shared_buffer_id(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.internal.SharedBuffer)
}

size_t SharedBuffer::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.SharedBuffer)
  size_t total_size = 0;

  // .proto.internal.SharedBuffer.Type type = 1;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  // int32 shared_buffer_id = 2;
  if (this->shared_buffer_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->shared_buffer_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SharedBuffer::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SharedBuffer*>(&from));
}

void SharedBuffer::MergeFrom(const SharedBuffer& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.SharedBuffer)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.type() != 0) {
    set_type(from.type());
  }
  if (from.shared_buffer_id() != 0) {
    set_shared_buffer_id(from.shared_buffer_id());
  }
}

void SharedBuffer::CopyFrom(const SharedBuffer& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.SharedBuffer)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SharedBuffer::IsInitialized() const {
  return true;
}

void SharedBuffer::Swap(SharedBuffer* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SharedBuffer::InternalSwap(SharedBuffer* other) {
  std::swap(type_, other->type_);
  std::swap(shared_buffer_id_, other->shared_buffer_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SharedBuffer::GetTypeName() const {
  return "proto.internal.SharedBuffer";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SharedBuffer

// .proto.internal.SharedBuffer.Type type = 1;
void SharedBuffer::clear_type() {
  type_ = 0;
}
::proto::internal::SharedBuffer_Type SharedBuffer::type() const {
  // @@protoc_insertion_point(field_get:proto.internal.SharedBuffer.type)
  return static_cast< ::proto::internal::SharedBuffer_Type >(type_);
}
void SharedBuffer::set_type(::proto::internal::SharedBuffer_Type value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.SharedBuffer.type)
}

// int32 shared_buffer_id = 2;
void SharedBuffer::clear_shared_buffer_id() {
  shared_buffer_id_ = 0;
}
::google::protobuf::int32 SharedBuffer::shared_buffer_id() const {
  // @@protoc_insertion_point(field_get:proto.internal.SharedBuffer.shared_buffer_id)
  return shared_buffer_id_;
}
void SharedBuffer::set_shared_buffer_id(::google::protobuf::int32 value) {
  
  shared_buffer_id_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.SharedBuffer.shared_buffer_id)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ScreenCaptured::kFrameFieldNumber;
const int ScreenCaptured::kMouseCursorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ScreenCaptured::ScreenCaptured()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.internal.ScreenCaptured)
}
ScreenCaptured::ScreenCaptured(const ScreenCaptured& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_frame()) {
    frame_ = new ::proto::internal::DesktopFrame(*from.frame_);
  } else {
    frame_ = NULL;
  }
  if (from.has_mouse_cursor()) {
    mouse_cursor_ = new ::proto::internal::MouseCursor(*from.mouse_cursor_);
  } else {
    mouse_cursor_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.internal.ScreenCaptured)
}

void ScreenCaptured::SharedCtor() {
  ::memset(&frame_, 0, reinterpret_cast<char*>(&mouse_cursor_) -
    reinterpret_cast<char*>(&frame_) + sizeof(mouse_cursor_));
  _cached_size_ = 0;
}

ScreenCaptured::~ScreenCaptured() {
  // @@protoc_insertion_point(destructor:proto.internal.ScreenCaptured)
  SharedDtor();
}

void ScreenCaptured::SharedDtor() {
  if (this != internal_default_instance()) {
    delete frame_;
  }
  if (this != internal_default_instance()) {
    delete mouse_cursor_;
  }
}

void ScreenCaptured::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ScreenCaptured& ScreenCaptured::default_instance() {
  protobuf_desktop_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

ScreenCaptured* ScreenCaptured::New(::google::protobuf::Arena* arena) const {
  ScreenCaptured* n = new ScreenCaptured;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ScreenCaptured::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.ScreenCaptured)
  if (GetArenaNoVirtual() == NULL && frame_ != NULL) {
    delete frame_;
  }
  frame_ = NULL;
  if (GetArenaNoVirtual() == NULL && mouse_cursor_ != NULL) {
    delete mouse_cursor_;
  }
  mouse_cursor_ = NULL;
}

bool ScreenCaptured::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.internal.ScreenCaptured)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.internal.DesktopFrame frame = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_frame()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.internal.MouseCursor mouse_cursor = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mouse_cursor()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.internal.ScreenCaptured)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.internal.ScreenCaptured)
  return false;
#undef DO_
}

void ScreenCaptured::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.internal.ScreenCaptured)
  // .proto.internal.DesktopFrame frame = 1;
  if (this->has_frame()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->frame_, output);
  }

  // .proto.internal.MouseCursor mouse_cursor = 2;
  if (this->has_mouse_cursor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->mouse_cursor_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.internal.ScreenCaptured)
}

size_t ScreenCaptured::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.ScreenCaptured)
  size_t total_size = 0;

  // .proto.internal.DesktopFrame frame = 1;
  if (this->has_frame()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->frame_);
  }

  // .proto.internal.MouseCursor mouse_cursor = 2;
  if (this->has_mouse_cursor()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mouse_cursor_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScreenCaptured::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ScreenCaptured*>(&from));
}

void ScreenCaptured::MergeFrom(const ScreenCaptured& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.ScreenCaptured)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_frame()) {
    mutable_frame()->::proto::internal::DesktopFrame::MergeFrom(from.frame());
  }
  if (from.has_mouse_cursor()) {
    mutable_mouse_cursor()->::proto::internal::MouseCursor::MergeFrom(from.mouse_cursor());
  }
}

void ScreenCaptured::CopyFrom(const ScreenCaptured& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.ScreenCaptured)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScreenCaptured::IsInitialized() const {
  return true;
}

void ScreenCaptured::Swap(ScreenCaptured* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ScreenCaptured::InternalSwap(ScreenCaptured* other) {
  std::swap(frame_, other->frame_);
  std::swap(mouse_cursor_, other->mouse_cursor_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ScreenCaptured::GetTypeName() const {
  return "proto.internal.ScreenCaptured";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ScreenCaptured

// .proto.internal.DesktopFrame frame = 1;
bool ScreenCaptured::has_frame() const {
  return this != internal_default_instance() && frame_ != NULL;
}
void ScreenCaptured::clear_frame() {
  if (GetArenaNoVirtual() == NULL && frame_ != NULL) delete frame_;
  frame_ = NULL;
}
const ::proto::internal::DesktopFrame& ScreenCaptured::frame() const {
  // @@protoc_insertion_point(field_get:proto.internal.ScreenCaptured.frame)
  return frame_ != NULL ? *frame_
                         : *::proto::internal::DesktopFrame::internal_default_instance();
}
::proto::internal::DesktopFrame* ScreenCaptured::mutable_frame() {
  
  if (frame_ == NULL) {
    frame_ = new ::proto::internal::DesktopFrame;
  }
  // @@protoc_insertion_point(field_mutable:proto.internal.ScreenCaptured.frame)
  return frame_;
}
::proto::internal::DesktopFrame* ScreenCaptured::release_frame() {
  // @@protoc_insertion_point(field_release:proto.internal.ScreenCaptured.frame)
  
  ::proto::internal::DesktopFrame* temp = frame_;
  frame_ = NULL;
  return temp;
}
void ScreenCaptured::set_allocated_frame(::proto::internal::DesktopFrame* frame) {
  delete frame_;
  frame_ = frame;
  if (frame) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ScreenCaptured.frame)
}

// .proto.internal.MouseCursor mouse_cursor = 2;
bool ScreenCaptured::has_mouse_cursor() const {
  return this != internal_default_instance() && mouse_cursor_ != NULL;
}
void ScreenCaptured::clear_mouse_cursor() {
  if (GetArenaNoVirtual() == NULL && mouse_cursor_ != NULL) delete mouse_cursor_;
  mouse_cursor_ = NULL;
}
const ::proto::internal::MouseCursor& ScreenCaptured::mouse_cursor() const {
  // @@protoc_insertion_point(field_get:proto.internal.ScreenCaptured.mouse_cursor)
  return mouse_cursor_ != NULL ? *mouse_cursor_
                         : *::proto::internal::MouseCursor::internal_default_instance();
}
::proto::internal::MouseCursor* ScreenCaptured::mutable_mouse_cursor() {
  
  if (mouse_cursor_ == NULL) {
    mouse_cursor_ = new ::proto::internal::MouseCursor;
  }
  // @@protoc_insertion_point(field_mutable:proto.internal.ScreenCaptured.mouse_cursor)
  return mouse_cursor_;
}
::proto::internal::MouseCursor* ScreenCaptured::release_mouse_cursor() {
  // @@protoc_insertion_point(field_release:proto.internal.ScreenCaptured.mouse_cursor)
  
  ::proto::internal::MouseCursor* temp = mouse_cursor_;
  mouse_cursor_ = NULL;
  return temp;
}
void ScreenCaptured::set_allocated_mouse_cursor(::proto::internal::MouseCursor* mouse_cursor) {
  delete mouse_cursor_;
  mouse_cursor_ = mouse_cursor;
  if (mouse_cursor) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ScreenCaptured.mouse_cursor)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int NextScreenCapture::kUpdateIntervalFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

NextScreenCapture::NextScreenCapture()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.internal.NextScreenCapture)
}
NextScreenCapture::NextScreenCapture(const NextScreenCapture& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  update_interval_ = from.update_interval_;
  // @@protoc_insertion_point(copy_constructor:proto.internal.NextScreenCapture)
}

void NextScreenCapture::SharedCtor() {
  update_interval_ = 0u;
  _cached_size_ = 0;
}

NextScreenCapture::~NextScreenCapture() {
  // @@protoc_insertion_point(destructor:proto.internal.NextScreenCapture)
  SharedDtor();
}

void NextScreenCapture::SharedDtor() {
}

void NextScreenCapture::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const NextScreenCapture& NextScreenCapture::default_instance() {
  protobuf_desktop_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

NextScreenCapture* NextScreenCapture::New(::google::protobuf::Arena* arena) const {
  NextScreenCapture* n = new NextScreenCapture;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void NextScreenCapture::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.NextScreenCapture)
  update_interval_ = 0u;
}

bool NextScreenCapture::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.internal.NextScreenCapture)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 update_interval = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &update_interval_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.internal.NextScreenCapture)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.internal.NextScreenCapture)
  return false;
#undef DO_
}

void NextScreenCapture::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.internal.NextScreenCapture)
  // uint32 update_interval = 1;
  if (this->update_interval() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->update_interval(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.internal.NextScreenCapture)
}

size_t NextScreenCapture::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.NextScreenCapture)
  size_t total_size = 0;

  // uint32 update_interval = 1;
  if (this->update_interval() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->update_interval());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NextScreenCapture::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const NextScreenCapture*>(&from));
}

void NextScreenCapture::MergeFrom(const NextScreenCapture& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.NextScreenCapture)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.update_interval() != 0) {
    set_update_interval(from.update_interval());
  }
}

void NextScreenCapture::CopyFrom(const NextScreenCapture& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.NextScreenCapture)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NextScreenCapture::IsInitialized() const {
  return true;
}

void NextScreenCapture::Swap(NextScreenCapture* other) {
  if (other == this) return;
  InternalSwap(other);
}
void NextScreenCapture::InternalSwap(NextScreenCapture* other) {
  std::swap(update_interval_, other->update_interval_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string NextScreenCapture::GetTypeName() const {
  return "proto.internal.NextScreenCapture";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// NextScreenCapture

// uint32 update_interval = 1;
void NextScreenCapture::clear_update_interval() {
  update_interval_ = 0u;
}
::google::protobuf::uint32 NextScreenCapture::update_interval() const {
  // @@protoc_insertion_point(field_get:proto.internal.NextScreenCapture.update_interval)
  return update_interval_;
}
void NextScreenCapture::set_update_interval(::google::protobuf::uint32 value) {
  
  update_interval_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.NextScreenCapture.update_interval)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int SelectSource::kScreenFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

SelectSource::SelectSource()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.internal.SelectSource)
}
SelectSource::SelectSource(const SelectSource& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_screen()) {
    screen_ = new ::proto::Screen(*from.screen_);
  } else {
    screen_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.internal.SelectSource)
}

void SelectSource::SharedCtor() {
  screen_ = NULL;
  _cached_size_ = 0;
}

SelectSource::~SelectSource() {
  // @@protoc_insertion_point(destructor:proto.internal.SelectSource)
  SharedDtor();
}

void SelectSource::SharedDtor() {
  if (this != internal_default_instance()) {
    delete screen_;
  }
}

void SelectSource::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const SelectSource& SelectSource::default_instance() {
  protobuf_desktop_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

SelectSource* SelectSource::New(::google::protobuf::Arena* arena) const {
  SelectSource* n = new SelectSource;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void SelectSource::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.SelectSource)
  if (GetArenaNoVirtual() == NULL && screen_ != NULL) {
    delete screen_;
  }
  screen_ = NULL;
}

bool SelectSource::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.internal.SelectSource)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.Screen screen = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screen()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.internal.SelectSource)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.internal.SelectSource)
  return false;
#undef DO_
}

void SelectSource::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.internal.SelectSource)
  // .proto.Screen screen = 1;
  if (this->has_screen()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->screen_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.internal.SelectSource)
}

size_t SelectSource::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.SelectSource)
  size_t total_size = 0;

  // .proto.Screen screen = 1;
  if (this->has_screen()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->screen_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SelectSource::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const SelectSource*>(&from));
}

void SelectSource::MergeFrom(const SelectSource& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.SelectSource)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_screen()) {
    mutable_screen()->::proto::Screen::MergeFrom(from.screen());
  }
}

void SelectSource::CopyFrom(const SelectSource& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.SelectSource)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SelectSource::IsInitialized() const {
  return true;
}

void SelectSource::Swap(SelectSource* other) {
  if (other == this) return;
  InternalSwap(other);
}
void SelectSource::InternalSwap(SelectSource* other) {
  std::swap(screen_, other->screen_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string SelectSource::GetTypeName() const {
  return "proto.internal.SelectSource";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// SelectSource

// .proto.Screen screen = 1;
bool SelectSource::has_screen() const {
  return this != internal_default_instance() && screen_ != NULL;
}
void SelectSource::clear_screen() {
  if (GetArenaNoVirtual() == NULL && screen_ != NULL) delete screen_;
  screen_ = NULL;
}
const ::proto::Screen& SelectSource::screen() const {
  // @@protoc_insertion_point(field_get:proto.internal.SelectSource.screen)
  return screen_ != NULL ? *screen_
                         : *::proto::Screen::internal_default_instance();
}
::proto::Screen* SelectSource::mutable_screen() {
  
  if (screen_ == NULL) {
    screen_ = new ::proto::Screen;
  }
  // @@protoc_insertion_point(field_mutable:proto.internal.SelectSource.screen)
  return screen_;
}
::proto::Screen* SelectSource::release_screen() {
  // @@protoc_insertion_point(field_release:proto.internal.SelectSource.screen)
  
  ::proto::Screen* temp = screen_;
  screen_ = NULL;
  return temp;
}
void SelectSource::set_allocated_screen(::proto::Screen* screen) {
  delete screen_;
  screen_ = screen;
  if (screen) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.SelectSource.screen)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Configure::kDisableFontSmoothingFieldNumber;
const int Configure::kDisableWallpaperFieldNumber;
const int Configure::kDisableEffectsFieldNumber;
const int Configure::kBlockInputFieldNumber;
const int Configure::kLockAtDisconnectFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Configure::Configure()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.internal.Configure)
}
Configure::Configure(const Configure& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&disable_font_smoothing_, &from.disable_font_smoothing_,
    reinterpret_cast<char*>(&lock_at_disconnect_) -
    reinterpret_cast<char*>(&disable_font_smoothing_) + sizeof(lock_at_disconnect_));
  // @@protoc_insertion_point(copy_constructor:proto.internal.Configure)
}

void Configure::SharedCtor() {
  ::memset(&disable_font_smoothing_, 0, reinterpret_cast<char*>(&lock_at_disconnect_) -
    reinterpret_cast<char*>(&disable_font_smoothing_) + sizeof(lock_at_disconnect_));
  _cached_size_ = 0;
}

Configure::~Configure() {
  // @@protoc_insertion_point(destructor:proto.internal.Configure)
  SharedDtor();
}

void Configure::SharedDtor() {
}

void Configure::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Configure& Configure::default_instance() {
  protobuf_desktop_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

Configure* Configure::New(::google::protobuf::Arena* arena) const {
  Configure* n = new Configure;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Configure::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.Configure)
  ::memset(&disable_font_smoothing_, 0, reinterpret_cast<char*>(&lock_at_disconnect_) -
    reinterpret_cast<char*>(&disable_font_smoothing_) + sizeof(lock_at_disconnect_));
}

bool Configure::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.internal.Configure)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool disable_font_smoothing = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_font_smoothing_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_wallpaper = 2;
      case 2: {
        if (tag == 16u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_wallpaper_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool disable_effects = 3;
      case 3: {
        if (tag == 24u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &disable_effects_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool block_input = 4;
      case 4: {
        if (tag == 32u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &block_input_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool lock_at_disconnect = 5;
      case 5: {
        if (tag == 40u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &lock_at_disconnect_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.internal.Configure)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.internal.Configure)
  return false;
#undef DO_
}

void Configure::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.internal.Configure)
  // bool disable_font_smoothing = 1;
  if (this->disable_font_smoothing() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->disable_font_smoothing(), output);
  }

  // bool disable_wallpaper = 2;
  if (this->disable_wallpaper() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->disable_wallpaper(), output);
  }

  // bool disable_effects = 3;
  if (this->disable_effects() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->disable_effects(), output);
  }

  // bool block_input = 4;
  if (this->block_input() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->block_input(), output);
  }

  // bool lock_at_disconnect = 5;
  if (this->lock_at_disconnect() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->lock_at_disconnect(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.internal.Configure)
}

size_t Configure::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.Configure)
  size_t total_size = 0;

  // bool disable_font_smoothing = 1;
  if (this->disable_font_smoothing() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_wallpaper = 2;
  if (this->disable_wallpaper() != 0) {
    total_size += 1 + 1;
  }

  // bool disable_effects = 3;
  if (this->disable_effects() != 0) {
    total_size += 1 + 1;
  }

  // bool block_input = 4;
  if (this->block_input() != 0) {
    total_size += 1 + 1;
  }

  // bool lock_at_disconnect = 5;
  if (this->lock_at_disconnect() != 0) {
    total_size += 1 + 1;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Configure::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Configure*>(&from));
}

void Configure::MergeFrom(const Configure& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.Configure)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.disable_font_smoothing() != 0) {
    set_disable_font_smoothing(from.disable_font_smoothing());
  }
  if (from.disable_wallpaper() != 0) {
    set_disable_wallpaper(from.disable_wallpaper());
  }
  if (from.disable_effects() != 0) {
    set_disable_effects(from.disable_effects());
  }
  if (from.block_input() != 0) {
    set_block_input(from.block_input());
  }
  if (from.lock_at_disconnect() != 0) {
    set_lock_at_disconnect(from.lock_at_disconnect());
  }
}

void Configure::CopyFrom(const Configure& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.Configure)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Configure::IsInitialized() const {
  return true;
}

void Configure::Swap(Configure* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Configure::InternalSwap(Configure* other) {
  std::swap(disable_font_smoothing_, other->disable_font_smoothing_);
  std::swap(disable_wallpaper_, other->disable_wallpaper_);
  std::swap(disable_effects_, other->disable_effects_);
  std::swap(block_input_, other->block_input_);
  std::swap(lock_at_disconnect_, other->lock_at_disconnect_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Configure::GetTypeName() const {
  return "proto.internal.Configure";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Configure

// bool disable_font_smoothing = 1;
void Configure::clear_disable_font_smoothing() {
  disable_font_smoothing_ = false;
}
bool Configure::disable_font_smoothing() const {
  // @@protoc_insertion_point(field_get:proto.internal.Configure.disable_font_smoothing)
  return disable_font_smoothing_;
}
void Configure::set_disable_font_smoothing(bool value) {
  
  disable_font_smoothing_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.Configure.disable_font_smoothing)
}

// bool disable_wallpaper = 2;
void Configure::clear_disable_wallpaper() {
  disable_wallpaper_ = false;
}
bool Configure::disable_wallpaper() const {
  // @@protoc_insertion_point(field_get:proto.internal.Configure.disable_wallpaper)
  return disable_wallpaper_;
}
void Configure::set_disable_wallpaper(bool value) {
  
  disable_wallpaper_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.Configure.disable_wallpaper)
}

// bool disable_effects = 3;
void Configure::clear_disable_effects() {
  disable_effects_ = false;
}
bool Configure::disable_effects() const {
  // @@protoc_insertion_point(field_get:proto.internal.Configure.disable_effects)
  return disable_effects_;
}
void Configure::set_disable_effects(bool value) {
  
  disable_effects_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.Configure.disable_effects)
}

// bool block_input = 4;
void Configure::clear_block_input() {
  block_input_ = false;
}
bool Configure::block_input() const {
  // @@protoc_insertion_point(field_get:proto.internal.Configure.block_input)
  return block_input_;
}
void Configure::set_block_input(bool value) {
  
  block_input_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.Configure.block_input)
}

// bool lock_at_disconnect = 5;
void Configure::clear_lock_at_disconnect() {
  lock_at_disconnect_ = false;
}
bool Configure::lock_at_disconnect() const {
  // @@protoc_insertion_point(field_get:proto.internal.Configure.lock_at_disconnect)
  return lock_at_disconnect_;
}
void Configure::set_lock_at_disconnect(bool value) {
  
  lock_at_disconnect_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.Configure.lock_at_disconnect)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Control::kActionFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Control::Control()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.internal.Control)
}
Control::Control(const Control& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  action_ = from.action_;
  // @@protoc_insertion_point(copy_constructor:proto.internal.Control)
}

void Control::SharedCtor() {
  action_ = 0;
  _cached_size_ = 0;
}

Control::~Control() {
  // @@protoc_insertion_point(destructor:proto.internal.Control)
  SharedDtor();
}

void Control::SharedDtor() {
}

void Control::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const Control& Control::default_instance() {
  protobuf_desktop_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

Control* Control::New(::google::protobuf::Arena* arena) const {
  Control* n = new Control;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Control::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.Control)
  action_ = 0;
}

bool Control::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.internal.Control)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.internal.Control.Action action = 1;
      case 1: {
        if (tag == 8u) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_action(static_cast< ::proto::internal::Control_Action >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.internal.Control)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.internal.Control)
  return false;
#undef DO_
}

void Control::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.internal.Control)
  // .proto.internal.Control.Action action = 1;
  if (this->action() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->action(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.internal.Control)
}

size_t Control::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.Control)
  size_t total_size = 0;

  // .proto.internal.Control.Action action = 1;
  if (this->action() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->action());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Control::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const Control*>(&from));
}

void Control::MergeFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.Control)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.action() != 0) {
    set_action(from.action());
  }
}

void Control::CopyFrom(const Control& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.Control)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Control::IsInitialized() const {
  return true;
}

void Control::Swap(Control* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Control::InternalSwap(Control* other) {
  std::swap(action_, other->action_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string Control::GetTypeName() const {
  return "proto.internal.Control";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Control

// .proto.internal.Control.Action action = 1;
void Control::clear_action() {
  action_ = 0;
}
::proto::internal::Control_Action Control::action() const {
  // @@protoc_insertion_point(field_get:proto.internal.Control.action)
  return static_cast< ::proto::internal::Control_Action >(action_);
}
void Control::set_action(::proto::internal::Control_Action value) {
  
  action_ = value;
  // @@protoc_insertion_point(field_set:proto.internal.Control.action)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int ServiceToDesktop::kControlFieldNumber;
const int ServiceToDesktop::kConfigureFieldNumber;
const int ServiceToDesktop::kSelectSourceFieldNumber;
const int ServiceToDesktop::kNextScreenCaptureFieldNumber;
const int ServiceToDesktop::kKeyEventFieldNumber;
const int ServiceToDesktop::kMouseEventFieldNumber;
const int ServiceToDesktop::kClipboardEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

ServiceToDesktop::ServiceToDesktop()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.internal.ServiceToDesktop)
}
ServiceToDesktop::ServiceToDesktop(const ServiceToDesktop& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_control()) {
    control_ = new ::proto::internal::Control(*from.control_);
  } else {
    control_ = NULL;
  }
  if (from.has_configure()) {
    configure_ = new ::proto::internal::Configure(*from.configure_);
  } else {
    configure_ = NULL;
  }
  if (from.has_select_source()) {
    select_source_ = new ::proto::internal::SelectSource(*from.select_source_);
  } else {
    select_source_ = NULL;
  }
  if (from.has_next_screen_capture()) {
    next_screen_capture_ = new ::proto::internal::NextScreenCapture(*from.next_screen_capture_);
  } else {
    next_screen_capture_ = NULL;
  }
  if (from.has_key_event()) {
    key_event_ = new ::proto::KeyEvent(*from.key_event_);
  } else {
    key_event_ = NULL;
  }
  if (from.has_mouse_event()) {
    mouse_event_ = new ::proto::MouseEvent(*from.mouse_event_);
  } else {
    mouse_event_ = NULL;
  }
  if (from.has_clipboard_event()) {
    clipboard_event_ = new ::proto::ClipboardEvent(*from.clipboard_event_);
  } else {
    clipboard_event_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.internal.ServiceToDesktop)
}

void ServiceToDesktop::SharedCtor() {
  ::memset(&control_, 0, reinterpret_cast<char*>(&clipboard_event_) -
    reinterpret_cast<char*>(&control_) + sizeof(clipboard_event_));
  _cached_size_ = 0;
}

ServiceToDesktop::~ServiceToDesktop() {
  // @@protoc_insertion_point(destructor:proto.internal.ServiceToDesktop)
  SharedDtor();
}

void ServiceToDesktop::SharedDtor() {
  if (this != internal_default_instance()) {
    delete control_;
  }
  if (this != internal_default_instance()) {
    delete configure_;
  }
  if (this != internal_default_instance()) {
    delete select_source_;
  }
  if (this != internal_default_instance()) {
    delete next_screen_capture_;
  }
  if (this != internal_default_instance()) {
    delete key_event_;
  }
  if (this != internal_default_instance()) {
    delete mouse_event_;
  }
  if (this != internal_default_instance()) {
    delete clipboard_event_;
  }
}

void ServiceToDesktop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ServiceToDesktop& ServiceToDesktop::default_instance() {
  protobuf_desktop_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

ServiceToDesktop* ServiceToDesktop::New(::google::protobuf::Arena* arena) const {
  ServiceToDesktop* n = new ServiceToDesktop;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void ServiceToDesktop::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.ServiceToDesktop)
  if (GetArenaNoVirtual() == NULL && control_ != NULL) {
    delete control_;
  }
  control_ = NULL;
  if (GetArenaNoVirtual() == NULL && configure_ != NULL) {
    delete configure_;
  }
  configure_ = NULL;
  if (GetArenaNoVirtual() == NULL && select_source_ != NULL) {
    delete select_source_;
  }
  select_source_ = NULL;
  if (GetArenaNoVirtual() == NULL && next_screen_capture_ != NULL) {
    delete next_screen_capture_;
  }
  next_screen_capture_ = NULL;
  if (GetArenaNoVirtual() == NULL && key_event_ != NULL) {
    delete key_event_;
  }
  key_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && mouse_event_ != NULL) {
    delete mouse_event_;
  }
  mouse_event_ = NULL;
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) {
    delete clipboard_event_;
  }
  clipboard_event_ = NULL;
}

bool ServiceToDesktop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.internal.ServiceToDesktop)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.internal.Control control = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_control()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.internal.Configure configure = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_configure()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.internal.SelectSource select_source = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_select_source()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.internal.NextScreenCapture next_screen_capture = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_next_screen_capture()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.KeyEvent key_event = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_key_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.MouseEvent mouse_event = 6;
      case 6: {
        if (tag == 50u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mouse_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ClipboardEvent clipboard_event = 7;
      case 7: {
        if (tag == 58u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clipboard_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.internal.ServiceToDesktop)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.internal.ServiceToDesktop)
  return false;
#undef DO_
}

void ServiceToDesktop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.internal.ServiceToDesktop)
  // .proto.internal.Control control = 1;
  if (this->has_control()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->control_, output);
  }

  // .proto.internal.Configure configure = 2;
  if (this->has_configure()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->configure_, output);
  }

  // .proto.internal.SelectSource select_source = 3;
  if (this->has_select_source()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->select_source_, output);
  }

  // .proto.internal.NextScreenCapture next_screen_capture = 4;
  if (this->has_next_screen_capture()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->next_screen_capture_, output);
  }

  // .proto.KeyEvent key_event = 5;
  if (this->has_key_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->key_event_, output);
  }

  // .proto.MouseEvent mouse_event = 6;
  if (this->has_mouse_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      6, *this->mouse_event_, output);
  }

  // .proto.ClipboardEvent clipboard_event = 7;
  if (this->has_clipboard_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      7, *this->clipboard_event_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.internal.ServiceToDesktop)
}

size_t ServiceToDesktop::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.ServiceToDesktop)
  size_t total_size = 0;

  // .proto.internal.Control control = 1;
  if (this->has_control()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->control_);
  }

  // .proto.internal.Configure configure = 2;
  if (this->has_configure()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->configure_);
  }

  // .proto.internal.SelectSource select_source = 3;
  if (this->has_select_source()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->select_source_);
  }

  // .proto.internal.NextScreenCapture next_screen_capture = 4;
  if (this->has_next_screen_capture()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->next_screen_capture_);
  }

  // .proto.KeyEvent key_event = 5;
  if (this->has_key_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->key_event_);
  }

  // .proto.MouseEvent mouse_event = 6;
  if (this->has_mouse_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->mouse_event_);
  }

  // .proto.ClipboardEvent clipboard_event = 7;
  if (this->has_clipboard_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clipboard_event_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ServiceToDesktop::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const ServiceToDesktop*>(&from));
}

void ServiceToDesktop::MergeFrom(const ServiceToDesktop& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.ServiceToDesktop)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_control()) {
    mutable_control()->::proto::internal::Control::MergeFrom(from.control());
  }
  if (from.has_configure()) {
    mutable_configure()->::proto::internal::Configure::MergeFrom(from.configure());
  }
  if (from.has_select_source()) {
    mutable_select_source()->::proto::internal::SelectSource::MergeFrom(from.select_source());
  }
  if (from.has_next_screen_capture()) {
    mutable_next_screen_capture()->::proto::internal::NextScreenCapture::MergeFrom(from.next_screen_capture());
  }
  if (from.has_key_event()) {
    mutable_key_event()->::proto::KeyEvent::MergeFrom(from.key_event());
  }
  if (from.has_mouse_event()) {
    mutable_mouse_event()->::proto::MouseEvent::MergeFrom(from.mouse_event());
  }
  if (from.has_clipboard_event()) {
    mutable_clipboard_event()->::proto::ClipboardEvent::MergeFrom(from.clipboard_event());
  }
}

void ServiceToDesktop::CopyFrom(const ServiceToDesktop& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.ServiceToDesktop)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ServiceToDesktop::IsInitialized() const {
  return true;
}

void ServiceToDesktop::Swap(ServiceToDesktop* other) {
  if (other == this) return;
  InternalSwap(other);
}
void ServiceToDesktop::InternalSwap(ServiceToDesktop* other) {
  std::swap(control_, other->control_);
  std::swap(configure_, other->configure_);
  std::swap(select_source_, other->select_source_);
  std::swap(next_screen_capture_, other->next_screen_capture_);
  std::swap(key_event_, other->key_event_);
  std::swap(mouse_event_, other->mouse_event_);
  std::swap(clipboard_event_, other->clipboard_event_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string ServiceToDesktop::GetTypeName() const {
  return "proto.internal.ServiceToDesktop";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// ServiceToDesktop

// .proto.internal.Control control = 1;
bool ServiceToDesktop::has_control() const {
  return this != internal_default_instance() && control_ != NULL;
}
void ServiceToDesktop::clear_control() {
  if (GetArenaNoVirtual() == NULL && control_ != NULL) delete control_;
  control_ = NULL;
}
const ::proto::internal::Control& ServiceToDesktop::control() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceToDesktop.control)
  return control_ != NULL ? *control_
                         : *::proto::internal::Control::internal_default_instance();
}
::proto::internal::Control* ServiceToDesktop::mutable_control() {
  
  if (control_ == NULL) {
    control_ = new ::proto::internal::Control;
  }
  // @@protoc_insertion_point(field_mutable:proto.internal.ServiceToDesktop.control)
  return control_;
}
::proto::internal::Control* ServiceToDesktop::release_control() {
  // @@protoc_insertion_point(field_release:proto.internal.ServiceToDesktop.control)
  
  ::proto::internal::Control* temp = control_;
  control_ = NULL;
  return temp;
}
void ServiceToDesktop::set_allocated_control(::proto::internal::Control* control) {
  delete control_;
  control_ = control;
  if (control) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ServiceToDesktop.control)
}

// .proto.internal.Configure configure = 2;
bool ServiceToDesktop::has_configure() const {
  return this != internal_default_instance() && configure_ != NULL;
}
void ServiceToDesktop::clear_configure() {
  if (GetArenaNoVirtual() == NULL && configure_ != NULL) delete configure_;
  configure_ = NULL;
}
const ::proto::internal::Configure& ServiceToDesktop::configure() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceToDesktop.configure)
  return configure_ != NULL ? *configure_
                         : *::proto::internal::Configure::internal_default_instance();
}
::proto::internal::Configure* ServiceToDesktop::mutable_configure() {
  
  if (configure_ == NULL) {
    configure_ = new ::proto::internal::Configure;
  }
  // @@protoc_insertion_point(field_mutable:proto.internal.ServiceToDesktop.configure)
  return configure_;
}
::proto::internal::Configure* ServiceToDesktop::release_configure() {
  // @@protoc_insertion_point(field_release:proto.internal.ServiceToDesktop.configure)
  
  ::proto::internal::Configure* temp = configure_;
  configure_ = NULL;
  return temp;
}
void ServiceToDesktop::set_allocated_configure(::proto::internal::Configure* configure) {
  delete configure_;
  configure_ = configure;
  if (configure) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ServiceToDesktop.configure)
}

// .proto.internal.SelectSource select_source = 3;
bool ServiceToDesktop::has_select_source() const {
  return this != internal_default_instance() && select_source_ != NULL;
}
void ServiceToDesktop::clear_select_source() {
  if (GetArenaNoVirtual() == NULL && select_source_ != NULL) delete select_source_;
  select_source_ = NULL;
}
const ::proto::internal::SelectSource& ServiceToDesktop::select_source() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceToDesktop.select_source)
  return select_source_ != NULL ? *select_source_
                         : *::proto::internal::SelectSource::internal_default_instance();
}
::proto::internal::SelectSource* ServiceToDesktop::mutable_select_source() {
  
  if (select_source_ == NULL) {
    select_source_ = new ::proto::internal::SelectSource;
  }
  // @@protoc_insertion_point(field_mutable:proto.internal.ServiceToDesktop.select_source)
  return select_source_;
}
::proto::internal::SelectSource* ServiceToDesktop::release_select_source() {
  // @@protoc_insertion_point(field_release:proto.internal.ServiceToDesktop.select_source)
  
  ::proto::internal::SelectSource* temp = select_source_;
  select_source_ = NULL;
  return temp;
}
void ServiceToDesktop::set_allocated_select_source(::proto::internal::SelectSource* select_source) {
  delete select_source_;
  select_source_ = select_source;
  if (select_source) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ServiceToDesktop.select_source)
}

// .proto.internal.NextScreenCapture next_screen_capture = 4;
bool ServiceToDesktop::has_next_screen_capture() const {
  return this != internal_default_instance() && next_screen_capture_ != NULL;
}
void ServiceToDesktop::clear_next_screen_capture() {
  if (GetArenaNoVirtual() == NULL && next_screen_capture_ != NULL) delete next_screen_capture_;
  next_screen_capture_ = NULL;
}
const ::proto::internal::NextScreenCapture& ServiceToDesktop::next_screen_capture() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceToDesktop.next_screen_capture)
  return next_screen_capture_ != NULL ? *next_screen_capture_
                         : *::proto::internal::NextScreenCapture::internal_default_instance();
}
::proto::internal::NextScreenCapture* ServiceToDesktop::mutable_next_screen_capture() {
  
  if (next_screen_capture_ == NULL) {
    next_screen_capture_ = new ::proto::internal::NextScreenCapture;
  }
  // @@protoc_insertion_point(field_mutable:proto.internal.ServiceToDesktop.next_screen_capture)
  return next_screen_capture_;
}
::proto::internal::NextScreenCapture* ServiceToDesktop::release_next_screen_capture() {
  // @@protoc_insertion_point(field_release:proto.internal.ServiceToDesktop.next_screen_capture)
  
  ::proto::internal::NextScreenCapture* temp = next_screen_capture_;
  next_screen_capture_ = NULL;
  return temp;
}
void ServiceToDesktop::set_allocated_next_screen_capture(::proto::internal::NextScreenCapture* next_screen_capture) {
  delete next_screen_capture_;
  next_screen_capture_ = next_screen_capture;
  if (next_screen_capture) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ServiceToDesktop.next_screen_capture)
}

// .proto.KeyEvent key_event = 5;
bool ServiceToDesktop::has_key_event() const {
  return this != internal_default_instance() && key_event_ != NULL;
}
void ServiceToDesktop::clear_key_event() {
  if (GetArenaNoVirtual() == NULL && key_event_ != NULL) delete key_event_;
  key_event_ = NULL;
}
const ::proto::KeyEvent& ServiceToDesktop::key_event() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceToDesktop.key_event)
  return key_event_ != NULL ? *key_event_
                         : *::proto::KeyEvent::internal_default_instance();
}
::proto::KeyEvent* ServiceToDesktop::mutable_key_event() {
  
  if (key_event_ == NULL) {
    key_event_ = new ::proto::KeyEvent;
  }
  // @@protoc_insertion_point(field_mutable:proto.internal.ServiceToDesktop.key_event)
  return key_event_;
}
::proto::KeyEvent* ServiceToDesktop::release_key_event() {
  // @@protoc_insertion_point(field_release:proto.internal.ServiceToDesktop.key_event)
  
  ::proto::KeyEvent* temp = key_event_;
  key_event_ = NULL;
  return temp;
}
void ServiceToDesktop::set_allocated_key_event(::proto::KeyEvent* key_event) {
  delete key_event_;
  key_event_ = key_event;
  if (key_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ServiceToDesktop.key_event)
}

// .proto.MouseEvent mouse_event = 6;
bool ServiceToDesktop::has_mouse_event() const {
  return this != internal_default_instance() && mouse_event_ != NULL;
}
void ServiceToDesktop::clear_mouse_event() {
  if (GetArenaNoVirtual() == NULL && mouse_event_ != NULL) delete mouse_event_;
  mouse_event_ = NULL;
}
const ::proto::MouseEvent& ServiceToDesktop::mouse_event() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceToDesktop.mouse_event)
  return mouse_event_ != NULL ? *mouse_event_
                         : *::proto::MouseEvent::internal_default_instance();
}
::proto::MouseEvent* ServiceToDesktop::mutable_mouse_event() {
  
  if (mouse_event_ == NULL) {
    mouse_event_ = new ::proto::MouseEvent;
  }
  // @@protoc_insertion_point(field_mutable:proto.internal.ServiceToDesktop.mouse_event)
  return mouse_event_;
}
::proto::MouseEvent* ServiceToDesktop::release_mouse_event() {
  // @@protoc_insertion_point(field_release:proto.internal.ServiceToDesktop.mouse_event)
  
  ::proto::MouseEvent* temp = mouse_event_;
  mouse_event_ = NULL;
  return temp;
}
void ServiceToDesktop::set_allocated_mouse_event(::proto::MouseEvent* mouse_event) {
  delete mouse_event_;
  mouse_event_ = mouse_event;
  if (mouse_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ServiceToDesktop.mouse_event)
}

// .proto.ClipboardEvent clipboard_event = 7;
bool ServiceToDesktop::has_clipboard_event() const {
  return this != internal_default_instance() && clipboard_event_ != NULL;
}
void ServiceToDesktop::clear_clipboard_event() {
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) delete clipboard_event_;
  clipboard_event_ = NULL;
}
const ::proto::ClipboardEvent& ServiceToDesktop::clipboard_event() const {
  // @@protoc_insertion_point(field_get:proto.internal.ServiceToDesktop.clipboard_event)
  return clipboard_event_ != NULL ? *clipboard_event_
                         : *::proto::ClipboardEvent::internal_default_instance();
}
::proto::ClipboardEvent* ServiceToDesktop::mutable_clipboard_event() {
  
  if (clipboard_event_ == NULL) {
    clipboard_event_ = new ::proto::ClipboardEvent;
  }
  // @@protoc_insertion_point(field_mutable:proto.internal.ServiceToDesktop.clipboard_event)
  return clipboard_event_;
}
::proto::ClipboardEvent* ServiceToDesktop::release_clipboard_event() {
  // @@protoc_insertion_point(field_release:proto.internal.ServiceToDesktop.clipboard_event)
  
  ::proto::ClipboardEvent* temp = clipboard_event_;
  clipboard_event_ = NULL;
  return temp;
}
void ServiceToDesktop::set_allocated_clipboard_event(::proto::ClipboardEvent* clipboard_event) {
  delete clipboard_event_;
  clipboard_event_ = clipboard_event;
  if (clipboard_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.ServiceToDesktop.clipboard_event)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DesktopToService::kScreenListFieldNumber;
const int DesktopToService::kSharedBufferFieldNumber;
const int DesktopToService::kScreenCapturedFieldNumber;
const int DesktopToService::kAudioPacketFieldNumber;
const int DesktopToService::kClipboardEventFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DesktopToService::DesktopToService()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_desktop_5finternal_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.internal.DesktopToService)
}
DesktopToService::DesktopToService(const DesktopToService& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_screen_list()) {
    screen_list_ = new ::proto::ScreenList(*from.screen_list_);
  } else {
    screen_list_ = NULL;
  }
  if (from.has_shared_buffer()) {
    shared_buffer_ = new ::proto::internal::SharedBuffer(*from.shared_buffer_);
  } else {
    shared_buffer_ = NULL;
  }
  if (from.has_screen_captured()) {
    screen_captured_ = new ::proto::internal::ScreenCaptured(*from.screen_captured_);
  } else {
    screen_captured_ = NULL;
  }
  if (from.has_audio_packet()) {
    audio_packet_ = new ::proto::AudioPacket(*from.audio_packet_);
  } else {
    audio_packet_ = NULL;
  }
  if (from.has_clipboard_event()) {
    clipboard_event_ = new ::proto::ClipboardEvent(*from.clipboard_event_);
  } else {
    clipboard_event_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:proto.internal.DesktopToService)
}

void DesktopToService::SharedCtor() {
  ::memset(&screen_list_, 0, reinterpret_cast<char*>(&clipboard_event_) -
    reinterpret_cast<char*>(&screen_list_) + sizeof(clipboard_event_));
  _cached_size_ = 0;
}

DesktopToService::~DesktopToService() {
  // @@protoc_insertion_point(destructor:proto.internal.DesktopToService)
  SharedDtor();
}

void DesktopToService::SharedDtor() {
  if (this != internal_default_instance()) {
    delete screen_list_;
  }
  if (this != internal_default_instance()) {
    delete shared_buffer_;
  }
  if (this != internal_default_instance()) {
    delete screen_captured_;
  }
  if (this != internal_default_instance()) {
    delete audio_packet_;
  }
  if (this != internal_default_instance()) {
    delete clipboard_event_;
  }
}

void DesktopToService::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const DesktopToService& DesktopToService::default_instance() {
  protobuf_desktop_5finternal_2eproto::InitDefaults();
  return *internal_default_instance();
}

DesktopToService* DesktopToService::New(::google::protobuf::Arena* arena) const {
  DesktopToService* n = new DesktopToService;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void DesktopToService::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.internal.DesktopToService)
  if (GetArenaNoVirtual() == NULL && screen_list_ != NULL) {
    delete screen_list_;
  }
  screen_list_ = NULL;
  if (GetArenaNoVirtual() == NULL && shared_buffer_ != NULL) {
    delete shared_buffer_;
  }
  shared_buffer_ = NULL;
  if (GetArenaNoVirtual() == NULL && screen_captured_ != NULL) {
    delete screen_captured_;
  }
  screen_captured_ = NULL;
  if (GetArenaNoVirtual() == NULL && audio_packet_ != NULL) {
    delete audio_packet_;
  }
  audio_packet_ = NULL;
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) {
    delete clipboard_event_;
  }
  clipboard_event_ = NULL;
}

bool DesktopToService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.internal.DesktopToService)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .proto.ScreenList screen_list = 1;
      case 1: {
        if (tag == 10u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screen_list()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.internal.SharedBuffer shared_buffer = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shared_buffer()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.internal.ScreenCaptured screen_captured = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_screen_captured()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.AudioPacket audio_packet = 4;
      case 4: {
        if (tag == 34u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_audio_packet()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .proto.ClipboardEvent clipboard_event = 5;
      case 5: {
        if (tag == 42u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_clipboard_event()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.internal.DesktopToService)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.internal.DesktopToService)
  return false;
#undef DO_
}

void DesktopToService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.internal.DesktopToService)
  // .proto.ScreenList screen_list = 1;
  if (this->has_screen_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, *this->screen_list_, output);
  }

  // .proto.internal.SharedBuffer shared_buffer = 2;
  if (this->has_shared_buffer()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, *this->shared_buffer_, output);
  }

  // .proto.internal.ScreenCaptured screen_captured = 3;
  if (this->has_screen_captured()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, *this->screen_captured_, output);
  }

  // .proto.AudioPacket audio_packet = 4;
  if (this->has_audio_packet()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      4, *this->audio_packet_, output);
  }

  // .proto.ClipboardEvent clipboard_event = 5;
  if (this->has_clipboard_event()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      5, *this->clipboard_event_, output);
  }

  // @@protoc_insertion_point(serialize_end:proto.internal.DesktopToService)
}

size_t DesktopToService::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.internal.DesktopToService)
  size_t total_size = 0;

  // .proto.ScreenList screen_list = 1;
  if (this->has_screen_list()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->screen_list_);
  }

  // .proto.internal.SharedBuffer shared_buffer = 2;
  if (this->has_shared_buffer()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->shared_buffer_);
  }

  // .proto.internal.ScreenCaptured screen_captured = 3;
  if (this->has_screen_captured()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->screen_captured_);
  }

  // .proto.AudioPacket audio_packet = 4;
  if (this->has_audio_packet()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->audio_packet_);
  }

  // .proto.ClipboardEvent clipboard_event = 5;
  if (this->has_clipboard_event()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->clipboard_event_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DesktopToService::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DesktopToService*>(&from));
}

void DesktopToService::MergeFrom(const DesktopToService& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.internal.DesktopToService)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_screen_list()) {
    mutable_screen_list()->::proto::ScreenList::MergeFrom(from.screen_list());
  }
  if (from.has_shared_buffer()) {
    mutable_shared_buffer()->::proto::internal::SharedBuffer::MergeFrom(from.shared_buffer());
  }
  if (from.has_screen_captured()) {
    mutable_screen_captured()->::proto::internal::ScreenCaptured::MergeFrom(from.screen_captured());
  }
  if (from.has_audio_packet()) {
    mutable_audio_packet()->::proto::AudioPacket::MergeFrom(from.audio_packet());
  }
  if (from.has_clipboard_event()) {
    mutable_clipboard_event()->::proto::ClipboardEvent::MergeFrom(from.clipboard_event());
  }
}

void DesktopToService::CopyFrom(const DesktopToService& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.internal.DesktopToService)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DesktopToService::IsInitialized() const {
  return true;
}

void DesktopToService::Swap(DesktopToService* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DesktopToService::InternalSwap(DesktopToService* other) {
  std::swap(screen_list_, other->screen_list_);
  std::swap(shared_buffer_, other->shared_buffer_);
  std::swap(screen_captured_, other->screen_captured_);
  std::swap(audio_packet_, other->audio_packet_);
  std::swap(clipboard_event_, other->clipboard_event_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string DesktopToService::GetTypeName() const {
  return "proto.internal.DesktopToService";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// DesktopToService

// .proto.ScreenList screen_list = 1;
bool DesktopToService::has_screen_list() const {
  return this != internal_default_instance() && screen_list_ != NULL;
}
void DesktopToService::clear_screen_list() {
  if (GetArenaNoVirtual() == NULL && screen_list_ != NULL) delete screen_list_;
  screen_list_ = NULL;
}
const ::proto::ScreenList& DesktopToService::screen_list() const {
  // @@protoc_insertion_point(field_get:proto.internal.DesktopToService.screen_list)
  return screen_list_ != NULL ? *screen_list_
                         : *::proto::ScreenList::internal_default_instance();
}
::proto::ScreenList* DesktopToService::mutable_screen_list() {
  
  if (screen_list_ == NULL) {
    screen_list_ = new ::proto::ScreenList;
  }
  // @@protoc_insertion_point(field_mutable:proto.internal.DesktopToService.screen_list)
  return screen_list_;
}
::proto::ScreenList* DesktopToService::release_screen_list() {
  // @@protoc_insertion_point(field_release:proto.internal.DesktopToService.screen_list)
  
  ::proto::ScreenList* temp = screen_list_;
  screen_list_ = NULL;
  return temp;
}
void DesktopToService::set_allocated_screen_list(::proto::ScreenList* screen_list) {
  delete screen_list_;
  screen_list_ = screen_list;
  if (screen_list) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.DesktopToService.screen_list)
}

// .proto.internal.SharedBuffer shared_buffer = 2;
bool DesktopToService::has_shared_buffer() const {
  return this != internal_default_instance() && shared_buffer_ != NULL;
}
void DesktopToService::clear_shared_buffer() {
  if (GetArenaNoVirtual() == NULL && shared_buffer_ != NULL) delete shared_buffer_;
  shared_buffer_ = NULL;
}
const ::proto::internal::SharedBuffer& DesktopToService::shared_buffer() const {
  // @@protoc_insertion_point(field_get:proto.internal.DesktopToService.shared_buffer)
  return shared_buffer_ != NULL ? *shared_buffer_
                         : *::proto::internal::SharedBuffer::internal_default_instance();
}
::proto::internal::SharedBuffer* DesktopToService::mutable_shared_buffer() {
  
  if (shared_buffer_ == NULL) {
    shared_buffer_ = new ::proto::internal::SharedBuffer;
  }
  // @@protoc_insertion_point(field_mutable:proto.internal.DesktopToService.shared_buffer)
  return shared_buffer_;
}
::proto::internal::SharedBuffer* DesktopToService::release_shared_buffer() {
  // @@protoc_insertion_point(field_release:proto.internal.DesktopToService.shared_buffer)
  
  ::proto::internal::SharedBuffer* temp = shared_buffer_;
  shared_buffer_ = NULL;
  return temp;
}
void DesktopToService::set_allocated_shared_buffer(::proto::internal::SharedBuffer* shared_buffer) {
  delete shared_buffer_;
  shared_buffer_ = shared_buffer;
  if (shared_buffer) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.DesktopToService.shared_buffer)
}

// .proto.internal.ScreenCaptured screen_captured = 3;
bool DesktopToService::has_screen_captured() const {
  return this != internal_default_instance() && screen_captured_ != NULL;
}
void DesktopToService::clear_screen_captured() {
  if (GetArenaNoVirtual() == NULL && screen_captured_ != NULL) delete screen_captured_;
  screen_captured_ = NULL;
}
const ::proto::internal::ScreenCaptured& DesktopToService::screen_captured() const {
  // @@protoc_insertion_point(field_get:proto.internal.DesktopToService.screen_captured)
  return screen_captured_ != NULL ? *screen_captured_
                         : *::proto::internal::ScreenCaptured::internal_default_instance();
}
::proto::internal::ScreenCaptured* DesktopToService::mutable_screen_captured() {
  
  if (screen_captured_ == NULL) {
    screen_captured_ = new ::proto::internal::ScreenCaptured;
  }
  // @@protoc_insertion_point(field_mutable:proto.internal.DesktopToService.screen_captured)
  return screen_captured_;
}
::proto::internal::ScreenCaptured* DesktopToService::release_screen_captured() {
  // @@protoc_insertion_point(field_release:proto.internal.DesktopToService.screen_captured)
  
  ::proto::internal::ScreenCaptured* temp = screen_captured_;
  screen_captured_ = NULL;
  return temp;
}
void DesktopToService::set_allocated_screen_captured(::proto::internal::ScreenCaptured* screen_captured) {
  delete screen_captured_;
  screen_captured_ = screen_captured;
  if (screen_captured) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.DesktopToService.screen_captured)
}

// .proto.AudioPacket audio_packet = 4;
bool DesktopToService::has_audio_packet() const {
  return this != internal_default_instance() && audio_packet_ != NULL;
}
void DesktopToService::clear_audio_packet() {
  if (GetArenaNoVirtual() == NULL && audio_packet_ != NULL) delete audio_packet_;
  audio_packet_ = NULL;
}
const ::proto::AudioPacket& DesktopToService::audio_packet() const {
  // @@protoc_insertion_point(field_get:proto.internal.DesktopToService.audio_packet)
  return audio_packet_ != NULL ? *audio_packet_
                         : *::proto::AudioPacket::internal_default_instance();
}
::proto::AudioPacket* DesktopToService::mutable_audio_packet() {
  
  if (audio_packet_ == NULL) {
    audio_packet_ = new ::proto::AudioPacket;
  }
  // @@protoc_insertion_point(field_mutable:proto.internal.DesktopToService.audio_packet)
  return audio_packet_;
}
::proto::AudioPacket* DesktopToService::release_audio_packet() {
  // @@protoc_insertion_point(field_release:proto.internal.DesktopToService.audio_packet)
  
  ::proto::AudioPacket* temp = audio_packet_;
  audio_packet_ = NULL;
  return temp;
}
void DesktopToService::set_allocated_audio_packet(::proto::AudioPacket* audio_packet) {
  delete audio_packet_;
  audio_packet_ = audio_packet;
  if (audio_packet) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.DesktopToService.audio_packet)
}

// .proto.ClipboardEvent clipboard_event = 5;
bool DesktopToService::has_clipboard_event() const {
  return this != internal_default_instance() && clipboard_event_ != NULL;
}
void DesktopToService::clear_clipboard_event() {
  if (GetArenaNoVirtual() == NULL && clipboard_event_ != NULL) delete clipboard_event_;
  clipboard_event_ = NULL;
}
const ::proto::ClipboardEvent& DesktopToService::clipboard_event() const {
  // @@protoc_insertion_point(field_get:proto.internal.DesktopToService.clipboard_event)
  return clipboard_event_ != NULL ? *clipboard_event_
                         : *::proto::ClipboardEvent::internal_default_instance();
}
::proto::ClipboardEvent* DesktopToService::mutable_clipboard_event() {
  
  if (clipboard_event_ == NULL) {
    clipboard_event_ = new ::proto::ClipboardEvent;
  }
  // @@protoc_insertion_point(field_mutable:proto.internal.DesktopToService.clipboard_event)
  return clipboard_event_;
}
::proto::ClipboardEvent* DesktopToService::release_clipboard_event() {
  // @@protoc_insertion_point(field_release:proto.internal.DesktopToService.clipboard_event)
  
  ::proto::ClipboardEvent* temp = clipboard_event_;
  clipboard_event_ = NULL;
  return temp;
}
void DesktopToService::set_allocated_clipboard_event(::proto::ClipboardEvent* clipboard_event) {
  delete clipboard_event_;
  clipboard_event_ = clipboard_event;
  if (clipboard_event) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:proto.internal.DesktopToService.clipboard_event)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace proto

// @@protoc_insertion_point(global_scope)
