// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: relay_peer.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "relay_peer.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// @@protoc_insertion_point(includes)

namespace proto {
class PeerToRelayDefaultTypeInternal : public ::google::protobuf::internal::ExplicitlyConstructed<PeerToRelay> {
} _PeerToRelay_default_instance_;

namespace protobuf_relay_5fpeer_2eproto {


void TableStruct::Shutdown() {
  _PeerToRelay_default_instance_.Shutdown();
}

void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PeerToRelay_default_instance_.DefaultConstruct();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
void AddDescriptorsImpl() {
  InitDefaults();
  ::google::protobuf::internal::OnShutdown(&TableStruct::Shutdown);
}

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
#ifdef GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER
// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;
#endif  // GOOGLE_PROTOBUF_NO_STATIC_INITIALIZER

}  // namespace protobuf_relay_5fpeer_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PeerToRelay::kKeyIdFieldNumber;
const int PeerToRelay::kPublicKeyFieldNumber;
const int PeerToRelay::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PeerToRelay::PeerToRelay()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_relay_5fpeer_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:proto.PeerToRelay)
}
PeerToRelay::PeerToRelay(const PeerToRelay& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.public_key().size() > 0) {
    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  key_id_ = from.key_id_;
  // @@protoc_insertion_point(copy_constructor:proto.PeerToRelay)
}

void PeerToRelay::SharedCtor() {
  public_key_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_id_ = 0u;
  _cached_size_ = 0;
}

PeerToRelay::~PeerToRelay() {
  // @@protoc_insertion_point(destructor:proto.PeerToRelay)
  SharedDtor();
}

void PeerToRelay::SharedDtor() {
  public_key_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PeerToRelay::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const PeerToRelay& PeerToRelay::default_instance() {
  protobuf_relay_5fpeer_2eproto::InitDefaults();
  return *internal_default_instance();
}

PeerToRelay* PeerToRelay::New(::google::protobuf::Arena* arena) const {
  PeerToRelay* n = new PeerToRelay;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PeerToRelay::Clear() {
// @@protoc_insertion_point(message_clear_start:proto.PeerToRelay)
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  key_id_ = 0u;
}

bool PeerToRelay::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:proto.PeerToRelay)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 key_id = 1;
      case 1: {
        if (tag == 8u) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &key_id_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes public_key = 2;
      case 2: {
        if (tag == 18u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_public_key()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bytes data = 3;
      case 3: {
        if (tag == 26u) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_data()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(input, tag));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:proto.PeerToRelay)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:proto.PeerToRelay)
  return false;
#undef DO_
}

void PeerToRelay::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:proto.PeerToRelay)
  // uint32 key_id = 1;
  if (this->key_id() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->key_id(), output);
  }

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->public_key(), output);
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      3, this->data(), output);
  }

  // @@protoc_insertion_point(serialize_end:proto.PeerToRelay)
}

size_t PeerToRelay::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:proto.PeerToRelay)
  size_t total_size = 0;

  // bytes public_key = 2;
  if (this->public_key().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->public_key());
  }

  // bytes data = 3;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->data());
  }

  // uint32 key_id = 1;
  if (this->key_id() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->key_id());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PeerToRelay::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const PeerToRelay*>(&from));
}

void PeerToRelay::MergeFrom(const PeerToRelay& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:proto.PeerToRelay)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.public_key().size() > 0) {

    public_key_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.public_key_);
  }
  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.key_id() != 0) {
    set_key_id(from.key_id());
  }
}

void PeerToRelay::CopyFrom(const PeerToRelay& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:proto.PeerToRelay)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PeerToRelay::IsInitialized() const {
  return true;
}

void PeerToRelay::Swap(PeerToRelay* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PeerToRelay::InternalSwap(PeerToRelay* other) {
  public_key_.Swap(&other->public_key_);
  data_.Swap(&other->data_);
  std::swap(key_id_, other->key_id_);
  std::swap(_cached_size_, other->_cached_size_);
}

::std::string PeerToRelay::GetTypeName() const {
  return "proto.PeerToRelay";
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PeerToRelay

// uint32 key_id = 1;
void PeerToRelay::clear_key_id() {
  key_id_ = 0u;
}
::google::protobuf::uint32 PeerToRelay::key_id() const {
  // @@protoc_insertion_point(field_get:proto.PeerToRelay.key_id)
  return key_id_;
}
void PeerToRelay::set_key_id(::google::protobuf::uint32 value) {
  
  key_id_ = value;
  // @@protoc_insertion_point(field_set:proto.PeerToRelay.key_id)
}

// bytes public_key = 2;
void PeerToRelay::clear_public_key() {
  public_key_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PeerToRelay::public_key() const {
  // @@protoc_insertion_point(field_get:proto.PeerToRelay.public_key)
  return public_key_.GetNoArena();
}
void PeerToRelay::set_public_key(const ::std::string& value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PeerToRelay.public_key)
}
#if LANG_CXX11
void PeerToRelay::set_public_key(::std::string&& value) {
  
  public_key_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.PeerToRelay.public_key)
}
#endif
void PeerToRelay::set_public_key(const char* value) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PeerToRelay.public_key)
}
void PeerToRelay::set_public_key(const void* value, size_t size) {
  
  public_key_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PeerToRelay.public_key)
}
::std::string* PeerToRelay::mutable_public_key() {
  
  // @@protoc_insertion_point(field_mutable:proto.PeerToRelay.public_key)
  return public_key_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PeerToRelay::release_public_key() {
  // @@protoc_insertion_point(field_release:proto.PeerToRelay.public_key)
  
  return public_key_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PeerToRelay::set_allocated_public_key(::std::string* public_key) {
  if (public_key != NULL) {
    
  } else {
    
  }
  public_key_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), public_key);
  // @@protoc_insertion_point(field_set_allocated:proto.PeerToRelay.public_key)
}

// bytes data = 3;
void PeerToRelay::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PeerToRelay::data() const {
  // @@protoc_insertion_point(field_get:proto.PeerToRelay.data)
  return data_.GetNoArena();
}
void PeerToRelay::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.PeerToRelay.data)
}
#if LANG_CXX11
void PeerToRelay::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.PeerToRelay.data)
}
#endif
void PeerToRelay::set_data(const char* value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.PeerToRelay.data)
}
void PeerToRelay::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.PeerToRelay.data)
}
::std::string* PeerToRelay::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:proto.PeerToRelay.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PeerToRelay::release_data() {
  // @@protoc_insertion_point(field_release:proto.PeerToRelay.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PeerToRelay::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:proto.PeerToRelay.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto

// @@protoc_insertion_point(global_scope)
