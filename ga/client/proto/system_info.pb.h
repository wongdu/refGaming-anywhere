// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: system_info.proto

#ifndef PROTOBUF_system_5finfo_2eproto__INCLUDED
#define PROTOBUF_system_5finfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3002000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3002000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
// @@protoc_insertion_point(includes)
namespace proto {
namespace system_info {
class Bios;
class BiosDefaultTypeInternal;
extern BiosDefaultTypeInternal _Bios_default_instance_;
class Computer;
class ComputerDefaultTypeInternal;
extern ComputerDefaultTypeInternal _Computer_default_instance_;
class LogicalDrives;
class LogicalDrivesDefaultTypeInternal;
extern LogicalDrivesDefaultTypeInternal _LogicalDrives_default_instance_;
class LogicalDrives_Drive;
class LogicalDrives_DriveDefaultTypeInternal;
extern LogicalDrives_DriveDefaultTypeInternal _LogicalDrives_Drive_default_instance_;
class Memory;
class MemoryDefaultTypeInternal;
extern MemoryDefaultTypeInternal _Memory_default_instance_;
class Memory_Module;
class Memory_ModuleDefaultTypeInternal;
extern Memory_ModuleDefaultTypeInternal _Memory_Module_default_instance_;
class Motherboard;
class MotherboardDefaultTypeInternal;
extern MotherboardDefaultTypeInternal _Motherboard_default_instance_;
class NetworkAdapters;
class NetworkAdaptersDefaultTypeInternal;
extern NetworkAdaptersDefaultTypeInternal _NetworkAdapters_default_instance_;
class NetworkAdapters_Adapter;
class NetworkAdapters_AdapterDefaultTypeInternal;
extern NetworkAdapters_AdapterDefaultTypeInternal _NetworkAdapters_Adapter_default_instance_;
class NetworkAdapters_Adapter_Address;
class NetworkAdapters_Adapter_AddressDefaultTypeInternal;
extern NetworkAdapters_Adapter_AddressDefaultTypeInternal _NetworkAdapters_Adapter_Address_default_instance_;
class OperatingSystem;
class OperatingSystemDefaultTypeInternal;
extern OperatingSystemDefaultTypeInternal _OperatingSystem_default_instance_;
class Printers;
class PrintersDefaultTypeInternal;
extern PrintersDefaultTypeInternal _Printers_default_instance_;
class Printers_Printer;
class Printers_PrinterDefaultTypeInternal;
extern Printers_PrinterDefaultTypeInternal _Printers_Printer_default_instance_;
class Processor;
class ProcessorDefaultTypeInternal;
extern ProcessorDefaultTypeInternal _Processor_default_instance_;
}  // namespace system_info
}  // namespace proto

namespace proto {
namespace system_info {

namespace protobuf_system_5finfo_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::uint32 offsets[];
  static void InitDefaultsImpl();
  static void Shutdown();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_system_5finfo_2eproto

// ===================================================================

class Computer : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.system_info.Computer) */ {
 public:
  Computer();
  virtual ~Computer();

  Computer(const Computer& from);

  inline Computer& operator=(const Computer& from) {
    CopyFrom(from);
    return *this;
  }

  static const Computer& default_instance();

  static inline const Computer* internal_default_instance() {
    return reinterpret_cast<const Computer*>(
               &_Computer_default_instance_);
  }

  void Swap(Computer* other);

  // implements Message ----------------------------------------------

  inline Computer* New() const PROTOBUF_FINAL { return New(NULL); }

  Computer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Computer& from);
  void MergeFrom(const Computer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Computer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string domain = 2;
  void clear_domain();
  static const int kDomainFieldNumber = 2;
  const ::std::string& domain() const;
  void set_domain(const ::std::string& value);
  #if LANG_CXX11
  void set_domain(::std::string&& value);
  #endif
  void set_domain(const char* value);
  void set_domain(const char* value, size_t size);
  ::std::string* mutable_domain();
  ::std::string* release_domain();
  void set_allocated_domain(::std::string* domain);

  // string workgroup = 3;
  void clear_workgroup();
  static const int kWorkgroupFieldNumber = 3;
  const ::std::string& workgroup() const;
  void set_workgroup(const ::std::string& value);
  #if LANG_CXX11
  void set_workgroup(::std::string&& value);
  #endif
  void set_workgroup(const char* value);
  void set_workgroup(const char* value, size_t size);
  ::std::string* mutable_workgroup();
  ::std::string* release_workgroup();
  void set_allocated_workgroup(::std::string* workgroup);

  // uint64 uptime = 4;
  void clear_uptime();
  static const int kUptimeFieldNumber = 4;
  ::google::protobuf::uint64 uptime() const;
  void set_uptime(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.system_info.Computer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr domain_;
  ::google::protobuf::internal::ArenaStringPtr workgroup_;
  ::google::protobuf::uint64 uptime_;
  mutable int _cached_size_;
  friend struct  protobuf_system_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class OperatingSystem : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.system_info.OperatingSystem) */ {
 public:
  OperatingSystem();
  virtual ~OperatingSystem();

  OperatingSystem(const OperatingSystem& from);

  inline OperatingSystem& operator=(const OperatingSystem& from) {
    CopyFrom(from);
    return *this;
  }

  static const OperatingSystem& default_instance();

  static inline const OperatingSystem* internal_default_instance() {
    return reinterpret_cast<const OperatingSystem*>(
               &_OperatingSystem_default_instance_);
  }

  void Swap(OperatingSystem* other);

  // implements Message ----------------------------------------------

  inline OperatingSystem* New() const PROTOBUF_FINAL { return New(NULL); }

  OperatingSystem* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const OperatingSystem& from);
  void MergeFrom(const OperatingSystem& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(OperatingSystem* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string arch = 3;
  void clear_arch();
  static const int kArchFieldNumber = 3;
  const ::std::string& arch() const;
  void set_arch(const ::std::string& value);
  #if LANG_CXX11
  void set_arch(::std::string&& value);
  #endif
  void set_arch(const char* value);
  void set_arch(const char* value, size_t size);
  ::std::string* mutable_arch();
  ::std::string* release_arch();
  void set_allocated_arch(::std::string* arch);

  // @@protoc_insertion_point(class_scope:proto.system_info.OperatingSystem)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr arch_;
  mutable int _cached_size_;
  friend struct  protobuf_system_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Motherboard : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.system_info.Motherboard) */ {
 public:
  Motherboard();
  virtual ~Motherboard();

  Motherboard(const Motherboard& from);

  inline Motherboard& operator=(const Motherboard& from) {
    CopyFrom(from);
    return *this;
  }

  static const Motherboard& default_instance();

  static inline const Motherboard* internal_default_instance() {
    return reinterpret_cast<const Motherboard*>(
               &_Motherboard_default_instance_);
  }

  void Swap(Motherboard* other);

  // implements Message ----------------------------------------------

  inline Motherboard* New() const PROTOBUF_FINAL { return New(NULL); }

  Motherboard* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Motherboard& from);
  void MergeFrom(const Motherboard& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Motherboard* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string manufacturer = 1;
  void clear_manufacturer();
  static const int kManufacturerFieldNumber = 1;
  const ::std::string& manufacturer() const;
  void set_manufacturer(const ::std::string& value);
  #if LANG_CXX11
  void set_manufacturer(::std::string&& value);
  #endif
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  ::std::string* mutable_manufacturer();
  ::std::string* release_manufacturer();
  void set_allocated_manufacturer(::std::string* manufacturer);

  // string model = 2;
  void clear_model();
  static const int kModelFieldNumber = 2;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // @@protoc_insertion_point(class_scope:proto.system_info.Motherboard)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr manufacturer_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  mutable int _cached_size_;
  friend struct  protobuf_system_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Bios : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.system_info.Bios) */ {
 public:
  Bios();
  virtual ~Bios();

  Bios(const Bios& from);

  inline Bios& operator=(const Bios& from) {
    CopyFrom(from);
    return *this;
  }

  static const Bios& default_instance();

  static inline const Bios* internal_default_instance() {
    return reinterpret_cast<const Bios*>(
               &_Bios_default_instance_);
  }

  void Swap(Bios* other);

  // implements Message ----------------------------------------------

  inline Bios* New() const PROTOBUF_FINAL { return New(NULL); }

  Bios* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Bios& from);
  void MergeFrom(const Bios& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Bios* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vendor = 1;
  void clear_vendor();
  static const int kVendorFieldNumber = 1;
  const ::std::string& vendor() const;
  void set_vendor(const ::std::string& value);
  #if LANG_CXX11
  void set_vendor(::std::string&& value);
  #endif
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  ::std::string* mutable_vendor();
  ::std::string* release_vendor();
  void set_allocated_vendor(::std::string* vendor);

  // string version = 2;
  void clear_version();
  static const int kVersionFieldNumber = 2;
  const ::std::string& version() const;
  void set_version(const ::std::string& value);
  #if LANG_CXX11
  void set_version(::std::string&& value);
  #endif
  void set_version(const char* value);
  void set_version(const char* value, size_t size);
  ::std::string* mutable_version();
  ::std::string* release_version();
  void set_allocated_version(::std::string* version);

  // string date = 3;
  void clear_date();
  static const int kDateFieldNumber = 3;
  const ::std::string& date() const;
  void set_date(const ::std::string& value);
  #if LANG_CXX11
  void set_date(::std::string&& value);
  #endif
  void set_date(const char* value);
  void set_date(const char* value, size_t size);
  ::std::string* mutable_date();
  ::std::string* release_date();
  void set_allocated_date(::std::string* date);

  // @@protoc_insertion_point(class_scope:proto.system_info.Bios)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vendor_;
  ::google::protobuf::internal::ArenaStringPtr version_;
  ::google::protobuf::internal::ArenaStringPtr date_;
  mutable int _cached_size_;
  friend struct  protobuf_system_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Processor : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.system_info.Processor) */ {
 public:
  Processor();
  virtual ~Processor();

  Processor(const Processor& from);

  inline Processor& operator=(const Processor& from) {
    CopyFrom(from);
    return *this;
  }

  static const Processor& default_instance();

  static inline const Processor* internal_default_instance() {
    return reinterpret_cast<const Processor*>(
               &_Processor_default_instance_);
  }

  void Swap(Processor* other);

  // implements Message ----------------------------------------------

  inline Processor* New() const PROTOBUF_FINAL { return New(NULL); }

  Processor* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Processor& from);
  void MergeFrom(const Processor& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Processor* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string vendor = 1;
  void clear_vendor();
  static const int kVendorFieldNumber = 1;
  const ::std::string& vendor() const;
  void set_vendor(const ::std::string& value);
  #if LANG_CXX11
  void set_vendor(::std::string&& value);
  #endif
  void set_vendor(const char* value);
  void set_vendor(const char* value, size_t size);
  ::std::string* mutable_vendor();
  ::std::string* release_vendor();
  void set_allocated_vendor(::std::string* vendor);

  // string model = 2;
  void clear_model();
  static const int kModelFieldNumber = 2;
  const ::std::string& model() const;
  void set_model(const ::std::string& value);
  #if LANG_CXX11
  void set_model(::std::string&& value);
  #endif
  void set_model(const char* value);
  void set_model(const char* value, size_t size);
  ::std::string* mutable_model();
  ::std::string* release_model();
  void set_allocated_model(::std::string* model);

  // uint32 packages = 3;
  void clear_packages();
  static const int kPackagesFieldNumber = 3;
  ::google::protobuf::uint32 packages() const;
  void set_packages(::google::protobuf::uint32 value);

  // uint32 cores = 4;
  void clear_cores();
  static const int kCoresFieldNumber = 4;
  ::google::protobuf::uint32 cores() const;
  void set_cores(::google::protobuf::uint32 value);

  // uint32 threads = 5;
  void clear_threads();
  static const int kThreadsFieldNumber = 5;
  ::google::protobuf::uint32 threads() const;
  void set_threads(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.system_info.Processor)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr vendor_;
  ::google::protobuf::internal::ArenaStringPtr model_;
  ::google::protobuf::uint32 packages_;
  ::google::protobuf::uint32 cores_;
  ::google::protobuf::uint32 threads_;
  mutable int _cached_size_;
  friend struct  protobuf_system_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Memory_Module : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.system_info.Memory.Module) */ {
 public:
  Memory_Module();
  virtual ~Memory_Module();

  Memory_Module(const Memory_Module& from);

  inline Memory_Module& operator=(const Memory_Module& from) {
    CopyFrom(from);
    return *this;
  }

  static const Memory_Module& default_instance();

  static inline const Memory_Module* internal_default_instance() {
    return reinterpret_cast<const Memory_Module*>(
               &_Memory_Module_default_instance_);
  }

  void Swap(Memory_Module* other);

  // implements Message ----------------------------------------------

  inline Memory_Module* New() const PROTOBUF_FINAL { return New(NULL); }

  Memory_Module* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Memory_Module& from);
  void MergeFrom(const Memory_Module& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Memory_Module* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string location = 2;
  void clear_location();
  static const int kLocationFieldNumber = 2;
  const ::std::string& location() const;
  void set_location(const ::std::string& value);
  #if LANG_CXX11
  void set_location(::std::string&& value);
  #endif
  void set_location(const char* value);
  void set_location(const char* value, size_t size);
  ::std::string* mutable_location();
  ::std::string* release_location();
  void set_allocated_location(::std::string* location);

  // string manufacturer = 3;
  void clear_manufacturer();
  static const int kManufacturerFieldNumber = 3;
  const ::std::string& manufacturer() const;
  void set_manufacturer(const ::std::string& value);
  #if LANG_CXX11
  void set_manufacturer(::std::string&& value);
  #endif
  void set_manufacturer(const char* value);
  void set_manufacturer(const char* value, size_t size);
  ::std::string* mutable_manufacturer();
  ::std::string* release_manufacturer();
  void set_allocated_manufacturer(::std::string* manufacturer);

  // string type = 5;
  void clear_type();
  static const int kTypeFieldNumber = 5;
  const ::std::string& type() const;
  void set_type(const ::std::string& value);
  #if LANG_CXX11
  void set_type(::std::string&& value);
  #endif
  void set_type(const char* value);
  void set_type(const char* value, size_t size);
  ::std::string* mutable_type();
  ::std::string* release_type();
  void set_allocated_type(::std::string* type);

  // string form_factor = 6;
  void clear_form_factor();
  static const int kFormFactorFieldNumber = 6;
  const ::std::string& form_factor() const;
  void set_form_factor(const ::std::string& value);
  #if LANG_CXX11
  void set_form_factor(::std::string&& value);
  #endif
  void set_form_factor(const char* value);
  void set_form_factor(const char* value, size_t size);
  ::std::string* mutable_form_factor();
  ::std::string* release_form_factor();
  void set_allocated_form_factor(::std::string* form_factor);

  // string part_number = 7;
  void clear_part_number();
  static const int kPartNumberFieldNumber = 7;
  const ::std::string& part_number() const;
  void set_part_number(const ::std::string& value);
  #if LANG_CXX11
  void set_part_number(::std::string&& value);
  #endif
  void set_part_number(const char* value);
  void set_part_number(const char* value, size_t size);
  ::std::string* mutable_part_number();
  ::std::string* release_part_number();
  void set_allocated_part_number(::std::string* part_number);

  // uint64 size = 4;
  void clear_size();
  static const int kSizeFieldNumber = 4;
  ::google::protobuf::uint64 size() const;
  void set_size(::google::protobuf::uint64 value);

  // bool present = 1;
  void clear_present();
  static const int kPresentFieldNumber = 1;
  bool present() const;
  void set_present(bool value);

  // uint32 speed = 8;
  void clear_speed();
  static const int kSpeedFieldNumber = 8;
  ::google::protobuf::uint32 speed() const;
  void set_speed(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.system_info.Memory.Module)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr location_;
  ::google::protobuf::internal::ArenaStringPtr manufacturer_;
  ::google::protobuf::internal::ArenaStringPtr type_;
  ::google::protobuf::internal::ArenaStringPtr form_factor_;
  ::google::protobuf::internal::ArenaStringPtr part_number_;
  ::google::protobuf::uint64 size_;
  bool present_;
  ::google::protobuf::uint32 speed_;
  mutable int _cached_size_;
  friend struct  protobuf_system_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Memory : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.system_info.Memory) */ {
 public:
  Memory();
  virtual ~Memory();

  Memory(const Memory& from);

  inline Memory& operator=(const Memory& from) {
    CopyFrom(from);
    return *this;
  }

  static const Memory& default_instance();

  static inline const Memory* internal_default_instance() {
    return reinterpret_cast<const Memory*>(
               &_Memory_default_instance_);
  }

  void Swap(Memory* other);

  // implements Message ----------------------------------------------

  inline Memory* New() const PROTOBUF_FINAL { return New(NULL); }

  Memory* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Memory& from);
  void MergeFrom(const Memory& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Memory* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Memory_Module Module;

  // accessors -------------------------------------------------------

  // repeated .proto.system_info.Memory.Module module = 1;
  int module_size() const;
  void clear_module();
  static const int kModuleFieldNumber = 1;
  const ::proto::system_info::Memory_Module& module(int index) const;
  ::proto::system_info::Memory_Module* mutable_module(int index);
  ::proto::system_info::Memory_Module* add_module();
  ::google::protobuf::RepeatedPtrField< ::proto::system_info::Memory_Module >*
      mutable_module();
  const ::google::protobuf::RepeatedPtrField< ::proto::system_info::Memory_Module >&
      module() const;

  // @@protoc_insertion_point(class_scope:proto.system_info.Memory)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::system_info::Memory_Module > module_;
  mutable int _cached_size_;
  friend struct  protobuf_system_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogicalDrives_Drive : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.system_info.LogicalDrives.Drive) */ {
 public:
  LogicalDrives_Drive();
  virtual ~LogicalDrives_Drive();

  LogicalDrives_Drive(const LogicalDrives_Drive& from);

  inline LogicalDrives_Drive& operator=(const LogicalDrives_Drive& from) {
    CopyFrom(from);
    return *this;
  }

  static const LogicalDrives_Drive& default_instance();

  static inline const LogicalDrives_Drive* internal_default_instance() {
    return reinterpret_cast<const LogicalDrives_Drive*>(
               &_LogicalDrives_Drive_default_instance_);
  }

  void Swap(LogicalDrives_Drive* other);

  // implements Message ----------------------------------------------

  inline LogicalDrives_Drive* New() const PROTOBUF_FINAL { return New(NULL); }

  LogicalDrives_Drive* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LogicalDrives_Drive& from);
  void MergeFrom(const LogicalDrives_Drive& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogicalDrives_Drive* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string path = 1;
  void clear_path();
  static const int kPathFieldNumber = 1;
  const ::std::string& path() const;
  void set_path(const ::std::string& value);
  #if LANG_CXX11
  void set_path(::std::string&& value);
  #endif
  void set_path(const char* value);
  void set_path(const char* value, size_t size);
  ::std::string* mutable_path();
  ::std::string* release_path();
  void set_allocated_path(::std::string* path);

  // string file_system = 2;
  void clear_file_system();
  static const int kFileSystemFieldNumber = 2;
  const ::std::string& file_system() const;
  void set_file_system(const ::std::string& value);
  #if LANG_CXX11
  void set_file_system(::std::string&& value);
  #endif
  void set_file_system(const char* value);
  void set_file_system(const char* value, size_t size);
  ::std::string* mutable_file_system();
  ::std::string* release_file_system();
  void set_allocated_file_system(::std::string* file_system);

  // uint64 total_size = 3;
  void clear_total_size();
  static const int kTotalSizeFieldNumber = 3;
  ::google::protobuf::uint64 total_size() const;
  void set_total_size(::google::protobuf::uint64 value);

  // uint64 free_size = 4;
  void clear_free_size();
  static const int kFreeSizeFieldNumber = 4;
  ::google::protobuf::uint64 free_size() const;
  void set_free_size(::google::protobuf::uint64 value);

  // @@protoc_insertion_point(class_scope:proto.system_info.LogicalDrives.Drive)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr path_;
  ::google::protobuf::internal::ArenaStringPtr file_system_;
  ::google::protobuf::uint64 total_size_;
  ::google::protobuf::uint64 free_size_;
  mutable int _cached_size_;
  friend struct  protobuf_system_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class LogicalDrives : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.system_info.LogicalDrives) */ {
 public:
  LogicalDrives();
  virtual ~LogicalDrives();

  LogicalDrives(const LogicalDrives& from);

  inline LogicalDrives& operator=(const LogicalDrives& from) {
    CopyFrom(from);
    return *this;
  }

  static const LogicalDrives& default_instance();

  static inline const LogicalDrives* internal_default_instance() {
    return reinterpret_cast<const LogicalDrives*>(
               &_LogicalDrives_default_instance_);
  }

  void Swap(LogicalDrives* other);

  // implements Message ----------------------------------------------

  inline LogicalDrives* New() const PROTOBUF_FINAL { return New(NULL); }

  LogicalDrives* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const LogicalDrives& from);
  void MergeFrom(const LogicalDrives& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(LogicalDrives* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef LogicalDrives_Drive Drive;

  // accessors -------------------------------------------------------

  // repeated .proto.system_info.LogicalDrives.Drive drive = 1;
  int drive_size() const;
  void clear_drive();
  static const int kDriveFieldNumber = 1;
  const ::proto::system_info::LogicalDrives_Drive& drive(int index) const;
  ::proto::system_info::LogicalDrives_Drive* mutable_drive(int index);
  ::proto::system_info::LogicalDrives_Drive* add_drive();
  ::google::protobuf::RepeatedPtrField< ::proto::system_info::LogicalDrives_Drive >*
      mutable_drive();
  const ::google::protobuf::RepeatedPtrField< ::proto::system_info::LogicalDrives_Drive >&
      drive() const;

  // @@protoc_insertion_point(class_scope:proto.system_info.LogicalDrives)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::system_info::LogicalDrives_Drive > drive_;
  mutable int _cached_size_;
  friend struct  protobuf_system_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Printers_Printer : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.system_info.Printers.Printer) */ {
 public:
  Printers_Printer();
  virtual ~Printers_Printer();

  Printers_Printer(const Printers_Printer& from);

  inline Printers_Printer& operator=(const Printers_Printer& from) {
    CopyFrom(from);
    return *this;
  }

  static const Printers_Printer& default_instance();

  static inline const Printers_Printer* internal_default_instance() {
    return reinterpret_cast<const Printers_Printer*>(
               &_Printers_Printer_default_instance_);
  }

  void Swap(Printers_Printer* other);

  // implements Message ----------------------------------------------

  inline Printers_Printer* New() const PROTOBUF_FINAL { return New(NULL); }

  Printers_Printer* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Printers_Printer& from);
  void MergeFrom(const Printers_Printer& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Printers_Printer* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // string port = 4;
  void clear_port();
  static const int kPortFieldNumber = 4;
  const ::std::string& port() const;
  void set_port(const ::std::string& value);
  #if LANG_CXX11
  void set_port(::std::string&& value);
  #endif
  void set_port(const char* value);
  void set_port(const char* value, size_t size);
  ::std::string* mutable_port();
  ::std::string* release_port();
  void set_allocated_port(::std::string* port);

  // string driver = 5;
  void clear_driver();
  static const int kDriverFieldNumber = 5;
  const ::std::string& driver() const;
  void set_driver(const ::std::string& value);
  #if LANG_CXX11
  void set_driver(::std::string&& value);
  #endif
  void set_driver(const char* value);
  void set_driver(const char* value, size_t size);
  ::std::string* mutable_driver();
  ::std::string* release_driver();
  void set_allocated_driver(::std::string* driver);

  // string share_name = 7;
  void clear_share_name();
  static const int kShareNameFieldNumber = 7;
  const ::std::string& share_name() const;
  void set_share_name(const ::std::string& value);
  #if LANG_CXX11
  void set_share_name(::std::string&& value);
  #endif
  void set_share_name(const char* value);
  void set_share_name(const char* value, size_t size);
  ::std::string* mutable_share_name();
  ::std::string* release_share_name();
  void set_allocated_share_name(::std::string* share_name);

  // bool default = 2;
  void clear_default_();
  static const int kDefaultFieldNumber = 2;
  bool default_() const;
  void set_default_(bool value);

  // bool shared = 3;
  void clear_shared();
  static const int kSharedFieldNumber = 3;
  bool shared() const;
  void set_shared(bool value);

  // uint32 jobs_count = 6;
  void clear_jobs_count();
  static const int kJobsCountFieldNumber = 6;
  ::google::protobuf::uint32 jobs_count() const;
  void set_jobs_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:proto.system_info.Printers.Printer)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::google::protobuf::internal::ArenaStringPtr port_;
  ::google::protobuf::internal::ArenaStringPtr driver_;
  ::google::protobuf::internal::ArenaStringPtr share_name_;
  bool default__;
  bool shared_;
  ::google::protobuf::uint32 jobs_count_;
  mutable int _cached_size_;
  friend struct  protobuf_system_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class Printers : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.system_info.Printers) */ {
 public:
  Printers();
  virtual ~Printers();

  Printers(const Printers& from);

  inline Printers& operator=(const Printers& from) {
    CopyFrom(from);
    return *this;
  }

  static const Printers& default_instance();

  static inline const Printers* internal_default_instance() {
    return reinterpret_cast<const Printers*>(
               &_Printers_default_instance_);
  }

  void Swap(Printers* other);

  // implements Message ----------------------------------------------

  inline Printers* New() const PROTOBUF_FINAL { return New(NULL); }

  Printers* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const Printers& from);
  void MergeFrom(const Printers& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(Printers* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef Printers_Printer Printer;

  // accessors -------------------------------------------------------

  // repeated .proto.system_info.Printers.Printer printer = 1;
  int printer_size() const;
  void clear_printer();
  static const int kPrinterFieldNumber = 1;
  const ::proto::system_info::Printers_Printer& printer(int index) const;
  ::proto::system_info::Printers_Printer* mutable_printer(int index);
  ::proto::system_info::Printers_Printer* add_printer();
  ::google::protobuf::RepeatedPtrField< ::proto::system_info::Printers_Printer >*
      mutable_printer();
  const ::google::protobuf::RepeatedPtrField< ::proto::system_info::Printers_Printer >&
      printer() const;

  // @@protoc_insertion_point(class_scope:proto.system_info.Printers)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::system_info::Printers_Printer > printer_;
  mutable int _cached_size_;
  friend struct  protobuf_system_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetworkAdapters_Adapter_Address : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.system_info.NetworkAdapters.Adapter.Address) */ {
 public:
  NetworkAdapters_Adapter_Address();
  virtual ~NetworkAdapters_Adapter_Address();

  NetworkAdapters_Adapter_Address(const NetworkAdapters_Adapter_Address& from);

  inline NetworkAdapters_Adapter_Address& operator=(const NetworkAdapters_Adapter_Address& from) {
    CopyFrom(from);
    return *this;
  }

  static const NetworkAdapters_Adapter_Address& default_instance();

  static inline const NetworkAdapters_Adapter_Address* internal_default_instance() {
    return reinterpret_cast<const NetworkAdapters_Adapter_Address*>(
               &_NetworkAdapters_Adapter_Address_default_instance_);
  }

  void Swap(NetworkAdapters_Adapter_Address* other);

  // implements Message ----------------------------------------------

  inline NetworkAdapters_Adapter_Address* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkAdapters_Adapter_Address* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const NetworkAdapters_Adapter_Address& from);
  void MergeFrom(const NetworkAdapters_Adapter_Address& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkAdapters_Adapter_Address* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string ip = 1;
  void clear_ip();
  static const int kIpFieldNumber = 1;
  const ::std::string& ip() const;
  void set_ip(const ::std::string& value);
  #if LANG_CXX11
  void set_ip(::std::string&& value);
  #endif
  void set_ip(const char* value);
  void set_ip(const char* value, size_t size);
  ::std::string* mutable_ip();
  ::std::string* release_ip();
  void set_allocated_ip(::std::string* ip);

  // string mask = 2;
  void clear_mask();
  static const int kMaskFieldNumber = 2;
  const ::std::string& mask() const;
  void set_mask(const ::std::string& value);
  #if LANG_CXX11
  void set_mask(::std::string&& value);
  #endif
  void set_mask(const char* value);
  void set_mask(const char* value, size_t size);
  ::std::string* mutable_mask();
  ::std::string* release_mask();
  void set_allocated_mask(::std::string* mask);

  // @@protoc_insertion_point(class_scope:proto.system_info.NetworkAdapters.Adapter.Address)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr ip_;
  ::google::protobuf::internal::ArenaStringPtr mask_;
  mutable int _cached_size_;
  friend struct  protobuf_system_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetworkAdapters_Adapter : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.system_info.NetworkAdapters.Adapter) */ {
 public:
  NetworkAdapters_Adapter();
  virtual ~NetworkAdapters_Adapter();

  NetworkAdapters_Adapter(const NetworkAdapters_Adapter& from);

  inline NetworkAdapters_Adapter& operator=(const NetworkAdapters_Adapter& from) {
    CopyFrom(from);
    return *this;
  }

  static const NetworkAdapters_Adapter& default_instance();

  static inline const NetworkAdapters_Adapter* internal_default_instance() {
    return reinterpret_cast<const NetworkAdapters_Adapter*>(
               &_NetworkAdapters_Adapter_default_instance_);
  }

  void Swap(NetworkAdapters_Adapter* other);

  // implements Message ----------------------------------------------

  inline NetworkAdapters_Adapter* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkAdapters_Adapter* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const NetworkAdapters_Adapter& from);
  void MergeFrom(const NetworkAdapters_Adapter& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkAdapters_Adapter* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NetworkAdapters_Adapter_Address Address;

  // accessors -------------------------------------------------------

  // repeated string gateway = 7;
  int gateway_size() const;
  void clear_gateway();
  static const int kGatewayFieldNumber = 7;
  const ::std::string& gateway(int index) const;
  ::std::string* mutable_gateway(int index);
  void set_gateway(int index, const ::std::string& value);
  void set_gateway(int index, const char* value);
  void set_gateway(int index, const char* value, size_t size);
  ::std::string* add_gateway();
  void add_gateway(const ::std::string& value);
  void add_gateway(const char* value);
  void add_gateway(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& gateway() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_gateway();

  // repeated .proto.system_info.NetworkAdapters.Adapter.Address address = 8;
  int address_size() const;
  void clear_address();
  static const int kAddressFieldNumber = 8;
  const ::proto::system_info::NetworkAdapters_Adapter_Address& address(int index) const;
  ::proto::system_info::NetworkAdapters_Adapter_Address* mutable_address(int index);
  ::proto::system_info::NetworkAdapters_Adapter_Address* add_address();
  ::google::protobuf::RepeatedPtrField< ::proto::system_info::NetworkAdapters_Adapter_Address >*
      mutable_address();
  const ::google::protobuf::RepeatedPtrField< ::proto::system_info::NetworkAdapters_Adapter_Address >&
      address() const;

  // repeated string dns = 9;
  int dns_size() const;
  void clear_dns();
  static const int kDnsFieldNumber = 9;
  const ::std::string& dns(int index) const;
  ::std::string* mutable_dns(int index);
  void set_dns(int index, const ::std::string& value);
  void set_dns(int index, const char* value);
  void set_dns(int index, const char* value, size_t size);
  ::std::string* add_dns();
  void add_dns(const ::std::string& value);
  void add_dns(const char* value);
  void add_dns(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dns() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dns();

  // repeated string dhcp = 10;
  int dhcp_size() const;
  void clear_dhcp();
  static const int kDhcpFieldNumber = 10;
  const ::std::string& dhcp(int index) const;
  ::std::string* mutable_dhcp(int index);
  void set_dhcp(int index, const ::std::string& value);
  void set_dhcp(int index, const char* value);
  void set_dhcp(int index, const char* value, size_t size);
  ::std::string* add_dhcp();
  void add_dhcp(const ::std::string& value);
  void add_dhcp(const char* value);
  void add_dhcp(const char* value, size_t size);
  const ::google::protobuf::RepeatedPtrField< ::std::string>& dhcp() const;
  ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_dhcp();

  // string adapter_name = 1;
  void clear_adapter_name();
  static const int kAdapterNameFieldNumber = 1;
  const ::std::string& adapter_name() const;
  void set_adapter_name(const ::std::string& value);
  #if LANG_CXX11
  void set_adapter_name(::std::string&& value);
  #endif
  void set_adapter_name(const char* value);
  void set_adapter_name(const char* value, size_t size);
  ::std::string* mutable_adapter_name();
  ::std::string* release_adapter_name();
  void set_allocated_adapter_name(::std::string* adapter_name);

  // string connection_name = 2;
  void clear_connection_name();
  static const int kConnectionNameFieldNumber = 2;
  const ::std::string& connection_name() const;
  void set_connection_name(const ::std::string& value);
  #if LANG_CXX11
  void set_connection_name(::std::string&& value);
  #endif
  void set_connection_name(const char* value);
  void set_connection_name(const char* value, size_t size);
  ::std::string* mutable_connection_name();
  ::std::string* release_connection_name();
  void set_allocated_connection_name(::std::string* connection_name);

  // string iface = 3;
  void clear_iface();
  static const int kIfaceFieldNumber = 3;
  const ::std::string& iface() const;
  void set_iface(const ::std::string& value);
  #if LANG_CXX11
  void set_iface(::std::string&& value);
  #endif
  void set_iface(const char* value);
  void set_iface(const char* value, size_t size);
  ::std::string* mutable_iface();
  ::std::string* release_iface();
  void set_allocated_iface(::std::string* iface);

  // string mac = 5;
  void clear_mac();
  static const int kMacFieldNumber = 5;
  const ::std::string& mac() const;
  void set_mac(const ::std::string& value);
  #if LANG_CXX11
  void set_mac(::std::string&& value);
  #endif
  void set_mac(const char* value);
  void set_mac(const char* value, size_t size);
  ::std::string* mutable_mac();
  ::std::string* release_mac();
  void set_allocated_mac(::std::string* mac);

  // uint64 speed = 4;
  void clear_speed();
  static const int kSpeedFieldNumber = 4;
  ::google::protobuf::uint64 speed() const;
  void set_speed(::google::protobuf::uint64 value);

  // bool dhcp_enabled = 6;
  void clear_dhcp_enabled();
  static const int kDhcpEnabledFieldNumber = 6;
  bool dhcp_enabled() const;
  void set_dhcp_enabled(bool value);

  // @@protoc_insertion_point(class_scope:proto.system_info.NetworkAdapters.Adapter)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::std::string> gateway_;
  ::google::protobuf::RepeatedPtrField< ::proto::system_info::NetworkAdapters_Adapter_Address > address_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dns_;
  ::google::protobuf::RepeatedPtrField< ::std::string> dhcp_;
  ::google::protobuf::internal::ArenaStringPtr adapter_name_;
  ::google::protobuf::internal::ArenaStringPtr connection_name_;
  ::google::protobuf::internal::ArenaStringPtr iface_;
  ::google::protobuf::internal::ArenaStringPtr mac_;
  ::google::protobuf::uint64 speed_;
  bool dhcp_enabled_;
  mutable int _cached_size_;
  friend struct  protobuf_system_5finfo_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class NetworkAdapters : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:proto.system_info.NetworkAdapters) */ {
 public:
  NetworkAdapters();
  virtual ~NetworkAdapters();

  NetworkAdapters(const NetworkAdapters& from);

  inline NetworkAdapters& operator=(const NetworkAdapters& from) {
    CopyFrom(from);
    return *this;
  }

  static const NetworkAdapters& default_instance();

  static inline const NetworkAdapters* internal_default_instance() {
    return reinterpret_cast<const NetworkAdapters*>(
               &_NetworkAdapters_default_instance_);
  }

  void Swap(NetworkAdapters* other);

  // implements Message ----------------------------------------------

  inline NetworkAdapters* New() const PROTOBUF_FINAL { return New(NULL); }

  NetworkAdapters* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    PROTOBUF_FINAL;
  void CopyFrom(const NetworkAdapters& from);
  void MergeFrom(const NetworkAdapters& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  void DiscardUnknownFields();
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(NetworkAdapters* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  typedef NetworkAdapters_Adapter Adapter;

  // accessors -------------------------------------------------------

  // repeated .proto.system_info.NetworkAdapters.Adapter adapter = 1;
  int adapter_size() const;
  void clear_adapter();
  static const int kAdapterFieldNumber = 1;
  const ::proto::system_info::NetworkAdapters_Adapter& adapter(int index) const;
  ::proto::system_info::NetworkAdapters_Adapter* mutable_adapter(int index);
  ::proto::system_info::NetworkAdapters_Adapter* add_adapter();
  ::google::protobuf::RepeatedPtrField< ::proto::system_info::NetworkAdapters_Adapter >*
      mutable_adapter();
  const ::google::protobuf::RepeatedPtrField< ::proto::system_info::NetworkAdapters_Adapter >&
      adapter() const;

  // @@protoc_insertion_point(class_scope:proto.system_info.NetworkAdapters)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::proto::system_info::NetworkAdapters_Adapter > adapter_;
  mutable int _cached_size_;
  friend struct  protobuf_system_5finfo_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// Computer

// string name = 1;
inline void Computer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Computer::name() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Computer.name)
  return name_.GetNoArena();
}
inline void Computer::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Computer.name)
}
#if LANG_CXX11
inline void Computer::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Computer.name)
}
#endif
inline void Computer::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Computer.name)
}
inline void Computer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Computer.name)
}
inline ::std::string* Computer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Computer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Computer::release_name() {
  // @@protoc_insertion_point(field_release:proto.system_info.Computer.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Computer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Computer.name)
}

// string domain = 2;
inline void Computer::clear_domain() {
  domain_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Computer::domain() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Computer.domain)
  return domain_.GetNoArena();
}
inline void Computer::set_domain(const ::std::string& value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Computer.domain)
}
#if LANG_CXX11
inline void Computer::set_domain(::std::string&& value) {
  
  domain_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Computer.domain)
}
#endif
inline void Computer::set_domain(const char* value) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Computer.domain)
}
inline void Computer::set_domain(const char* value, size_t size) {
  
  domain_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Computer.domain)
}
inline ::std::string* Computer::mutable_domain() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Computer.domain)
  return domain_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Computer::release_domain() {
  // @@protoc_insertion_point(field_release:proto.system_info.Computer.domain)
  
  return domain_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Computer::set_allocated_domain(::std::string* domain) {
  if (domain != NULL) {
    
  } else {
    
  }
  domain_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), domain);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Computer.domain)
}

// string workgroup = 3;
inline void Computer::clear_workgroup() {
  workgroup_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Computer::workgroup() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Computer.workgroup)
  return workgroup_.GetNoArena();
}
inline void Computer::set_workgroup(const ::std::string& value) {
  
  workgroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Computer.workgroup)
}
#if LANG_CXX11
inline void Computer::set_workgroup(::std::string&& value) {
  
  workgroup_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Computer.workgroup)
}
#endif
inline void Computer::set_workgroup(const char* value) {
  
  workgroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Computer.workgroup)
}
inline void Computer::set_workgroup(const char* value, size_t size) {
  
  workgroup_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Computer.workgroup)
}
inline ::std::string* Computer::mutable_workgroup() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Computer.workgroup)
  return workgroup_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Computer::release_workgroup() {
  // @@protoc_insertion_point(field_release:proto.system_info.Computer.workgroup)
  
  return workgroup_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Computer::set_allocated_workgroup(::std::string* workgroup) {
  if (workgroup != NULL) {
    
  } else {
    
  }
  workgroup_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), workgroup);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Computer.workgroup)
}

// uint64 uptime = 4;
inline void Computer::clear_uptime() {
  uptime_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Computer::uptime() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Computer.uptime)
  return uptime_;
}
inline void Computer::set_uptime(::google::protobuf::uint64 value) {
  
  uptime_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Computer.uptime)
}

// -------------------------------------------------------------------

// OperatingSystem

// string name = 1;
inline void OperatingSystem::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperatingSystem::name() const {
  // @@protoc_insertion_point(field_get:proto.system_info.OperatingSystem.name)
  return name_.GetNoArena();
}
inline void OperatingSystem::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.OperatingSystem.name)
}
#if LANG_CXX11
inline void OperatingSystem::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.OperatingSystem.name)
}
#endif
inline void OperatingSystem::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.OperatingSystem.name)
}
inline void OperatingSystem::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.OperatingSystem.name)
}
inline ::std::string* OperatingSystem::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.OperatingSystem.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperatingSystem::release_name() {
  // @@protoc_insertion_point(field_release:proto.system_info.OperatingSystem.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.OperatingSystem.name)
}

// string version = 2;
inline void OperatingSystem::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperatingSystem::version() const {
  // @@protoc_insertion_point(field_get:proto.system_info.OperatingSystem.version)
  return version_.GetNoArena();
}
inline void OperatingSystem::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.OperatingSystem.version)
}
#if LANG_CXX11
inline void OperatingSystem::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.OperatingSystem.version)
}
#endif
inline void OperatingSystem::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.OperatingSystem.version)
}
inline void OperatingSystem::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.OperatingSystem.version)
}
inline ::std::string* OperatingSystem::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.OperatingSystem.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperatingSystem::release_version() {
  // @@protoc_insertion_point(field_release:proto.system_info.OperatingSystem.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.OperatingSystem.version)
}

// string arch = 3;
inline void OperatingSystem::clear_arch() {
  arch_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& OperatingSystem::arch() const {
  // @@protoc_insertion_point(field_get:proto.system_info.OperatingSystem.arch)
  return arch_.GetNoArena();
}
inline void OperatingSystem::set_arch(const ::std::string& value) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.OperatingSystem.arch)
}
#if LANG_CXX11
inline void OperatingSystem::set_arch(::std::string&& value) {
  
  arch_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.OperatingSystem.arch)
}
#endif
inline void OperatingSystem::set_arch(const char* value) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.OperatingSystem.arch)
}
inline void OperatingSystem::set_arch(const char* value, size_t size) {
  
  arch_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.OperatingSystem.arch)
}
inline ::std::string* OperatingSystem::mutable_arch() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.OperatingSystem.arch)
  return arch_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* OperatingSystem::release_arch() {
  // @@protoc_insertion_point(field_release:proto.system_info.OperatingSystem.arch)
  
  return arch_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void OperatingSystem::set_allocated_arch(::std::string* arch) {
  if (arch != NULL) {
    
  } else {
    
  }
  arch_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), arch);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.OperatingSystem.arch)
}

// -------------------------------------------------------------------

// Motherboard

// string manufacturer = 1;
inline void Motherboard::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Motherboard::manufacturer() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Motherboard.manufacturer)
  return manufacturer_.GetNoArena();
}
inline void Motherboard::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Motherboard.manufacturer)
}
#if LANG_CXX11
inline void Motherboard::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Motherboard.manufacturer)
}
#endif
inline void Motherboard::set_manufacturer(const char* value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Motherboard.manufacturer)
}
inline void Motherboard::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Motherboard.manufacturer)
}
inline ::std::string* Motherboard::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Motherboard.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Motherboard::release_manufacturer() {
  // @@protoc_insertion_point(field_release:proto.system_info.Motherboard.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Motherboard::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Motherboard.manufacturer)
}

// string model = 2;
inline void Motherboard::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Motherboard::model() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Motherboard.model)
  return model_.GetNoArena();
}
inline void Motherboard::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Motherboard.model)
}
#if LANG_CXX11
inline void Motherboard::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Motherboard.model)
}
#endif
inline void Motherboard::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Motherboard.model)
}
inline void Motherboard::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Motherboard.model)
}
inline ::std::string* Motherboard::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Motherboard.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Motherboard::release_model() {
  // @@protoc_insertion_point(field_release:proto.system_info.Motherboard.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Motherboard::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Motherboard.model)
}

// -------------------------------------------------------------------

// Bios

// string vendor = 1;
inline void Bios::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bios::vendor() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Bios.vendor)
  return vendor_.GetNoArena();
}
inline void Bios::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Bios.vendor)
}
#if LANG_CXX11
inline void Bios::set_vendor(::std::string&& value) {
  
  vendor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Bios.vendor)
}
#endif
inline void Bios::set_vendor(const char* value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Bios.vendor)
}
inline void Bios::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Bios.vendor)
}
inline ::std::string* Bios::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Bios.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bios::release_vendor() {
  // @@protoc_insertion_point(field_release:proto.system_info.Bios.vendor)
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bios::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Bios.vendor)
}

// string version = 2;
inline void Bios::clear_version() {
  version_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bios::version() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Bios.version)
  return version_.GetNoArena();
}
inline void Bios::set_version(const ::std::string& value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Bios.version)
}
#if LANG_CXX11
inline void Bios::set_version(::std::string&& value) {
  
  version_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Bios.version)
}
#endif
inline void Bios::set_version(const char* value) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Bios.version)
}
inline void Bios::set_version(const char* value, size_t size) {
  
  version_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Bios.version)
}
inline ::std::string* Bios::mutable_version() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Bios.version)
  return version_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bios::release_version() {
  // @@protoc_insertion_point(field_release:proto.system_info.Bios.version)
  
  return version_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bios::set_allocated_version(::std::string* version) {
  if (version != NULL) {
    
  } else {
    
  }
  version_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), version);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Bios.version)
}

// string date = 3;
inline void Bios::clear_date() {
  date_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Bios::date() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Bios.date)
  return date_.GetNoArena();
}
inline void Bios::set_date(const ::std::string& value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Bios.date)
}
#if LANG_CXX11
inline void Bios::set_date(::std::string&& value) {
  
  date_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Bios.date)
}
#endif
inline void Bios::set_date(const char* value) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Bios.date)
}
inline void Bios::set_date(const char* value, size_t size) {
  
  date_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Bios.date)
}
inline ::std::string* Bios::mutable_date() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Bios.date)
  return date_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Bios::release_date() {
  // @@protoc_insertion_point(field_release:proto.system_info.Bios.date)
  
  return date_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Bios::set_allocated_date(::std::string* date) {
  if (date != NULL) {
    
  } else {
    
  }
  date_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), date);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Bios.date)
}

// -------------------------------------------------------------------

// Processor

// string vendor = 1;
inline void Processor::clear_vendor() {
  vendor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Processor::vendor() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Processor.vendor)
  return vendor_.GetNoArena();
}
inline void Processor::set_vendor(const ::std::string& value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Processor.vendor)
}
#if LANG_CXX11
inline void Processor::set_vendor(::std::string&& value) {
  
  vendor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Processor.vendor)
}
#endif
inline void Processor::set_vendor(const char* value) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Processor.vendor)
}
inline void Processor::set_vendor(const char* value, size_t size) {
  
  vendor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Processor.vendor)
}
inline ::std::string* Processor::mutable_vendor() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Processor.vendor)
  return vendor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Processor::release_vendor() {
  // @@protoc_insertion_point(field_release:proto.system_info.Processor.vendor)
  
  return vendor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Processor::set_allocated_vendor(::std::string* vendor) {
  if (vendor != NULL) {
    
  } else {
    
  }
  vendor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), vendor);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Processor.vendor)
}

// string model = 2;
inline void Processor::clear_model() {
  model_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Processor::model() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Processor.model)
  return model_.GetNoArena();
}
inline void Processor::set_model(const ::std::string& value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Processor.model)
}
#if LANG_CXX11
inline void Processor::set_model(::std::string&& value) {
  
  model_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Processor.model)
}
#endif
inline void Processor::set_model(const char* value) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Processor.model)
}
inline void Processor::set_model(const char* value, size_t size) {
  
  model_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Processor.model)
}
inline ::std::string* Processor::mutable_model() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Processor.model)
  return model_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Processor::release_model() {
  // @@protoc_insertion_point(field_release:proto.system_info.Processor.model)
  
  return model_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Processor::set_allocated_model(::std::string* model) {
  if (model != NULL) {
    
  } else {
    
  }
  model_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), model);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Processor.model)
}

// uint32 packages = 3;
inline void Processor::clear_packages() {
  packages_ = 0u;
}
inline ::google::protobuf::uint32 Processor::packages() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Processor.packages)
  return packages_;
}
inline void Processor::set_packages(::google::protobuf::uint32 value) {
  
  packages_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Processor.packages)
}

// uint32 cores = 4;
inline void Processor::clear_cores() {
  cores_ = 0u;
}
inline ::google::protobuf::uint32 Processor::cores() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Processor.cores)
  return cores_;
}
inline void Processor::set_cores(::google::protobuf::uint32 value) {
  
  cores_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Processor.cores)
}

// uint32 threads = 5;
inline void Processor::clear_threads() {
  threads_ = 0u;
}
inline ::google::protobuf::uint32 Processor::threads() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Processor.threads)
  return threads_;
}
inline void Processor::set_threads(::google::protobuf::uint32 value) {
  
  threads_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Processor.threads)
}

// -------------------------------------------------------------------

// Memory_Module

// bool present = 1;
inline void Memory_Module::clear_present() {
  present_ = false;
}
inline bool Memory_Module::present() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.present)
  return present_;
}
inline void Memory_Module::set_present(bool value) {
  
  present_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.present)
}

// string location = 2;
inline void Memory_Module::clear_location() {
  location_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Memory_Module::location() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.location)
  return location_.GetNoArena();
}
inline void Memory_Module::set_location(const ::std::string& value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.location)
}
#if LANG_CXX11
inline void Memory_Module::set_location(::std::string&& value) {
  
  location_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Memory.Module.location)
}
#endif
inline void Memory_Module::set_location(const char* value) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Memory.Module.location)
}
inline void Memory_Module::set_location(const char* value, size_t size) {
  
  location_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Memory.Module.location)
}
inline ::std::string* Memory_Module::mutable_location() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Memory.Module.location)
  return location_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Memory_Module::release_location() {
  // @@protoc_insertion_point(field_release:proto.system_info.Memory.Module.location)
  
  return location_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Memory_Module::set_allocated_location(::std::string* location) {
  if (location != NULL) {
    
  } else {
    
  }
  location_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), location);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Memory.Module.location)
}

// string manufacturer = 3;
inline void Memory_Module::clear_manufacturer() {
  manufacturer_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Memory_Module::manufacturer() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.manufacturer)
  return manufacturer_.GetNoArena();
}
inline void Memory_Module::set_manufacturer(const ::std::string& value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.manufacturer)
}
#if LANG_CXX11
inline void Memory_Module::set_manufacturer(::std::string&& value) {
  
  manufacturer_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Memory.Module.manufacturer)
}
#endif
inline void Memory_Module::set_manufacturer(const char* value) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Memory.Module.manufacturer)
}
inline void Memory_Module::set_manufacturer(const char* value, size_t size) {
  
  manufacturer_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Memory.Module.manufacturer)
}
inline ::std::string* Memory_Module::mutable_manufacturer() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Memory.Module.manufacturer)
  return manufacturer_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Memory_Module::release_manufacturer() {
  // @@protoc_insertion_point(field_release:proto.system_info.Memory.Module.manufacturer)
  
  return manufacturer_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Memory_Module::set_allocated_manufacturer(::std::string* manufacturer) {
  if (manufacturer != NULL) {
    
  } else {
    
  }
  manufacturer_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), manufacturer);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Memory.Module.manufacturer)
}

// uint64 size = 4;
inline void Memory_Module::clear_size() {
  size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 Memory_Module::size() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.size)
  return size_;
}
inline void Memory_Module::set_size(::google::protobuf::uint64 value) {
  
  size_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.size)
}

// string type = 5;
inline void Memory_Module::clear_type() {
  type_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Memory_Module::type() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.type)
  return type_.GetNoArena();
}
inline void Memory_Module::set_type(const ::std::string& value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.type)
}
#if LANG_CXX11
inline void Memory_Module::set_type(::std::string&& value) {
  
  type_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Memory.Module.type)
}
#endif
inline void Memory_Module::set_type(const char* value) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Memory.Module.type)
}
inline void Memory_Module::set_type(const char* value, size_t size) {
  
  type_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Memory.Module.type)
}
inline ::std::string* Memory_Module::mutable_type() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Memory.Module.type)
  return type_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Memory_Module::release_type() {
  // @@protoc_insertion_point(field_release:proto.system_info.Memory.Module.type)
  
  return type_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Memory_Module::set_allocated_type(::std::string* type) {
  if (type != NULL) {
    
  } else {
    
  }
  type_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), type);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Memory.Module.type)
}

// string form_factor = 6;
inline void Memory_Module::clear_form_factor() {
  form_factor_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Memory_Module::form_factor() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.form_factor)
  return form_factor_.GetNoArena();
}
inline void Memory_Module::set_form_factor(const ::std::string& value) {
  
  form_factor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.form_factor)
}
#if LANG_CXX11
inline void Memory_Module::set_form_factor(::std::string&& value) {
  
  form_factor_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Memory.Module.form_factor)
}
#endif
inline void Memory_Module::set_form_factor(const char* value) {
  
  form_factor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Memory.Module.form_factor)
}
inline void Memory_Module::set_form_factor(const char* value, size_t size) {
  
  form_factor_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Memory.Module.form_factor)
}
inline ::std::string* Memory_Module::mutable_form_factor() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Memory.Module.form_factor)
  return form_factor_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Memory_Module::release_form_factor() {
  // @@protoc_insertion_point(field_release:proto.system_info.Memory.Module.form_factor)
  
  return form_factor_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Memory_Module::set_allocated_form_factor(::std::string* form_factor) {
  if (form_factor != NULL) {
    
  } else {
    
  }
  form_factor_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), form_factor);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Memory.Module.form_factor)
}

// string part_number = 7;
inline void Memory_Module::clear_part_number() {
  part_number_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Memory_Module::part_number() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.part_number)
  return part_number_.GetNoArena();
}
inline void Memory_Module::set_part_number(const ::std::string& value) {
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.part_number)
}
#if LANG_CXX11
inline void Memory_Module::set_part_number(::std::string&& value) {
  
  part_number_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Memory.Module.part_number)
}
#endif
inline void Memory_Module::set_part_number(const char* value) {
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Memory.Module.part_number)
}
inline void Memory_Module::set_part_number(const char* value, size_t size) {
  
  part_number_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Memory.Module.part_number)
}
inline ::std::string* Memory_Module::mutable_part_number() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Memory.Module.part_number)
  return part_number_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Memory_Module::release_part_number() {
  // @@protoc_insertion_point(field_release:proto.system_info.Memory.Module.part_number)
  
  return part_number_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Memory_Module::set_allocated_part_number(::std::string* part_number) {
  if (part_number != NULL) {
    
  } else {
    
  }
  part_number_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), part_number);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Memory.Module.part_number)
}

// uint32 speed = 8;
inline void Memory_Module::clear_speed() {
  speed_ = 0u;
}
inline ::google::protobuf::uint32 Memory_Module::speed() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.Module.speed)
  return speed_;
}
inline void Memory_Module::set_speed(::google::protobuf::uint32 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Memory.Module.speed)
}

// -------------------------------------------------------------------

// Memory

// repeated .proto.system_info.Memory.Module module = 1;
inline int Memory::module_size() const {
  return module_.size();
}
inline void Memory::clear_module() {
  module_.Clear();
}
inline const ::proto::system_info::Memory_Module& Memory::module(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.Memory.module)
  return module_.Get(index);
}
inline ::proto::system_info::Memory_Module* Memory::mutable_module(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.Memory.module)
  return module_.Mutable(index);
}
inline ::proto::system_info::Memory_Module* Memory::add_module() {
  // @@protoc_insertion_point(field_add:proto.system_info.Memory.module)
  return module_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::system_info::Memory_Module >*
Memory::mutable_module() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.Memory.module)
  return &module_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::system_info::Memory_Module >&
Memory::module() const {
  // @@protoc_insertion_point(field_list:proto.system_info.Memory.module)
  return module_;
}

// -------------------------------------------------------------------

// LogicalDrives_Drive

// string path = 1;
inline void LogicalDrives_Drive::clear_path() {
  path_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogicalDrives_Drive::path() const {
  // @@protoc_insertion_point(field_get:proto.system_info.LogicalDrives.Drive.path)
  return path_.GetNoArena();
}
inline void LogicalDrives_Drive::set_path(const ::std::string& value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.LogicalDrives.Drive.path)
}
#if LANG_CXX11
inline void LogicalDrives_Drive::set_path(::std::string&& value) {
  
  path_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.LogicalDrives.Drive.path)
}
#endif
inline void LogicalDrives_Drive::set_path(const char* value) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.LogicalDrives.Drive.path)
}
inline void LogicalDrives_Drive::set_path(const char* value, size_t size) {
  
  path_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.LogicalDrives.Drive.path)
}
inline ::std::string* LogicalDrives_Drive::mutable_path() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.LogicalDrives.Drive.path)
  return path_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogicalDrives_Drive::release_path() {
  // @@protoc_insertion_point(field_release:proto.system_info.LogicalDrives.Drive.path)
  
  return path_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogicalDrives_Drive::set_allocated_path(::std::string* path) {
  if (path != NULL) {
    
  } else {
    
  }
  path_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), path);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.LogicalDrives.Drive.path)
}

// string file_system = 2;
inline void LogicalDrives_Drive::clear_file_system() {
  file_system_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& LogicalDrives_Drive::file_system() const {
  // @@protoc_insertion_point(field_get:proto.system_info.LogicalDrives.Drive.file_system)
  return file_system_.GetNoArena();
}
inline void LogicalDrives_Drive::set_file_system(const ::std::string& value) {
  
  file_system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.LogicalDrives.Drive.file_system)
}
#if LANG_CXX11
inline void LogicalDrives_Drive::set_file_system(::std::string&& value) {
  
  file_system_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.LogicalDrives.Drive.file_system)
}
#endif
inline void LogicalDrives_Drive::set_file_system(const char* value) {
  
  file_system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.LogicalDrives.Drive.file_system)
}
inline void LogicalDrives_Drive::set_file_system(const char* value, size_t size) {
  
  file_system_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.LogicalDrives.Drive.file_system)
}
inline ::std::string* LogicalDrives_Drive::mutable_file_system() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.LogicalDrives.Drive.file_system)
  return file_system_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* LogicalDrives_Drive::release_file_system() {
  // @@protoc_insertion_point(field_release:proto.system_info.LogicalDrives.Drive.file_system)
  
  return file_system_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void LogicalDrives_Drive::set_allocated_file_system(::std::string* file_system) {
  if (file_system != NULL) {
    
  } else {
    
  }
  file_system_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), file_system);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.LogicalDrives.Drive.file_system)
}

// uint64 total_size = 3;
inline void LogicalDrives_Drive::clear_total_size() {
  total_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogicalDrives_Drive::total_size() const {
  // @@protoc_insertion_point(field_get:proto.system_info.LogicalDrives.Drive.total_size)
  return total_size_;
}
inline void LogicalDrives_Drive::set_total_size(::google::protobuf::uint64 value) {
  
  total_size_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.LogicalDrives.Drive.total_size)
}

// uint64 free_size = 4;
inline void LogicalDrives_Drive::clear_free_size() {
  free_size_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 LogicalDrives_Drive::free_size() const {
  // @@protoc_insertion_point(field_get:proto.system_info.LogicalDrives.Drive.free_size)
  return free_size_;
}
inline void LogicalDrives_Drive::set_free_size(::google::protobuf::uint64 value) {
  
  free_size_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.LogicalDrives.Drive.free_size)
}

// -------------------------------------------------------------------

// LogicalDrives

// repeated .proto.system_info.LogicalDrives.Drive drive = 1;
inline int LogicalDrives::drive_size() const {
  return drive_.size();
}
inline void LogicalDrives::clear_drive() {
  drive_.Clear();
}
inline const ::proto::system_info::LogicalDrives_Drive& LogicalDrives::drive(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.LogicalDrives.drive)
  return drive_.Get(index);
}
inline ::proto::system_info::LogicalDrives_Drive* LogicalDrives::mutable_drive(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.LogicalDrives.drive)
  return drive_.Mutable(index);
}
inline ::proto::system_info::LogicalDrives_Drive* LogicalDrives::add_drive() {
  // @@protoc_insertion_point(field_add:proto.system_info.LogicalDrives.drive)
  return drive_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::system_info::LogicalDrives_Drive >*
LogicalDrives::mutable_drive() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.LogicalDrives.drive)
  return &drive_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::system_info::LogicalDrives_Drive >&
LogicalDrives::drive() const {
  // @@protoc_insertion_point(field_list:proto.system_info.LogicalDrives.drive)
  return drive_;
}

// -------------------------------------------------------------------

// Printers_Printer

// string name = 1;
inline void Printers_Printer::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Printers_Printer::name() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.Printer.name)
  return name_.GetNoArena();
}
inline void Printers_Printer::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Printers.Printer.name)
}
#if LANG_CXX11
inline void Printers_Printer::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Printers.Printer.name)
}
#endif
inline void Printers_Printer::set_name(const char* value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Printers.Printer.name)
}
inline void Printers_Printer::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Printers.Printer.name)
}
inline ::std::string* Printers_Printer::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Printers.Printer.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Printers_Printer::release_name() {
  // @@protoc_insertion_point(field_release:proto.system_info.Printers.Printer.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Printers_Printer::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Printers.Printer.name)
}

// bool default = 2;
inline void Printers_Printer::clear_default_() {
  default__ = false;
}
inline bool Printers_Printer::default_() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.Printer.default)
  return default__;
}
inline void Printers_Printer::set_default_(bool value) {
  
  default__ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Printers.Printer.default)
}

// bool shared = 3;
inline void Printers_Printer::clear_shared() {
  shared_ = false;
}
inline bool Printers_Printer::shared() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.Printer.shared)
  return shared_;
}
inline void Printers_Printer::set_shared(bool value) {
  
  shared_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Printers.Printer.shared)
}

// string port = 4;
inline void Printers_Printer::clear_port() {
  port_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Printers_Printer::port() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.Printer.port)
  return port_.GetNoArena();
}
inline void Printers_Printer::set_port(const ::std::string& value) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Printers.Printer.port)
}
#if LANG_CXX11
inline void Printers_Printer::set_port(::std::string&& value) {
  
  port_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Printers.Printer.port)
}
#endif
inline void Printers_Printer::set_port(const char* value) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Printers.Printer.port)
}
inline void Printers_Printer::set_port(const char* value, size_t size) {
  
  port_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Printers.Printer.port)
}
inline ::std::string* Printers_Printer::mutable_port() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Printers.Printer.port)
  return port_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Printers_Printer::release_port() {
  // @@protoc_insertion_point(field_release:proto.system_info.Printers.Printer.port)
  
  return port_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Printers_Printer::set_allocated_port(::std::string* port) {
  if (port != NULL) {
    
  } else {
    
  }
  port_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), port);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Printers.Printer.port)
}

// string driver = 5;
inline void Printers_Printer::clear_driver() {
  driver_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Printers_Printer::driver() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.Printer.driver)
  return driver_.GetNoArena();
}
inline void Printers_Printer::set_driver(const ::std::string& value) {
  
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Printers.Printer.driver)
}
#if LANG_CXX11
inline void Printers_Printer::set_driver(::std::string&& value) {
  
  driver_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Printers.Printer.driver)
}
#endif
inline void Printers_Printer::set_driver(const char* value) {
  
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Printers.Printer.driver)
}
inline void Printers_Printer::set_driver(const char* value, size_t size) {
  
  driver_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Printers.Printer.driver)
}
inline ::std::string* Printers_Printer::mutable_driver() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Printers.Printer.driver)
  return driver_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Printers_Printer::release_driver() {
  // @@protoc_insertion_point(field_release:proto.system_info.Printers.Printer.driver)
  
  return driver_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Printers_Printer::set_allocated_driver(::std::string* driver) {
  if (driver != NULL) {
    
  } else {
    
  }
  driver_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), driver);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Printers.Printer.driver)
}

// uint32 jobs_count = 6;
inline void Printers_Printer::clear_jobs_count() {
  jobs_count_ = 0u;
}
inline ::google::protobuf::uint32 Printers_Printer::jobs_count() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.Printer.jobs_count)
  return jobs_count_;
}
inline void Printers_Printer::set_jobs_count(::google::protobuf::uint32 value) {
  
  jobs_count_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.Printers.Printer.jobs_count)
}

// string share_name = 7;
inline void Printers_Printer::clear_share_name() {
  share_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Printers_Printer::share_name() const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.Printer.share_name)
  return share_name_.GetNoArena();
}
inline void Printers_Printer::set_share_name(const ::std::string& value) {
  
  share_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.Printers.Printer.share_name)
}
#if LANG_CXX11
inline void Printers_Printer::set_share_name(::std::string&& value) {
  
  share_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.Printers.Printer.share_name)
}
#endif
inline void Printers_Printer::set_share_name(const char* value) {
  
  share_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.Printers.Printer.share_name)
}
inline void Printers_Printer::set_share_name(const char* value, size_t size) {
  
  share_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.Printers.Printer.share_name)
}
inline ::std::string* Printers_Printer::mutable_share_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.Printers.Printer.share_name)
  return share_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Printers_Printer::release_share_name() {
  // @@protoc_insertion_point(field_release:proto.system_info.Printers.Printer.share_name)
  
  return share_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Printers_Printer::set_allocated_share_name(::std::string* share_name) {
  if (share_name != NULL) {
    
  } else {
    
  }
  share_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), share_name);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.Printers.Printer.share_name)
}

// -------------------------------------------------------------------

// Printers

// repeated .proto.system_info.Printers.Printer printer = 1;
inline int Printers::printer_size() const {
  return printer_.size();
}
inline void Printers::clear_printer() {
  printer_.Clear();
}
inline const ::proto::system_info::Printers_Printer& Printers::printer(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.Printers.printer)
  return printer_.Get(index);
}
inline ::proto::system_info::Printers_Printer* Printers::mutable_printer(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.Printers.printer)
  return printer_.Mutable(index);
}
inline ::proto::system_info::Printers_Printer* Printers::add_printer() {
  // @@protoc_insertion_point(field_add:proto.system_info.Printers.printer)
  return printer_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::system_info::Printers_Printer >*
Printers::mutable_printer() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.Printers.printer)
  return &printer_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::system_info::Printers_Printer >&
Printers::printer() const {
  // @@protoc_insertion_point(field_list:proto.system_info.Printers.printer)
  return printer_;
}

// -------------------------------------------------------------------

// NetworkAdapters_Adapter_Address

// string ip = 1;
inline void NetworkAdapters_Adapter_Address::clear_ip() {
  ip_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkAdapters_Adapter_Address::ip() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.Address.ip)
  return ip_.GetNoArena();
}
inline void NetworkAdapters_Adapter_Address::set_ip(const ::std::string& value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.Address.ip)
}
#if LANG_CXX11
inline void NetworkAdapters_Adapter_Address::set_ip(::std::string&& value) {
  
  ip_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.NetworkAdapters.Adapter.Address.ip)
}
#endif
inline void NetworkAdapters_Adapter_Address::set_ip(const char* value) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.Address.ip)
}
inline void NetworkAdapters_Adapter_Address::set_ip(const char* value, size_t size) {
  
  ip_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.Address.ip)
}
inline ::std::string* NetworkAdapters_Adapter_Address::mutable_ip() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.Address.ip)
  return ip_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkAdapters_Adapter_Address::release_ip() {
  // @@protoc_insertion_point(field_release:proto.system_info.NetworkAdapters.Adapter.Address.ip)
  
  return ip_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkAdapters_Adapter_Address::set_allocated_ip(::std::string* ip) {
  if (ip != NULL) {
    
  } else {
    
  }
  ip_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ip);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.NetworkAdapters.Adapter.Address.ip)
}

// string mask = 2;
inline void NetworkAdapters_Adapter_Address::clear_mask() {
  mask_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkAdapters_Adapter_Address::mask() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.Address.mask)
  return mask_.GetNoArena();
}
inline void NetworkAdapters_Adapter_Address::set_mask(const ::std::string& value) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.Address.mask)
}
#if LANG_CXX11
inline void NetworkAdapters_Adapter_Address::set_mask(::std::string&& value) {
  
  mask_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.NetworkAdapters.Adapter.Address.mask)
}
#endif
inline void NetworkAdapters_Adapter_Address::set_mask(const char* value) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.Address.mask)
}
inline void NetworkAdapters_Adapter_Address::set_mask(const char* value, size_t size) {
  
  mask_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.Address.mask)
}
inline ::std::string* NetworkAdapters_Adapter_Address::mutable_mask() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.Address.mask)
  return mask_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkAdapters_Adapter_Address::release_mask() {
  // @@protoc_insertion_point(field_release:proto.system_info.NetworkAdapters.Adapter.Address.mask)
  
  return mask_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkAdapters_Adapter_Address::set_allocated_mask(::std::string* mask) {
  if (mask != NULL) {
    
  } else {
    
  }
  mask_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mask);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.NetworkAdapters.Adapter.Address.mask)
}

// -------------------------------------------------------------------

// NetworkAdapters_Adapter

// string adapter_name = 1;
inline void NetworkAdapters_Adapter::clear_adapter_name() {
  adapter_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkAdapters_Adapter::adapter_name() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.adapter_name)
  return adapter_name_.GetNoArena();
}
inline void NetworkAdapters_Adapter::set_adapter_name(const ::std::string& value) {
  
  adapter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.adapter_name)
}
#if LANG_CXX11
inline void NetworkAdapters_Adapter::set_adapter_name(::std::string&& value) {
  
  adapter_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.NetworkAdapters.Adapter.adapter_name)
}
#endif
inline void NetworkAdapters_Adapter::set_adapter_name(const char* value) {
  
  adapter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.adapter_name)
}
inline void NetworkAdapters_Adapter::set_adapter_name(const char* value, size_t size) {
  
  adapter_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.adapter_name)
}
inline ::std::string* NetworkAdapters_Adapter::mutable_adapter_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.adapter_name)
  return adapter_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkAdapters_Adapter::release_adapter_name() {
  // @@protoc_insertion_point(field_release:proto.system_info.NetworkAdapters.Adapter.adapter_name)
  
  return adapter_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkAdapters_Adapter::set_allocated_adapter_name(::std::string* adapter_name) {
  if (adapter_name != NULL) {
    
  } else {
    
  }
  adapter_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), adapter_name);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.NetworkAdapters.Adapter.adapter_name)
}

// string connection_name = 2;
inline void NetworkAdapters_Adapter::clear_connection_name() {
  connection_name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkAdapters_Adapter::connection_name() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.connection_name)
  return connection_name_.GetNoArena();
}
inline void NetworkAdapters_Adapter::set_connection_name(const ::std::string& value) {
  
  connection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.connection_name)
}
#if LANG_CXX11
inline void NetworkAdapters_Adapter::set_connection_name(::std::string&& value) {
  
  connection_name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.NetworkAdapters.Adapter.connection_name)
}
#endif
inline void NetworkAdapters_Adapter::set_connection_name(const char* value) {
  
  connection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.connection_name)
}
inline void NetworkAdapters_Adapter::set_connection_name(const char* value, size_t size) {
  
  connection_name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.connection_name)
}
inline ::std::string* NetworkAdapters_Adapter::mutable_connection_name() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.connection_name)
  return connection_name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkAdapters_Adapter::release_connection_name() {
  // @@protoc_insertion_point(field_release:proto.system_info.NetworkAdapters.Adapter.connection_name)
  
  return connection_name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkAdapters_Adapter::set_allocated_connection_name(::std::string* connection_name) {
  if (connection_name != NULL) {
    
  } else {
    
  }
  connection_name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), connection_name);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.NetworkAdapters.Adapter.connection_name)
}

// string iface = 3;
inline void NetworkAdapters_Adapter::clear_iface() {
  iface_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkAdapters_Adapter::iface() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.iface)
  return iface_.GetNoArena();
}
inline void NetworkAdapters_Adapter::set_iface(const ::std::string& value) {
  
  iface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.iface)
}
#if LANG_CXX11
inline void NetworkAdapters_Adapter::set_iface(::std::string&& value) {
  
  iface_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.NetworkAdapters.Adapter.iface)
}
#endif
inline void NetworkAdapters_Adapter::set_iface(const char* value) {
  
  iface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.iface)
}
inline void NetworkAdapters_Adapter::set_iface(const char* value, size_t size) {
  
  iface_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.iface)
}
inline ::std::string* NetworkAdapters_Adapter::mutable_iface() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.iface)
  return iface_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkAdapters_Adapter::release_iface() {
  // @@protoc_insertion_point(field_release:proto.system_info.NetworkAdapters.Adapter.iface)
  
  return iface_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkAdapters_Adapter::set_allocated_iface(::std::string* iface) {
  if (iface != NULL) {
    
  } else {
    
  }
  iface_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), iface);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.NetworkAdapters.Adapter.iface)
}

// uint64 speed = 4;
inline void NetworkAdapters_Adapter::clear_speed() {
  speed_ = GOOGLE_ULONGLONG(0);
}
inline ::google::protobuf::uint64 NetworkAdapters_Adapter::speed() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.speed)
  return speed_;
}
inline void NetworkAdapters_Adapter::set_speed(::google::protobuf::uint64 value) {
  
  speed_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.speed)
}

// string mac = 5;
inline void NetworkAdapters_Adapter::clear_mac() {
  mac_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& NetworkAdapters_Adapter::mac() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.mac)
  return mac_.GetNoArena();
}
inline void NetworkAdapters_Adapter::set_mac(const ::std::string& value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.mac)
}
#if LANG_CXX11
inline void NetworkAdapters_Adapter::set_mac(::std::string&& value) {
  
  mac_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:proto.system_info.NetworkAdapters.Adapter.mac)
}
#endif
inline void NetworkAdapters_Adapter::set_mac(const char* value) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.mac)
}
inline void NetworkAdapters_Adapter::set_mac(const char* value, size_t size) {
  
  mac_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.mac)
}
inline ::std::string* NetworkAdapters_Adapter::mutable_mac() {
  
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.mac)
  return mac_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* NetworkAdapters_Adapter::release_mac() {
  // @@protoc_insertion_point(field_release:proto.system_info.NetworkAdapters.Adapter.mac)
  
  return mac_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void NetworkAdapters_Adapter::set_allocated_mac(::std::string* mac) {
  if (mac != NULL) {
    
  } else {
    
  }
  mac_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mac);
  // @@protoc_insertion_point(field_set_allocated:proto.system_info.NetworkAdapters.Adapter.mac)
}

// bool dhcp_enabled = 6;
inline void NetworkAdapters_Adapter::clear_dhcp_enabled() {
  dhcp_enabled_ = false;
}
inline bool NetworkAdapters_Adapter::dhcp_enabled() const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.dhcp_enabled)
  return dhcp_enabled_;
}
inline void NetworkAdapters_Adapter::set_dhcp_enabled(bool value) {
  
  dhcp_enabled_ = value;
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.dhcp_enabled)
}

// repeated string gateway = 7;
inline int NetworkAdapters_Adapter::gateway_size() const {
  return gateway_.size();
}
inline void NetworkAdapters_Adapter::clear_gateway() {
  gateway_.Clear();
}
inline const ::std::string& NetworkAdapters_Adapter::gateway(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.gateway)
  return gateway_.Get(index);
}
inline ::std::string* NetworkAdapters_Adapter::mutable_gateway(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.gateway)
  return gateway_.Mutable(index);
}
inline void NetworkAdapters_Adapter::set_gateway(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.gateway)
  gateway_.Mutable(index)->assign(value);
}
inline void NetworkAdapters_Adapter::set_gateway(int index, const char* value) {
  gateway_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.gateway)
}
inline void NetworkAdapters_Adapter::set_gateway(int index, const char* value, size_t size) {
  gateway_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.gateway)
}
inline ::std::string* NetworkAdapters_Adapter::add_gateway() {
  // @@protoc_insertion_point(field_add_mutable:proto.system_info.NetworkAdapters.Adapter.gateway)
  return gateway_.Add();
}
inline void NetworkAdapters_Adapter::add_gateway(const ::std::string& value) {
  gateway_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.system_info.NetworkAdapters.Adapter.gateway)
}
inline void NetworkAdapters_Adapter::add_gateway(const char* value) {
  gateway_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.system_info.NetworkAdapters.Adapter.gateway)
}
inline void NetworkAdapters_Adapter::add_gateway(const char* value, size_t size) {
  gateway_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.system_info.NetworkAdapters.Adapter.gateway)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkAdapters_Adapter::gateway() const {
  // @@protoc_insertion_point(field_list:proto.system_info.NetworkAdapters.Adapter.gateway)
  return gateway_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkAdapters_Adapter::mutable_gateway() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.NetworkAdapters.Adapter.gateway)
  return &gateway_;
}

// repeated .proto.system_info.NetworkAdapters.Adapter.Address address = 8;
inline int NetworkAdapters_Adapter::address_size() const {
  return address_.size();
}
inline void NetworkAdapters_Adapter::clear_address() {
  address_.Clear();
}
inline const ::proto::system_info::NetworkAdapters_Adapter_Address& NetworkAdapters_Adapter::address(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.address)
  return address_.Get(index);
}
inline ::proto::system_info::NetworkAdapters_Adapter_Address* NetworkAdapters_Adapter::mutable_address(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.address)
  return address_.Mutable(index);
}
inline ::proto::system_info::NetworkAdapters_Adapter_Address* NetworkAdapters_Adapter::add_address() {
  // @@protoc_insertion_point(field_add:proto.system_info.NetworkAdapters.Adapter.address)
  return address_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::system_info::NetworkAdapters_Adapter_Address >*
NetworkAdapters_Adapter::mutable_address() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.NetworkAdapters.Adapter.address)
  return &address_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::system_info::NetworkAdapters_Adapter_Address >&
NetworkAdapters_Adapter::address() const {
  // @@protoc_insertion_point(field_list:proto.system_info.NetworkAdapters.Adapter.address)
  return address_;
}

// repeated string dns = 9;
inline int NetworkAdapters_Adapter::dns_size() const {
  return dns_.size();
}
inline void NetworkAdapters_Adapter::clear_dns() {
  dns_.Clear();
}
inline const ::std::string& NetworkAdapters_Adapter::dns(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.dns)
  return dns_.Get(index);
}
inline ::std::string* NetworkAdapters_Adapter::mutable_dns(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.dns)
  return dns_.Mutable(index);
}
inline void NetworkAdapters_Adapter::set_dns(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.dns)
  dns_.Mutable(index)->assign(value);
}
inline void NetworkAdapters_Adapter::set_dns(int index, const char* value) {
  dns_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.dns)
}
inline void NetworkAdapters_Adapter::set_dns(int index, const char* value, size_t size) {
  dns_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.dns)
}
inline ::std::string* NetworkAdapters_Adapter::add_dns() {
  // @@protoc_insertion_point(field_add_mutable:proto.system_info.NetworkAdapters.Adapter.dns)
  return dns_.Add();
}
inline void NetworkAdapters_Adapter::add_dns(const ::std::string& value) {
  dns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.system_info.NetworkAdapters.Adapter.dns)
}
inline void NetworkAdapters_Adapter::add_dns(const char* value) {
  dns_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.system_info.NetworkAdapters.Adapter.dns)
}
inline void NetworkAdapters_Adapter::add_dns(const char* value, size_t size) {
  dns_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.system_info.NetworkAdapters.Adapter.dns)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkAdapters_Adapter::dns() const {
  // @@protoc_insertion_point(field_list:proto.system_info.NetworkAdapters.Adapter.dns)
  return dns_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkAdapters_Adapter::mutable_dns() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.NetworkAdapters.Adapter.dns)
  return &dns_;
}

// repeated string dhcp = 10;
inline int NetworkAdapters_Adapter::dhcp_size() const {
  return dhcp_.size();
}
inline void NetworkAdapters_Adapter::clear_dhcp() {
  dhcp_.Clear();
}
inline const ::std::string& NetworkAdapters_Adapter::dhcp(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.Adapter.dhcp)
  return dhcp_.Get(index);
}
inline ::std::string* NetworkAdapters_Adapter::mutable_dhcp(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.Adapter.dhcp)
  return dhcp_.Mutable(index);
}
inline void NetworkAdapters_Adapter::set_dhcp(int index, const ::std::string& value) {
  // @@protoc_insertion_point(field_set:proto.system_info.NetworkAdapters.Adapter.dhcp)
  dhcp_.Mutable(index)->assign(value);
}
inline void NetworkAdapters_Adapter::set_dhcp(int index, const char* value) {
  dhcp_.Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:proto.system_info.NetworkAdapters.Adapter.dhcp)
}
inline void NetworkAdapters_Adapter::set_dhcp(int index, const char* value, size_t size) {
  dhcp_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:proto.system_info.NetworkAdapters.Adapter.dhcp)
}
inline ::std::string* NetworkAdapters_Adapter::add_dhcp() {
  // @@protoc_insertion_point(field_add_mutable:proto.system_info.NetworkAdapters.Adapter.dhcp)
  return dhcp_.Add();
}
inline void NetworkAdapters_Adapter::add_dhcp(const ::std::string& value) {
  dhcp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add:proto.system_info.NetworkAdapters.Adapter.dhcp)
}
inline void NetworkAdapters_Adapter::add_dhcp(const char* value) {
  dhcp_.Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:proto.system_info.NetworkAdapters.Adapter.dhcp)
}
inline void NetworkAdapters_Adapter::add_dhcp(const char* value, size_t size) {
  dhcp_.Add()->assign(reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:proto.system_info.NetworkAdapters.Adapter.dhcp)
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
NetworkAdapters_Adapter::dhcp() const {
  // @@protoc_insertion_point(field_list:proto.system_info.NetworkAdapters.Adapter.dhcp)
  return dhcp_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
NetworkAdapters_Adapter::mutable_dhcp() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.NetworkAdapters.Adapter.dhcp)
  return &dhcp_;
}

// -------------------------------------------------------------------

// NetworkAdapters

// repeated .proto.system_info.NetworkAdapters.Adapter adapter = 1;
inline int NetworkAdapters::adapter_size() const {
  return adapter_.size();
}
inline void NetworkAdapters::clear_adapter() {
  adapter_.Clear();
}
inline const ::proto::system_info::NetworkAdapters_Adapter& NetworkAdapters::adapter(int index) const {
  // @@protoc_insertion_point(field_get:proto.system_info.NetworkAdapters.adapter)
  return adapter_.Get(index);
}
inline ::proto::system_info::NetworkAdapters_Adapter* NetworkAdapters::mutable_adapter(int index) {
  // @@protoc_insertion_point(field_mutable:proto.system_info.NetworkAdapters.adapter)
  return adapter_.Mutable(index);
}
inline ::proto::system_info::NetworkAdapters_Adapter* NetworkAdapters::add_adapter() {
  // @@protoc_insertion_point(field_add:proto.system_info.NetworkAdapters.adapter)
  return adapter_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::proto::system_info::NetworkAdapters_Adapter >*
NetworkAdapters::mutable_adapter() {
  // @@protoc_insertion_point(field_mutable_list:proto.system_info.NetworkAdapters.adapter)
  return &adapter_;
}
inline const ::google::protobuf::RepeatedPtrField< ::proto::system_info::NetworkAdapters_Adapter >&
NetworkAdapters::adapter() const {
  // @@protoc_insertion_point(field_list:proto.system_info.NetworkAdapters.adapter)
  return adapter_;
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace system_info
}  // namespace proto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_system_5finfo_2eproto__INCLUDED
